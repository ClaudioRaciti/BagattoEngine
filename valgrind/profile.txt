--------------------------------------------------------------------------------
Profile data file 'callgrind.out.9603' (creator: callgrind-3.24.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 431745903
Trigger: Program termination
Profiled target:  ./out/build/GCC-Debug/engine (PID 9603, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,576,378,867 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
118,069,426 ( 7.49%)  evaluation.cpp:evaluate(Board const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 88,353,733 ( 5.60%)  MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 76,716,810 ( 4.87%)  Board.hpp:Board::getBitboard(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 55,292,880 ( 3.51%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 53,329,174 ( 3.38%)  Board.cpp:Board::updateBitboards(int, int, int, Move) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 44,234,304 ( 2.81%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 41,943,081 ( 2.66%)  TT.cpp:TT::resize(int) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 38,705,016 ( 2.46%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::end() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 35,569,755 ( 2.26%)  evaluation.cpp:egValue(int, int) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 35,569,755 ( 2.26%)  evaluation.cpp:mgValue(int, int) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 33,175,728 ( 2.10%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 28,951,215 ( 1.84%)  evaluation.hpp:mirror(int&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 28,627,938 ( 1.82%)  MagicBitboards.hpp:MagicBitboards::getAttacks(int, int, unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 25,751,625 ( 1.63%)  MoveGenerator.cpp:MoveGenerator::pieceMoves(unsigned long, int, std::vector<Move, std::allocator<Move> >&, Board const&) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 25,600,938 ( 1.62%)  /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 25,523,158 ( 1.62%)  Board.cpp:Board::makeMove(Move const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 25,424,703 ( 1.61%)  Move.hpp:Move::Move() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 25,362,432 ( 1.61%)  TT.hpp:TTEntry::TTEntry() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 24,702,197 ( 1.57%)  Board.cpp:Board::updateState(int, int, Move) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 23,658,645 ( 1.50%)  utils.hpp:bitScanForward(unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 22,680,938 ( 1.44%)  Board.cpp:Board::undoMove(Move const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 22,343,867 ( 1.42%)  Board.hpp:Board::searchPiece(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 19,250,688 ( 1.22%)  Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 17,622,336 ( 1.12%)  Move.cpp:Move::Move(Move const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 14,897,049 ( 0.95%)  Move.hpp:Move::flag() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 14,573,426 ( 0.92%)  /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 13,347,478 ( 0.85%)  ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
 12,659,304 ( 0.80%)  MagicBitboards.hpp:MagicBitboards::queenAttacks(unsigned long, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 12,218,031 ( 0.78%)  Board.hpp:Board::getSideToMove() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 11,696,350 ( 0.74%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 11,413,917 ( 0.72%)  MagicBitboards.hpp:MagicBitboards::rookAttacks(unsigned long, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 11,334,357 ( 0.72%)  MagicBitboards.hpp:MagicBitboards::bishopAttacks(unsigned long, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 11,058,576 ( 0.70%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 10,912,004 ( 0.69%)  Move.hpp:Move::from() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 10,652,382 ( 0.68%)  Board.cpp:Board::forgetState() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 10,442,352 ( 0.66%)  Board.hpp:Board::getEpState() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
 10,437,482 ( 0.66%)  Engine.cpp:Engine::quiescence(short, short)'2 [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  9,971,824 ( 0.63%)  Board.hpp:Board::getCastles() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  9,589,183 ( 0.61%)  Engine.cpp:Engine::quiescence(short, short)::{lambda(Move, Move)#1}::operator()(Move, Move) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  9,438,504 ( 0.60%)  /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  9,357,080 ( 0.59%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  9,093,257 ( 0.58%)  Engine.cpp:Engine::quiescence(short, short)::{lambda(Move, Move)#2}::operator()(Move, Move) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  9,082,240 ( 0.58%)  MagicBitboards.cpp:MagicBitboards::initMagicOcc(int*, int, unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  8,731,854 ( 0.55%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
  8,725,346 ( 0.55%)  Zobrist.hpp:Zobrist::getCastleKey(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  8,283,480 ( 0.53%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::base() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  8,187,501 ( 0.52%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::end() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  8,116,439 ( 0.51%)  Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)'2 [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,963,605 ( 0.51%)  Move.hpp:Move::to() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,904,390 ( 0.50%)  /usr/include/c++/14/array:std::array<short, 8ul>::operator[](unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,691,904 ( 0.49%)  /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,433,802 ( 0.47%)  /usr/include/c++/14/bits/vector.tcc:std::vector<Move, std::allocator<Move> >::reserve(unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,231,547 ( 0.46%)  MoveGenerator.cpp:MoveGenerator::pawnMoves(unsigned long, std::vector<Move, std::allocator<Move> >&, Board const&) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,221,285 ( 0.46%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  7,017,858 ( 0.45%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  6,859,214 ( 0.44%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  6,383,962 ( 0.40%)  /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  6,307,520 ( 0.40%)  MagicBitboards.cpp:MagicBitboards::initMagicRMoves(int, unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  6,238,364 ( 0.40%)  Move.hpp:Move::isEnPassant() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  6,232,380 ( 0.40%)  Engine.cpp:Engine::isIllegal() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  6,123,274 ( 0.39%)  /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,671,796 ( 0.36%)  /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,630,515 ( 0.36%)  Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#1}::operator()(Move) const'2 [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,340,670 ( 0.34%)  /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,297,557 ( 0.34%)  /usr/include/c++/14/bits/vector.tcc:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,137,627 ( 0.33%)  Board.hpp:Board::getKingSquare(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,109,762 ( 0.32%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>::operator()<Move, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  5,026,488 ( 0.32%)  /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_backward<true, false, std::random_access_iterator_tag>::__copy_move_b<Move*, Move*>(Move*, Move*, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  4,990,344 ( 0.32%)  Move.hpp:Move::isPromo() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  4,873,030 ( 0.31%)  Move.hpp:Move::isCastle() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  4,841,116 ( 0.31%)  /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  4,750,234 ( 0.30%)  Engine.cpp:Engine::quiescence(short, short) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  4,295,418 ( 0.27%)  MoveGenerator.cpp:MoveGenerator::generate(unsigned long, Board const&, std::vector<Move, std::allocator<Move> >&) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  4,094,182 ( 0.26%)  MoveGenerator.cpp:MoveGenerator::castles(std::vector<Move, std::allocator<Move> >&, Board const&) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,992,777 ( 0.25%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,847,118 ( 0.24%)  Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}::operator()(Move, Move) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,845,952 ( 0.24%)  /usr/include/c++/14/bits/new_allocator.h:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0]
  3,845,952 ( 0.24%)  Move.cpp:Move::Move(int, int, int) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,827,734 ( 0.24%)  /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,771,072 ( 0.24%)  Move.hpp:Move::isCapture() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,754,476 ( 0.24%)  /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,573,448 ( 0.23%)  Board.hpp:Board::getCaptured() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,555,105 ( 0.23%)  Move.cpp:Move::operator=(Move) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,479,652 ( 0.22%)  /usr/include/c++/14/bits/stl_vector.h:Move* std::vector<Move, std::allocator<Move> >::_M_allocate_and_copy<Move const*>(unsigned long, Move const*, Move const*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,457,994 ( 0.22%)  /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,427,809 ( 0.22%)  Board.hpp:Board::toggleSideToMove() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,420,169 ( 0.22%)  Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}::operator()(Move, Move) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,220,766 ( 0.20%)  /usr/include/c++/14/bits/stl_tempbuf.h:void std::__uninitialized_construct_buf_dispatch<false>::__ucr<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,208,448 ( 0.20%)  /usr/include/c++/14/array:std::array<unsigned long, 768ul>::operator[](unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,189,926 ( 0.20%)  /usr/include/c++/14/bits/move.h:Move&& std::forward<Move>(std::remove_reference<Move>::type&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,181,250 ( 0.20%)  MagicBitboards.hpp:MagicBitboards::pawnAttacks(int, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,112,521 ( 0.20%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,106,269 ( 0.20%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  3,028,574 ( 0.19%)  /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move<true, false, std::random_access_iterator_tag>::__copy_m<Move*, Move*>(Move*, Move*, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,962,920 ( 0.19%)  Engine.cpp:Engine::isCheck() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,912,592 ( 0.18%)  Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}::operator()(Move) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,837,492 ( 0.18%)  /usr/include/c++/14/bits/stl_iterator.h:Move* std::__niter_base<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,800,915 ( 0.18%)  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  2,643,785 ( 0.17%)  /usr/include/c++/14/bits/stl_algo.h:void std::__move_merge_adaptive<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,643,744 ( 0.17%)  /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,626,186 ( 0.17%)  Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, int)#1}::operator()(Move, int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,621,346 ( 0.17%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<Move, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,605,260 ( 0.17%)  Engine.cpp:Engine::threefoldRepetition() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,492,956 ( 0.16%)  /usr/include/c++/14/array:std::array<unsigned long, 16ul>::operator[](unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,420,045 ( 0.15%)  /usr/include/c++/14/bits/stl_algo.h:void std::__move_merge_adaptive_backward<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,339,270 ( 0.15%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,302,653 ( 0.15%)  ./malloc/./malloc/arena.c:free
  2,277,297 ( 0.14%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,270,337 ( 0.14%)  /usr/include/c++/14/bits/stl_algo.h:void std::__merge_sort_with_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,268,168 ( 0.14%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::operator()<Move, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,248,985 ( 0.14%)  /usr/include/c++/14/bits/stl_algo.h:void std::__stable_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,238,723 ( 0.14%)  /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,181,298 ( 0.14%)  /usr/include/c++/14/bits/new_allocator.h:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) [clone .isra.0]
  2,146,020 ( 0.14%)  /usr/include/c++/14/new:operator new(unsigned long, void*) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,110,380 ( 0.13%)  /usr/include/c++/14/bits/stl_algo.h:void std::__chunk_insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [clone .constprop.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,056,695 ( 0.13%)  MagicBitboards.cpp:MagicBitboards::initMagicMoves() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,051,370 ( 0.13%)  MagicBitboards.hpp:MagicBitboards::knightAttacks(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  2,012,823 ( 0.13%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::__normal_iterator(Move* const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,963,388 ( 0.12%)  /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__copy_move_backward_a<true, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,936,955 ( 0.12%)  Engine.cpp:Engine::exitSearch() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,869,740 ( 0.12%)  /usr/include/c++/14/bits/move.h:unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,839,077 ( 0.12%)  /usr/include/c++/14/bits/vector.tcc:unsigned long& std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,830,120 ( 0.12%)  Board.hpp:Board::setKingSquare(int, int) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,790,512 ( 0.11%)  /usr/include/c++/14/bits/move.h:std::remove_reference<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>::type&& std::move<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,739,327 ( 0.11%)  /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,716,990 ( 0.11%)  MagicBitboards.hpp:MagicBitboards::kingAttacks(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,676,450 ( 0.11%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::_S_max_size(std::allocator<Move> const&) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,662,099 ( 0.11%)  /usr/include/c++/14/bits/stl_algo.h:void std::__stable_sort_adaptive<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,624,060 ( 0.10%)  /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,560,454 ( 0.10%)  /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,477,730 ( 0.09%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> __gnu_cxx::__ops::__val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>(__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,458,496 ( 0.09%)  /usr/include/c++/14/bits/stl_algo.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__partition<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}, std::bidirectional_iterator_tag) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,435,395 ( 0.09%)  /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,423,128 ( 0.09%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,416,198 ( 0.09%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,374,579 ( 0.09%)  /usr/include/c++/14/bits/stl_construct.h:void std::_Construct<Move, Move>(Move*, Move&&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,362,934 ( 0.09%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,314,654 ( 0.08%)  /usr/include/c++/14/bits/stl_algo.h:void std::__sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,302,630 ( 0.08%)  Board.hpp:Board::getHMC() const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,246,476 ( 0.08%)  /usr/include/c++/14/array:std::array<unsigned int, 64ul>::operator[](unsigned long) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,192,057 ( 0.08%)  /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::move_backward<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,190,411 ( 0.08%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,162,791 ( 0.07%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,153,536 ( 0.07%)  /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::_Temporary_buffer(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,117,746 ( 0.07%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,105,472 ( 0.07%)  /usr/include/c++/14/bits/stl_tempbuf.h:std::pair<Move*, long> std::get_temporary_buffer<Move>(long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,095,566 ( 0.07%)  /usr/include/c++/14/bits/stl_algo.h:void std::__merge_adaptive<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, long, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,091,776 ( 0.07%)  Board.hpp:Board::setCaptured(int) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,077,230 ( 0.07%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> __gnu_cxx::__ops::__val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>(__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,058,684 ( 0.07%)  /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_a<true, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,037,631 ( 0.07%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>::operator()<Move, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,004,136 ( 0.06%)  /usr/include/c++/14/bits/new_allocator.h:std::__new_allocator<Move>::allocate(unsigned long, void const*) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
  1,002,300 ( 0.06%)  /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::~_Vector_base() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    980,620 ( 0.06%)  MoveGenerator.hpp:MoveGenerator::captures(Board const&, std::vector<Move, std::allocator<Move> >&) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    978,010 ( 0.06%)  Engine.cpp:Engine::promoThreat() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    972,936 ( 0.06%)  /usr/include/c++/14/bits/stl_algo.h:void std::__introsort_loop<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    961,488 ( 0.06%)  /usr/include/c++/14/bits/alloc_traits.h:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0]
    945,972 ( 0.06%)  Board.hpp:Board::resetHMC() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    923,742 ( 0.06%)  Board.hpp:Board::incrementHMC() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    886,638 ( 0.06%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>::_Val_comp_iter(__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>&&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    838,345 ( 0.05%)  /usr/include/c++/14/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    818,074 ( 0.05%)  /usr/include/c++/14/bits/stl_algobase.h:Move* std::move<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    817,088 ( 0.05%)  /usr/include/c++/14/bits/stl_pair.h:std::pair<Move*, long>::pair<Move*&, long&, true>(Move*&, long&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    808,617 ( 0.05%)  /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_deallocate(Move*, unsigned long) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    805,066 ( 0.05%)  /usr/include/c++/14/bits/stl_algo.h:void std::__move_merge_adaptive_backward<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    770,241 ( 0.05%)  /usr/include/c++/14/bits/stl_algo.h:void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    757,253 ( 0.05%)  /usr/include/c++/14/bits/new_allocator.h:unsigned long& std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&) [clone .isra.0]
    755,726 ( 0.05%)  /usr/include/c++/14/bits/stl_algo.h:void std::__move_merge_adaptive<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    740,730 ( 0.05%)  /usr/include/c++/14/bits/stl_algobase.h:short const& std::min<short>(short const&, short const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    685,520 ( 0.04%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    668,200 ( 0.04%)  /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_Vector_impl_data::_Vector_impl_data() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    658,480 ( 0.04%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::capacity() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    651,315 ( 0.04%)  Engine.cpp:Engine::fiftyMove() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    649,090 ( 0.04%)  /usr/include/c++/14/bits/move.h:unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    646,363 ( 0.04%)  ???:operator delete(void*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    646,338 ( 0.04%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::_Val_comp_iter(__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>&&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    646,299 ( 0.04%)  ???:operator delete(void*, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    645,548 ( 0.04%)  Move.cpp:operator==(Move const&, Move const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    634,952 ( 0.04%)  Move.hpp:Move::isDoublePush() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    633,856 ( 0.04%)  /usr/include/c++/14/bits/stl_iterator.h:Move const* std::__make_move_if_noexcept_iterator<Move, Move const*>(Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    623,238 ( 0.04%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::pop_back() [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    623,238 ( 0.04%)  Zobrist.hpp:Zobrist::getSTMKey() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    623,228 ( 0.04%)  /usr/include/c++/14/bits/alloc_traits.h:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) [clone .isra.0]
    588,180 ( 0.04%)  Board.hpp:Board::getLongCastle(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    588,180 ( 0.04%)  Board.hpp:Board::getShortCastle(int) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    551,208 ( 0.03%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>::operator()<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    525,633 ( 0.03%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
    516,750 ( 0.03%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> __gnu_cxx::__ops::__val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>(__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    507,432 ( 0.03%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x
    502,068 ( 0.03%)  /usr/include/c++/14/bits/new_allocator.h:std::__new_allocator<Move>::deallocate(Move*, unsigned long) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    500,191 ( 0.03%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    474,498 ( 0.03%)  /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__do_uninit_copy<Move const*, Move*>(Move const*, Move const*, Move*) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    472,972 ( 0.03%)  /usr/include/c++/14/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__miter_base<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    467,020 ( 0.03%)  MagicBitboards.cpp:MagicBitboards::initMagicBMoves(int, unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    465,225 ( 0.03%)  /usr/include/c++/14/bits/stl_algobase.h:int const& std::min<int>(int const&, int const&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    447,027 ( 0.03%)  /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    432,580 ( 0.03%)  /usr/include/c++/14/bits/stl_tempbuf.h:Move* std::__detail::__get_temporary_buffer<Move>(long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    423,950 ( 0.03%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> __gnu_cxx::__ops::__val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>(__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    421,740 ( 0.03%)  /usr/include/c++/14/bits/stl_algo.h:void std::__merge_sort_with_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    415,060 ( 0.03%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> __gnu_cxx::__ops::__iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    415,060 ( 0.03%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> __gnu_cxx::__ops::__iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>(Engine::quiescence(short, short)::{lambda(Move, Move)#2}) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    415,060 ( 0.03%)  /usr/include/c++/14/bits/stl_algo.h:void std::sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#1}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#1}) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    415,060 ( 0.03%)  /usr/include/c++/14/bits/stl_algo.h:void std::stable_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#2}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#2}) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    413,966 ( 0.03%)  utils.hpp:cpyWrapEast(unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    413,966 ( 0.03%)  utils.hpp:cpyWrapWest(unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    413,875 ( 0.03%)  /usr/include/c++/14/bits/stl_algo.h:void std::__stable_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    395,988 ( 0.03%)  /usr/include/c++/14/bits/stl_algo.h:void std::__chunk_insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [clone .constprop.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    384,512 ( 0.02%)  /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::_Impl::_Impl(long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    373,554 ( 0.02%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>::_Iter_comp_iter(Engine::quiescence(short, short)::{lambda(Move, Move)#1}) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    373,554 ( 0.02%)  /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::_Iter_comp_iter(Engine::quiescence(short, short)::{lambda(Move, Move)#2}) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    372,200 ( 0.02%)  /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::size() const [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    354,972 ( 0.02%)  utils.hpp:wrapEast(unsigned long&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    354,972 ( 0.02%)  utils.hpp:wrapWest(unsigned long&) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    350,016 ( 0.02%)  MoveGenerator.hpp:MoveGenerator::evasions(Board const&, std::vector<Move, std::allocator<Move> >&) const [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    336,448 ( 0.02%)  /usr/include/c++/14/bit:int std::__bit_width<unsigned long>(unsigned long) [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]
    334,712 ( 0.02%)  /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_allocate(unsigned long) [clone .isra.0] [/home/claudio/Documenti/Code/BagattoEngine/out/build/GCC-Debug/engine]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir                  

-- line 182 ----------------------------------------
         .                 { }
         .           
         .                 /**
         .                  *  This %iterator will move in the opposite direction that @p x does.
         .                 */
         .                 explicit _GLIBCXX17_CONSTEXPR
         .                 reverse_iterator(iterator_type __x)
         .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x)))
        30 ( 0.00%)        : current(__x)
        30 ( 0.00%)        { }
         .           
         .                 /**
         .                  *  The copy constructor is normal.
         .                 */
         .                 _GLIBCXX17_CONSTEXPR
         .                 reverse_iterator(const reverse_iterator& __x)
         .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))
        40 ( 0.00%)        : current(__x.current)
        20 ( 0.00%)        { }
         .           
         .           #if __cplusplus >= 201103L
         .                 reverse_iterator& operator=(const reverse_iterator&) = default;
         .           #endif
         .           
         .                 /**
         .                  *  A %reverse_iterator across other types can be copied if the
         .                  *  underlying %iterator can be converted to the type of @c current.
-- line 208 ----------------------------------------
-- line 233 ----------------------------------------
         .           	}
         .           #endif
         .           
         .                 /**
         .                  *  @return  @c current, the %iterator used for underlying work.
         .                 */
         .                 _GLIBCXX_NODISCARD
         .                 _GLIBCXX17_CONSTEXPR iterator_type
        50 ( 0.00%)        base() const
         .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(current)))
        50 ( 0.00%)        { return current; }
         .           
         .                 /**
         .                  *  @return  A reference to the value at @c --current
         .                  *
         .                  *  This requires that @c --current is dereferenceable.
         .                  *
         .                  *  @warning This implementation requires that for an iterator of the
         .                  *           underlying iterator type, @c x, a reference obtained by
         .                  *           @c *x remains valid after @c x has been modified or
         .                  *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
         .                 */
         .                 _GLIBCXX_NODISCARD
         .                 _GLIBCXX17_CONSTEXPR reference
        15 ( 0.00%)        operator*() const
         .                 {
        15 ( 0.00%)  	_Iterator __tmp = current;
        60 ( 0.00%)  	return *--__tmp;
        45 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator--() (15x)
        30 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (15x)
        15 ( 0.00%)        }
         .           
         .                 /**
         .                  *  @return  A pointer to the value at @c --current
         .                  *
         .                  *  This requires that @c --current is dereferenceable.
         .                 */
         .                 _GLIBCXX_NODISCARD
         .                 _GLIBCXX17_CONSTEXPR pointer
        20 ( 0.00%)        operator->() const
         .           #if __cplusplus > 201703L && __cpp_concepts >= 201907L
         .                 requires is_pointer_v<_Iterator>
         .           	|| requires(const _Iterator __i) { __i.operator->(); }
         .           #endif
         .                 {
         .           	// _GLIBCXX_RESOLVE_LIB_DEFECTS
         .           	// 1052. operator-> should also support smart pointers
        20 ( 0.00%)  	_Iterator __tmp = current;
        40 ( 0.00%)  	--__tmp;
        60 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator--() (20x)
        40 ( 0.00%)  	return _S_to_pointer(__tmp);
        60 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:Move const* std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::_S_to_pointer<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >) (20x)
        40 ( 0.00%)        }
         .           
         .                 /**
         .                  *  @return  @c *this
         .                  *
         .                  *  Decrements the underlying iterator.
         .                 */
         .                 _GLIBCXX17_CONSTEXPR reverse_iterator&
         .                 operator++()
-- line 289 ----------------------------------------
-- line 293 ----------------------------------------
         .                 }
         .           
         .                 /**
         .                  *  @return  The original value of @c *this
         .                  *
         .                  *  Decrements the underlying iterator.
         .                 */
         .                 _GLIBCXX17_CONSTEXPR reverse_iterator
       100 ( 0.00%)        operator++(int)
         .                 {
        20 ( 0.00%)  	reverse_iterator __tmp = *this;
        60 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::reverse_iterator(std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > > const&) (20x)
        40 ( 0.00%)  	--current;
        60 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator--() (20x)
         .           	return __tmp;
       100 ( 0.00%)        }
         .           
         .                 /**
         .                  *  @return  @c *this
         .                  *
         .                  *  Increments the underlying iterator.
         .                 */
         .                 _GLIBCXX17_CONSTEXPR reverse_iterator&
         .                 operator--()
-- line 314 ----------------------------------------
-- line 416 ----------------------------------------
         .                 template<typename _Tp>
         .           	static _GLIBCXX17_CONSTEXPR _Tp*
         .           	_S_to_pointer(_Tp* __p)
         .                   { return __p; }
         .           
         .                 template<typename _Tp>
         .           	static _GLIBCXX17_CONSTEXPR pointer
         .           	_S_to_pointer(_Tp __t)
        20 ( 0.00%)          { return __t.operator->(); }
        40 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator->() const [clone .isra.0] (20x)
         .               };
         .           
         .             ///@{
         .             /**
         .              *  @param  __x  A %reverse_iterator.
         .              *  @param  __y  A %reverse_iterator.
         .              *  @return  A simple bool.
         .              *
-- line 432 ----------------------------------------
-- line 433 ----------------------------------------
         .              *  Reverse iterators forward comparisons to their underlying base()
         .              *  iterators.
         .              *
         .             */
         .           #if __cplusplus <= 201703L || ! defined __glibcxx_concepts
         .             template<typename _Iterator>
         .               _GLIBCXX_NODISCARD
         .               inline _GLIBCXX17_CONSTEXPR bool
        75 ( 0.00%)      operator==(const reverse_iterator<_Iterator>& __x,
         .           	       const reverse_iterator<_Iterator>& __y)
       250 ( 0.00%)      { return __x.base() == __y.base(); }
       450 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move const*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > const&) (25x)
       100 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::base() const [clone .isra.0] (50x)
         .           
         .             template<typename _Iterator>
         .               _GLIBCXX_NODISCARD
         .               inline _GLIBCXX17_CONSTEXPR bool
         .               operator<(const reverse_iterator<_Iterator>& __x,
         .           	      const reverse_iterator<_Iterator>& __y)
         .               { return __y.base() < __x.base(); }
         .           
         .             template<typename _Iterator>
         .               _GLIBCXX_NODISCARD
         .               inline _GLIBCXX17_CONSTEXPR bool
        25 ( 0.00%)      operator!=(const reverse_iterator<_Iterator>& __x,
         .           	       const reverse_iterator<_Iterator>& __y)
       100 ( 0.00%)      { return !(__x == __y); }
       875 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool std::operator==<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > > const&) [clone .isra.0] (25x)
         .           
         .             template<typename _Iterator>
         .               _GLIBCXX_NODISCARD
         .               inline _GLIBCXX17_CONSTEXPR bool
         .               operator>(const reverse_iterator<_Iterator>& __x,
         .           	      const reverse_iterator<_Iterator>& __y)
         .               { return __y < __x; }
         .           
-- line 465 ----------------------------------------
-- line 1060 ----------------------------------------
         .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
         .           #endif
         .           
         .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
         .                 : _M_current(_Iterator()) { }
         .           
         .                 explicit _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
42,245,205 ( 2.68%)        : _M_current(__i) { }
         .           
         .                 // Allow iterator to const_iterator conversion
         .           #if __cplusplus >= 201103L
         .                 template<typename _Iter, typename = __convertible_from<_Iter>>
         .           	_GLIBCXX20_CONSTEXPR
         .           	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
         .           	noexcept
         .           #else
-- line 1076 ----------------------------------------
-- line 1082 ----------------------------------------
         .           	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
         .           		      _Container>::__type>& __i)
         .           #endif
         .                   : _M_current(__i.base()) { }
         .           
         .                 // Forward iterator requirements
         .                 _GLIBCXX20_CONSTEXPR
         .                 reference
10,128,679 ( 0.64%)        operator*() const _GLIBCXX_NOEXCEPT
10,128,679 ( 0.64%)        { return *_M_current; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 pointer
        20 ( 0.00%)        operator->() const _GLIBCXX_NOEXCEPT
        20 ( 0.00%)        { return _M_current; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator&
         .                 operator++() _GLIBCXX_NOEXCEPT
         .                 {
   812,164 ( 0.05%)  	++_M_current;
         .           	return *this;
   812,164 ( 0.05%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator
         .                 operator++(int) _GLIBCXX_NOEXCEPT
         .                 { return __normal_iterator(_M_current++); }
         .           
         .                 // Bidirectional iterator requirements
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator&
   759,154 ( 0.05%)        operator--() _GLIBCXX_NOEXCEPT
         .                 {
   759,154 ( 0.05%)  	--_M_current;
         .           	return *this;
   759,154 ( 0.05%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator
         .                 operator--(int) _GLIBCXX_NOEXCEPT
         .                 { return __normal_iterator(_M_current--); }
         .           
         .                 // Random access iterator requirements
         .                 _GLIBCXX20_CONSTEXPR
         .                 reference
         .                 operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
         .                 { return _M_current[__n]; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator&
         .                 operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
     1,320 ( 0.00%)        { _M_current += __n; return *this; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator
   345,141 ( 0.02%)        operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 2,761,128 ( 0.18%)        { return __normal_iterator(_M_current + __n); }
 1,035,423 ( 0.07%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::__normal_iterator(Move* const&) (345,141x)
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator&
         .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
         .                 { _M_current -= __n; return *this; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 __normal_iterator
 6,698,932 ( 0.42%)        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
60,290,388 ( 3.82%)        { return __normal_iterator(_M_current - __n); }
        27 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::__normal_iterator(Move* const&) (9x)
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 const _Iterator&
 4,155,012 ( 0.26%)        base() const _GLIBCXX_NOEXCEPT
 4,155,012 ( 0.26%)        { return _M_current; }
         .               };
         .           
         .             // Note: In what follows, the left- and right-hand-side iterators are
         .             // allowed to vary in types (conceptually in cv-qualification) so that
         .             // comparison between cv-qualified and non-cv-qualified iterators be
         .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
         .             // will make overload resolution ambiguous (when in scope) if we don't
         .             // provide overloads whose operands are of the same type.  Can someone
-- line 1162 ----------------------------------------
-- line 1208 ----------------------------------------
         .               operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
         .               { return __lhs.base() == __rhs.base(); }
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               inline bool
 1,383,276 ( 0.09%)      operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
         .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
 3,458,190 ( 0.22%)      { return __lhs.base() == __rhs.base(); }
       100 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::base() const (50x)
         .           
         .             template<typename _IteratorL, typename _IteratorR, typename _Container>
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               inline bool
         .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
         .               { return __lhs.base() != __rhs.base(); }
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               inline bool
 4,164,480 ( 0.26%)      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
         .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
10,411,200 ( 0.66%)      { return __lhs.base() != __rhs.base(); }
 4,163,836 ( 0.26%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::base() const (2,081,918x)
         .           
         .             // Random access iterator requirements
         .             template<typename _IteratorL, typename _IteratorR, typename _Container>
         .               _GLIBCXX_NODISCARD
         .               inline bool
         .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
         .               { return __lhs.base() < __rhs.base(); }
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               inline bool
        80 ( 0.00%)      operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
         .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
       200 ( 0.00%)      { return __lhs.base() < __rhs.base(); }
        80 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::base() const (40x)
         .           
         .             template<typename _IteratorL, typename _IteratorR, typename _Container>
         .               _GLIBCXX_NODISCARD
         .               inline bool
         .               operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
         .               { return __lhs.base() > __rhs.base(); }
-- line 1260 ----------------------------------------
-- line 1317 ----------------------------------------
         .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
         .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
         .           #endif
         .               { return __lhs.base() - __rhs.base(); }
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
 1,925,716 ( 0.12%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
         .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
         .               _GLIBCXX_NOEXCEPT
 5,295,719 ( 0.34%)      { return __lhs.base() - __rhs.base(); }
 1,925,676 ( 0.12%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::base() const (962,838x)
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .               inline __normal_iterator<_Iterator, _Container>
         .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
         .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
         .               _GLIBCXX_NOEXCEPT
         .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1336 ----------------------------------------
-- line 1340 ----------------------------------------
         .           
         .           namespace std _GLIBCXX_VISIBILITY(default)
         .           {
         .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
         .           
         .             template<typename _Iterator, typename _Container>
         .               _GLIBCXX20_CONSTEXPR
         .               _Iterator
   836,472 ( 0.05%)      __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
         .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 2,091,180 ( 0.13%)      { return __it.base(); }
    25,760 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::base() const (12,880x)
         .           
         .           #if __cplusplus >= 201103L
         .           
         .           #if __cplusplus <= 201703L
         .             // Need to overload __to_address because the pointer_traits primary template
         .             // will deduce element_type of __normal_iterator<T*, C> as T* rather than T.
         .             template<typename _Iterator, typename _Container>
         .               constexpr auto
-- line 1358 ----------------------------------------
-- line 1817 ----------------------------------------
         .               { return _ReturnType(__i); }
         .           
         .             // Overload for pointers that matches std::move_if_noexcept more closely,
         .             // returning a constant iterator when we don't want to move.
         .             template<typename _Tp, typename _ReturnType
         .               = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
         .           		      const _Tp*, move_iterator<_Tp*>>>
         .               inline _GLIBCXX17_CONSTEXPR _ReturnType
   316,930 ( 0.02%)      __make_move_if_noexcept_iterator(_Tp* __i)
   316,930 ( 0.02%)      { return _ReturnType(__i); }
         .           
         .           #if __cplusplus > 201703L && __glibcxx_concepts
         .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .             // 3736.  move_iterator missing disable_sized_sentinel_for specialization
         .             template<typename _Iterator1, typename _Iterator2>
         .               requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
         .               inline constexpr bool
         .               disable_sized_sentinel_for<move_iterator<_Iterator1>,
-- line 1834 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/new_allocator.h
--------------------------------------------------------------------------------
Ir                 

-- line 126 ----------------------------------------
        .                 allocate(size_type __n, const void* = static_cast<const void*>(0))
        .                 {
        .           #if __cplusplus >= 201103L
        .           	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           	// 3308. std::allocator<void>().allocate(n)
        .           	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        .           #endif
        .           
  502,104 ( 0.03%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
        .           	  {
        .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           	    // 3190. allocator::allocate sometimes returns too little storage
        .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        .           	      std::__throw_bad_array_new_length();
        .           	    std::__throw_bad_alloc();
        .           	  }
        .           
-- line 142 ----------------------------------------
-- line 143 ----------------------------------------
        .           #if __cpp_aligned_new && __cplusplus >= 201103L
        .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        .           	  {
        .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        .           	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        .           							   __al));
        .           	  }
        .           #endif
  502,104 ( 0.03%)  	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      530 ( 0.00%)  => ???:operator new(unsigned long) (3x)
        .                 }
        .           
        .                 // __p is not permitted to be a null pointer.
        .                 void
        .                 deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        .                 {
        .           #if __cpp_sized_deallocation
        .           # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
-- line 159 ----------------------------------------
-- line 164 ----------------------------------------
        .           #if __cpp_aligned_new && __cplusplus >= 201103L
        .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        .           	  {
        .           	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        .           				     std::align_val_t(alignof(_Tp)));
        .           	    return;
        .           	  }
        .           #endif
  502,108 ( 0.03%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      689 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      600 ( 0.00%)  => ???:operator delete(void*, unsigned long) (8x)
        .                 }
        .           
        .           #undef _GLIBCXX_SIZED_DEALLOC
        .           #undef _GLIBCXX_OPERATOR_DELETE
        .           #undef _GLIBCXX_OPERATOR_NEW
        .           
        .           #if __cplusplus <= 201703L
        .                 __attribute__((__always_inline__))
-- line 180 ----------------------------------------
-- line 183 ----------------------------------------
        .                 { return _M_max_size(); }
        .           
        .           #if __cplusplus >= 201103L
        .                 template<typename _Up, typename... _Args>
        .           	__attribute__((__always_inline__))
        .           	void
        .           	construct(_Up* __p, _Args&&... __args)
        .           	noexcept(__is_nothrow_new_constructible<_Up, _Args...>)
6,841,101 ( 0.43%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  623,228 ( 0.04%)  => /usr/include/c++/14/new:operator new(unsigned long, void*) [clone .isra.0] (311,614x)
  623,228 ( 0.04%)  => /usr/include/c++/14/bits/move.h:unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&) (311,614x)
        .           
        .                 template<typename _Up>
        .           	__attribute__((__always_inline__))
        .           	void
        .           	destroy(_Up* __p)
        .           	noexcept(std::is_nothrow_destructible<_Up>::value)
        .           	{ __p->~_Up(); }
        .           #else
-- line 199 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/cpp_type_traits.h
--------------------------------------------------------------------------------
Ir               

-- line 600 ----------------------------------------
      .                 typedef __false_type __type;
      .               };
      .           
      .             // Fallback implementation of the function in bits/stl_iterator.h used to
      .             // remove the move_iterator wrapper.
      .             template<typename _Iterator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _Iterator
265,124 ( 0.02%)      __miter_base(_Iterator __it)
265,124 ( 0.02%)      { return __it; }
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace
      .           } // extern "C++"
      .           
      .           #endif //_CPP_TYPE_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir                 

-- line 147 ----------------------------------------
        .              *  @return   Nothing.
        .              *
        .              *  This function swaps the values pointed to by two iterators, not the
        .              *  iterators themselves.
        .             */
        .             template<typename _ForwardIterator1, typename _ForwardIterator2>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
    4,353 ( 0.00%)      iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .           				  _ForwardIterator1>)
        .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .           				  _ForwardIterator2>)
        .           
        .           #if __cplusplus < 201103L
-- line 163 ----------------------------------------
-- line 177 ----------------------------------------
        .           	_ReferenceType2;
        .                 std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
        .           	&& __are_same<_ValueType1&, _ReferenceType1>::__value
        .           	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
        .           	iter_swap(__a, __b);
        .           #else
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 187. iter_swap underspecified
    8,706 ( 0.00%)        swap(*__a, *__b);
   81,256 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<Move> >, std::is_move_constructible<Move>, std::is_move_assignable<Move> >::value, void>::type std::swap<Move>(Move&, Move&) (1,451x)
    5,804 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (2,902x)
        .           #endif
    1,451 ( 0.00%)      }
        .           
        .             /**
        .              *  @brief Swap the elements of two sequences.
        .              *  @ingroup mutating_algorithms
        .              *  @param  __first1  A forward iterator.
        .              *  @param  __last1   A forward iterator.
        .              *  @param  __first2  A forward iterator.
        .              *  @return   An iterator equal to @p first2+(last1-first1).
-- line 195 ----------------------------------------
-- line 232 ----------------------------------------
        .               inline const _Tp&
        .               min(const _Tp& __a, const _Tp& __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .                 //return __b < __a ? __b : __a;
        .                 if (__b < __a)
        .           	return __b;
1,635,672 ( 0.10%)        return __a;
  408,918 ( 0.03%)      }
        .           
        .             /**
        .              *  @brief This does what you think it does.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __a  A thing of arbitrary type.
        .              *  @param  __b  Another thing of arbitrary type.
        .              *  @return   The greater of the parameters.
        .              *
-- line 249 ----------------------------------------
-- line 256 ----------------------------------------
        .               inline const _Tp&
        .               max(const _Tp& __a, const _Tp& __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .                 //return  __a < __b ? __b : __a;
        .                 if (__a < __b)
        .           	return __b;
    1,240 ( 0.00%)        return __a;
      310 ( 0.00%)      }
        .           
        .             /**
        .              *  @brief This does what you think it does.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __a  A thing of arbitrary type.
        .              *  @param  __b  Another thing of arbitrary type.
        .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
        .              *  @return   The lesser of the parameters.
-- line 273 ----------------------------------------
-- line 308 ----------------------------------------
        .                 return __a;
        .               }
        .           
        .             // Fallback implementation of the function in bits/stl_iterator.h used to
        .             // remove the __normal_iterator wrapper. See copy, fill, ...
        .             template<typename _Iterator>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Iterator
  148,353 ( 0.01%)      __niter_base(_Iterator __it)
        .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
  148,353 ( 0.01%)      { return __it; }
        .           
        .           #if __cplusplus < 201103L
        .             template<typename _Ite, typename _Seq>
        .               _Ite
        .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
        .           		 std::random_access_iterator_tag>&);
        .           
        .            template<typename _Ite, typename _Cont, typename _Seq>
-- line 326 ----------------------------------------
-- line 338 ----------------------------------------
        .           #endif
        .           
        .             // Reverse the __niter_base transformation to get a
        .             // __normal_iterator back again (this assumes that __normal_iterator
        .             // is only used to wrap random access iterators, like pointers).
        .             template<typename _From, typename _To>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _From
  422,175 ( 0.03%)      __niter_wrap(_From __from, _To __res)
1,013,220 ( 0.06%)      { return __from + (std::__niter_base(__res) - std::__niter_base(__from)); }
1,013,220 ( 0.06%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (84,435x)
  759,915 ( 0.05%)  => /usr/include/c++/14/bits/stl_iterator.h:Move* std::__niter_base<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (84,435x)
  168,870 ( 0.01%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__niter_base<Move*>(Move*) (84,435x)
        .           
        .             // No need to wrap, iterator already has the right type.
        .             template<typename _Iterator>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Iterator
   48,122 ( 0.00%)      __niter_wrap(const _Iterator&, _Iterator __res)
   48,122 ( 0.00%)      { return __res; }
        .           
        .             // All of these auxiliary structs serve two purposes.  (1) Replace
        .             // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
        .             // because the input and output ranges are permitted to overlap.)
        .             // (2) If we're using random access iterators, then write the loop as
        .             // a for loop with an explicit count.
        .           
        .             template<bool _IsMove, bool _IsSimple, typename _Category>
-- line 362 ----------------------------------------
-- line 390 ----------------------------------------
        .           #endif
        .           
        .             template<>
        .               struct __copy_move<false, false, random_access_iterator_tag>
        .               {
        .                 template<typename _II, typename _OI>
        .           	_GLIBCXX20_CONSTEXPR
        .           	static _OI
   51,560 ( 0.00%)  	__copy_m(_II __first, _II __last, _OI __result)
        .           	{
        .           	  typedef typename iterator_traits<_II>::difference_type _Distance;
  102,563 ( 0.01%)  	  for(_Distance __n = __last - __first; __n > 0; --__n)
        .           	    {
   56,334 ( 0.00%)  	      *__result = *__first;
   28,098 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (9,366x)
   28,098 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (9,366x)
    9,389 ( 0.00%)  	      ++__first;
    9,389 ( 0.00%)  	      ++__result;
        .           	    }
        .           	  return __result;
   58,005 ( 0.00%)  	}
        .           
        .                 template<typename _Tp, typename _Up>
        .           	static void
        .           	__assign_one(_Tp* __to, _Up* __from)
        .           	{ *__to = *__from; }
        .               };
        .           
        .           #if __cplusplus >= 201103L
        .             template<>
        .               struct __copy_move<true, false, random_access_iterator_tag>
        .               {
        .                 template<typename _II, typename _OI>
        .           	_GLIBCXX20_CONSTEXPR
        .           	static _OI
  395,976 ( 0.03%)  	__copy_m(_II __first, _II __last, _OI __result)
        .           	{
        .           	  typedef typename iterator_traits<_II>::difference_type _Distance;
  887,841 ( 0.06%)  	  for(_Distance __n = __last - __first; __n > 0; --__n)
        .           	    {
1,041,248 ( 0.07%)  	      *__result = std::move(*__first);
  390,468 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (130,156x)
  390,468 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (130,156x)
  260,312 ( 0.02%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (130,156x)
  130,156 ( 0.01%)  	      ++__first;
  130,156 ( 0.01%)  	      ++__result;
        .           	    }
        .           	  return __result;
  443,197 ( 0.03%)  	}
        .           
        .                 template<typename _Tp, typename _Up>
        .           	static void
        .           	__assign_one(_Tp* __to, _Up* __from)
        .           	{ *__to = std::move(*__from); }
        .               };
        .           #endif
        .           
-- line 441 ----------------------------------------
-- line 513 ----------------------------------------
        .               {
        .                 typedef typename iterator_traits<_II>::iterator_category _Category;
        .           #ifdef __cpp_lib_is_constant_evaluated
        .                 if (std::is_constant_evaluated())
        .           	return std::__copy_move<_IsMove, false, _Category>::
        .           	  __copy_m(__first, __last, __result);
        .           #endif
        .                 return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
   55,942 ( 0.00%)  			      _Category>::__copy_m(__first, __last, __result);
  343,056 ( 0.02%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<Move const*, Move*>(Move const*, Move const*, Move*) (6,440x)
        .               }
        .           
        .             template<bool _IsMove,
        .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
        .               _OI
        .               __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
        .           		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
        .           		   _OI);
-- line 529 ----------------------------------------
-- line 540 ----------------------------------------
        .                 __is_random_access_iter<_II>::__value,
        .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
        .               __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
        .           
        .             template<bool _IsMove, typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
        .               __copy_move_a1(_II __first, _II __last, _OI __result)
   55,942 ( 0.00%)      { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
4,119,319 ( 0.26%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_a2<true, Move*, Move*>(Move*, Move*, Move*) (49,497x)
        .           
        .             template<bool _IsMove, typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
  351,282 ( 0.02%)      __copy_move_a(_II __first, _II __last, _OI __result)
        .               {
  742,866 ( 0.05%)        return std::__niter_wrap(__result,
      528 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_a1<false, Move*, Move*>(Move*, Move*, Move*) (5x)
       30 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__niter_base<Move*>(Move*) (15x)
        .           		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
        .           					     std::__niter_base(__last),
        .           					     std::__niter_base(__result)));
  183,456 ( 0.01%)      }
        .           
        .             template<bool _IsMove,
        .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               _OI
        .               __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           		  _OI);
-- line 567 ----------------------------------------
-- line 634 ----------------------------------------
        .              *  [first,last); the copy_backward function should be used instead.
        .              *
        .              *  Note that the end of the output range is permitted to be contained
        .              *  within [first,last).
        .             */
        .             template<typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
   38,670 ( 0.00%)      copy(_II __first, _II __last, _OI __result)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
        .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
        .           	    typename iterator_traits<_II>::reference>)
        .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
        .           
        .                 return std::__copy_move_a<__is_move_iterator<_II>::__value>
   51,560 ( 0.00%)  	     (std::__miter_base(__first), std::__miter_base(__last), __result);
  967,736 ( 0.06%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (6,440x)
   25,760 ( 0.00%)  => /usr/include/c++/14/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > std::__miter_base<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >) (12,880x)
   19,335 ( 0.00%)      }
        .           
        .           #if __cplusplus >= 201103L
        .             /**
        .              *  @brief Moves the range [first,last) into result.
        .              *  @ingroup mutating_algorithms
        .              *  @param  __first  An input iterator.
        .              *  @param  __last   An input iterator.
        .              *  @param  __result An output iterator.
-- line 660 ----------------------------------------
-- line 667 ----------------------------------------
        .              *  [first,last); the move_backward function should be used instead.
        .              *
        .              *  Note that the end of the output range is permitted to be contained
        .              *  within [first,last).
        .             */
        .             template<typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
  296,982 ( 0.02%)      move(_II __first, _II __last, _OI __result)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
        .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
        .           	    typename iterator_traits<_II>::value_type&&>)
        .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
        .           
  395,976 ( 0.03%)        return std::__copy_move_a<true>(std::__miter_base(__first),
6,202,736 ( 0.39%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_a<true, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) (48,122x)
  192,488 ( 0.01%)  => /usr/include/c++/14/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__miter_base<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (96,244x)
        .           				      std::__miter_base(__last), __result);
  148,491 ( 0.01%)      }
        .           
        .           #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
        .           #else
        .           #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
        .           #endif
        .           
        .             template<bool _IsMove, bool _IsSimple, typename _Category>
        .               struct __copy_move_backward
-- line 693 ----------------------------------------
-- line 737 ----------------------------------------
        .           
        .           #if __cplusplus >= 201103L
        .             template<>
        .               struct __copy_move_backward<true, false, random_access_iterator_tag>
        .               {
        .                 template<typename _BI1, typename _BI2>
        .           	_GLIBCXX20_CONSTEXPR
        .           	static _BI2
  612,960 ( 0.04%)  	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        .           	{
        .           	  typename iterator_traits<_BI1>::difference_type
  383,100 ( 0.02%)  	    __n = __last - __first;
1,386,858 ( 0.09%)  	  for (; __n > 0; --__n)
1,953,990 ( 0.12%)  	    *--__result = std::move(*--__last);
  586,197 ( 0.04%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (195,399x)
  586,197 ( 0.04%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (195,399x)
  390,798 ( 0.02%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (195,399x)
        .           	  return __result;
  689,580 ( 0.04%)  	}
        .               };
        .           #endif
        .           
        .             template<bool _IsMove>
        .               struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
        .               {
        .                 template<typename _Tp, typename _Up>
        .           	_GLIBCXX20_CONSTEXPR
-- line 760 ----------------------------------------
-- line 779 ----------------------------------------
        .                 typedef typename iterator_traits<_BI1>::iterator_category _Category;
        .           #ifdef __cpp_lib_is_constant_evaluated
        .                 if (std::is_constant_evaluated())
        .           	return std::__copy_move_backward<_IsMove, false, _Category>::
        .           	  __copy_move_b(__first, __last, __result);
        .           #endif
        .                 return std::__copy_move_backward<_IsMove,
        .           				       __memcpyable<_BI2, _BI1>::__value,
   76,620 ( 0.00%)  				       _Category>::__copy_move_b(__first,
6,589,680 ( 0.42%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_backward<true, false, std::random_access_iterator_tag>::__copy_move_b<Move*, Move*>(Move*, Move*, Move*) (76,620x)
        .           								 __last,
        .           								 __result);
        .               }
        .           
        .             template<bool _IsMove, typename _BI1, typename _BI2>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _BI2
        .               __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
   76,620 ( 0.00%)      { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
6,666,300 ( 0.42%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_backward_a2<true, Move*, Move*>(Move*, Move*, Move*) (76,620x)
        .           
        .             template<bool _IsMove,
        .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
        .               _OI
        .               __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
        .           			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
        .           			    _OI);
        .           
-- line 804 ----------------------------------------
-- line 815 ----------------------------------------
        .                 __is_random_access_iter<_II>::__value,
        .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
        .               __copy_move_backward_a1(_II, _II,
        .           			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
        .           
        .             template<bool _IsMove, typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
  612,960 ( 0.04%)      __copy_move_backward_a(_II __first, _II __last, _OI __result)
        .               {
1,149,300 ( 0.07%)        return std::__niter_wrap(__result,
6,336,217 ( 0.40%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::__copy_move_backward_a1<true, Move*, Move*>(Move*, Move*, Move*) (70,121x)
2,804,840 ( 0.18%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) (70,121x)
1,893,267 ( 0.12%)  => /usr/include/c++/14/bits/stl_iterator.h:Move* std::__niter_base<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (210,363x)
        .           		std::__copy_move_backward_a1<_IsMove>
        .           		  (std::__niter_base(__first), std::__niter_base(__last),
        .           		   std::__niter_base(__result)));
  383,100 ( 0.02%)      }
        .           
        .             template<bool _IsMove,
        .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               _OI
        .               __copy_move_backward_a(
        .           		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
-- line 837 ----------------------------------------
-- line 905 ----------------------------------------
        .              *  optimizations such as unrolling).
        .              *
        .              *  Result may not be in the range (first,last].  Use move instead.  Note
        .              *  that the start of the output range may overlap [first,last).
        .             */
        .             template<typename _BI1, typename _BI2>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _BI2
  459,720 ( 0.03%)      move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
        .                 __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
        .                 __glibcxx_function_requires(_OutputIteratorConcept<_BI2,
        .           	    typename iterator_traits<_BI1>::value_type&&>)
        .                 __glibcxx_requires_can_decrement_range(__first, __last, __result);
        .           
  612,960 ( 0.04%)        return std::__copy_move_backward_a<true>(std::__miter_base(__first),
  933,122 ( 0.06%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__copy_move_backward_a<true, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (6,499x)
   25,996 ( 0.00%)  => /usr/include/c++/14/bits/cpp_type_traits.h:Move* std::__miter_base<Move*>(Move*) (12,998x)
        .           					       std::__miter_base(__last),
        .           					       __result);
  229,860 ( 0.01%)      }
        .           
        .           #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
        .           #else
        .           #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
        .           #endif
        .           
        .             template<typename _ForwardIterator, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
-- line 933 ----------------------------------------
-- line 943 ----------------------------------------
        .             template<typename _ForwardIterator, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline typename
        .               __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
        .               __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
        .           	      const _Tp& __value)
        .               {
        .                 const _Tp __tmp = __value;
      253 ( 0.00%)        for (; __first != __last; ++__first)
      147 ( 0.00%)  	*__first = __tmp;
        5 ( 0.00%)      }
        .           
        .             // Specialization: for char types we can use memset.
        .             template<typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline typename
        .               __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
        .               __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
        .               {
-- line 961 ----------------------------------------
-- line 990 ----------------------------------------
        .             void
        .             __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,
        .           	    const bool&);
        .           
        .             template<typename _FIte, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
        .               __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
        5 ( 0.00%)      { std::__fill_a1(__first, __last, __value); }
       17 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<unsigned long>::__value, void>::__type std::__fill_a1<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&) [clone .isra.0] (1x)
        .           
        .             template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           	     const _Tp&);
        .           
-- line 1006 ----------------------------------------
-- line 1021 ----------------------------------------
        .               inline void
        .               fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .           				  _ForwardIterator>)
        .                 __glibcxx_requires_valid_range(__first, __last);
        .           
        4 ( 0.00%)        std::__fill_a(__first, __last, __value);
       56 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::__fill_a<unsigned long*, unsigned long long>(unsigned long*, unsigned long*, unsigned long long const&) [clone .isra.0] (2x)
        .               }
        .           
        .           #pragma GCC diagnostic push
        .           #pragma GCC diagnostic ignored "-Wlong-long"
        .             // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
        .             inline _GLIBCXX_CONSTEXPR int
        .             __size_to_integer(int __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned
        .             __size_to_integer(unsigned __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR long
        .             __size_to_integer(long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned long
        2 ( 0.00%)    __size_to_integer(unsigned long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR long long
        .             __size_to_integer(long long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned long long
        .             __size_to_integer(unsigned long long __n) { return __n; }
        .           
        .           #if defined(__GLIBCXX_TYPE_INT_N_0)
        .             __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
        .             __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
-- line 1050 ----------------------------------------
-- line 1141 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OutputIterator
        .               __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        .           	       std::random_access_iterator_tag)
        .               {
        .           #if __cplusplus >= 201103L
        .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
        .           #endif
        2 ( 0.00%)        if (__n <= 0)
        .           	return __first;
        .           
        .                 __glibcxx_requires_can_increment(__first, __n);
        .           
        3 ( 0.00%)        std::__fill_a(__first, __first + __n, __value);
       18 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::__fill_a<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&) [clone .isra.0] (1x)
        1 ( 0.00%)        return __first + __n;
        2 ( 0.00%)      }
        .           
        .             /**
        .              *  @brief Fills the range [first,first+n) with copies of value.
        .              *  @ingroup mutating_algorithms
        .              *  @param  __first  An output iterator.
        .              *  @param  __n      The count of copies to perform.
        .              *  @param  __value  A reference-to-const of arbitrary type.
        .              *  @return   The iterator at first+n.
-- line 1164 ----------------------------------------
-- line 1170 ----------------------------------------
        .              *  If @p __n is negative, the function does nothing.
        .             */
        .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .             // DR 865. More algorithms that throw away information
        .             // DR 426. search_n(), fill_n(), and generate_n() with negative n
        .             template<typename _OI, typename _Size, typename _Tp>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
        6 ( 0.00%)      fill_n(_OI __first, _Size __n, const _Tp& __value)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI, const _Tp&>)
        .           
        5 ( 0.00%)        return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
       26 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:unsigned long* std::__fill_n_a<unsigned long*, unsigned long, unsigned long>(unsigned long*, unsigned long, unsigned long const&, std::random_access_iterator_tag) [clone .isra.0] (1x)
        2 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:std::__size_to_integer(unsigned long) (1x)
        .           			       std::__iterator_category(__first));
        3 ( 0.00%)      }
        .           
        .             template<bool _BoolType>
        .               struct __equal
        .               {
        .                 template<typename _II1, typename _II2>
        .           	_GLIBCXX20_CONSTEXPR
        .           	static bool
        .           	equal(_II1 __first1, _II1 __last1, _II2 __first2)
-- line 1193 ----------------------------------------
-- line 1539 ----------------------------------------
        .                 return std::__lower_bound(__first, __last, __val,
        .           				__gnu_cxx::__ops::__iter_less_val());
        .               }
        .           
        .             /// This is a helper function for the sort routines and for random.tcc.
        .             //  Precondition: __n > 0.
        .             template<typename _Tp>
        .               inline _GLIBCXX_CONSTEXPR _Tp
   48,064 ( 0.00%)      __lg(_Tp __n)
        .               {
        .           #if __cplusplus >= 201402L
  144,192 ( 0.01%)        return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
  624,832 ( 0.04%)  => /usr/include/c++/14/bit:int std::__bit_width<unsigned long>(unsigned long) (48,064x)
        .           #else
        .           #pragma GCC diagnostic push
        .           #pragma GCC diagnostic ignored "-Wlong-long"
        .                 // Use +__n so it promotes to at least int.
        .                 return (sizeof(+__n) * __CHAR_BIT__ - 1)
        .           	       - (sizeof(+__n) == sizeof(long long)
        .           		    ? __builtin_clzll(+__n)
        .           		    : (sizeof(+__n) == sizeof(long)
        .           			 ? __builtin_clzl(+__n)
        .           			 : __builtin_clz(+__n)));
        .           #pragma GCC diagnostic pop
        .           #endif
   96,128 ( 0.01%)      }
        .           
        .           _GLIBCXX_BEGIN_NAMESPACE_ALGO
        .           
        .             /**
        .              *  @brief Tests a range for element-wise equality.
        .              *  @ingroup non_mutating_algorithms
        .              *  @param  __first1  An input iterator.
        .              *  @param  __last1   An input iterator.
-- line 1571 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: TT.cpp
--------------------------------------------------------------------------------
Ir                  

         .           #include "TT.hpp"
         .           #include <cassert>
         .           #include <cstdint>
         .           #include <tuple>
         .           
         6 ( 0.00%)  TT::TT(int tMBSize)
         .           {
         5 ( 0.00%)      mSize = tMBSize * 1024 * 1024 / sizeof(TTEntry);
   327,695 ( 0.02%)      mTable = new TTEntry[mSize];
   393,216 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.hpp:TTEntry::TTEntry() (65,536x)
       970 ( 0.00%)  => ???:operator new[](unsigned long) (1x)
       693 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
         6 ( 0.00%)  }
         .           
         .           TT::~TT()
         .           {
         5 ( 0.00%)      delete[] mTable;
        73 ( 0.00%)  => ???:operator delete[](void*) (1x)
         .           }
         .           
         .           void TT::resize(int tMBSize)
         6 ( 0.00%)  {
         4 ( 0.00%)      mSize = tMBSize * 1024 * 1024 / sizeof(TTEntry);
         9 ( 0.00%)      delete[] mTable;
       714 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
        77 ( 0.00%)  => ???:operator delete[](void*) (1x)
41,943,056 ( 2.66%)      mTable = new TTEntry[mSize];
50,331,648 ( 3.19%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.hpp:TTEntry::TTEntry() (8,388,608x)
       330 ( 0.00%)  => ???:operator new[](unsigned long) (1x)
         6 ( 0.00%)  }
         .           
         .           void TT::insert(TTEntry tEntry){
    26,643 ( 0.00%)      size_t index = tEntry.key % mSize;
    35,524 ( 0.00%)      mTable[index] = tEntry;
   239,787 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.hpp:TTEntry::operator=(TTEntry const&) [clone .isra.0] (8,881x)
         .           }
         .           
    37,980 ( 0.00%)  std::tuple<bool, TTEntry> TT::probe(uint64_t tKey){
    28,485 ( 0.00%)      size_t index = tKey % mSize;
    18,990 ( 0.00%)      TTEntry& entry = mTable[index];
         .           
    37,980 ( 0.00%)      return {entry.key == tKey, entry};
   788,085 ( 0.05%)  => /usr/include/c++/14/tuple:std::tuple<bool, TTEntry>::tuple<bool, TTEntry&, true>(bool&&, TTEntry&) (9,495x)
    37,980 ( 0.00%)  }
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_tempbuf.h
--------------------------------------------------------------------------------
Ir               

-- line 75 ----------------------------------------
      .           #endif
      .           
      .             namespace __detail
      .             {
      .               // Equivalent to std::get_temporary_buffer but won't return a smaller size.
      .               // It either returns a buffer of __len elements, or a null pointer.
      .               template<typename _Tp>
      .                 inline _Tp*
 48,064 ( 0.00%)        __get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOTHROW
      .                 {
 96,128 ( 0.01%)  	if (__builtin_expect(size_t(__len) > (size_t(-1) / sizeof(_Tp)), 0))
      .           	  return 0;
      .           
      .           #if __cpp_aligned_new && __cplusplus >= 201103L
      .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
      .           	  return (_Tp*) _GLIBCXX_OPERATOR_NEW(__len * sizeof(_Tp),
      .           					      align_val_t(alignof(_Tp)),
      .           					      nothrow_t());
      .           #endif
192,260 ( 0.01%)  	return (_Tp*) _GLIBCXX_OPERATOR_NEW(__len * sizeof(_Tp), nothrow_t());
2,767,348 ( 0.18%)  => ???:operator new(unsigned long, std::nothrow_t const&) (48,064x)
    798 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
 96,128 ( 0.01%)        }
      .           
      .               // Equivalent to std::return_temporary_buffer but with a size argument.
      .               // The size is the number of elements, not the number of bytes.
      .               template<typename _Tp>
      .                 inline void
      .                 __return_temporary_buffer(_Tp* __p,
      .           				size_t __len __attribute__((__unused__)))
      .                 {
-- line 103 ----------------------------------------
-- line 110 ----------------------------------------
      .           #if __cpp_aligned_new && __cplusplus >= 201103L
      .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
      .           	  {
      .           	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(_Tp, __p, __len),
      .           				     align_val_t(alignof(_Tp)));
      .           	    return;
      .           	  }
      .           #endif
144,192 ( 0.01%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(_Tp, __p, __len));
3,773,352 ( 0.24%)  => ???:operator delete(void*, unsigned long) (48,064x)
      .                 }
      .           #undef _GLIBCXX_SIZED_DEALLOC
      .             }
      .           
      .             /**
      .              *  @brief Allocates a temporary buffer.
      .              *  @param  __len  The number of objects of type Tp.
      .              *  @return See full description.
-- line 126 ----------------------------------------
-- line 135 ----------------------------------------
      .              *  may be less than that requested if the memory is unavailable;
      .              *  you should compare len with the .second return value.
      .              *
      .              * Provides the nothrow exception guarantee.
      .              */
      .             template<typename _Tp>
      .               _GLIBCXX17_DEPRECATED
      .               pair<_Tp*, ptrdiff_t>
144,192 ( 0.01%)      get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOEXCEPT
      .               {
      .                 const ptrdiff_t __max =
      .           	__gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
144,192 ( 0.01%)        if (__len > __max)
      .           	__len = __max;
      .           
 96,128 ( 0.01%)        while (__len > 0)
      .           	{
240,320 ( 0.02%)  	  if (_Tp* __tmp = __detail::__get_temporary_buffer<_Tp>(__len))
3,200,726 ( 0.20%)  => /usr/include/c++/14/bits/stl_tempbuf.h:Move* std::__detail::__get_temporary_buffer<Move>(long) (48,064x)
288,384 ( 0.02%)  	    return pair<_Tp*, ptrdiff_t>(__tmp, __len);
1,009,344 ( 0.06%)  => /usr/include/c++/14/bits/stl_pair.h:std::pair<Move*, long>::pair<Move*&, long&, true>(Move*&, long&) (48,064x)
      .           	  __len = __len == 1 ? 0 : ((__len + 1) / 2);
      .           	}
      .                 return pair<_Tp*, ptrdiff_t>();
192,256 ( 0.01%)      }
      .           
      .             /**
      .              *  @brief The companion to get_temporary_buffer().
      .              *  @param  __p  A buffer previously allocated by get_temporary_buffer.
      .              *  @return   None.
      .              *
      .              *  Frees the memory pointed to by __p.
      .              */
-- line 165 ----------------------------------------
-- line 198 ----------------------------------------
      .           
      .               protected:
      .                 size_type  _M_original_len;
      .                 struct _Impl
      .                 {
      .           #pragma GCC diagnostic push
      .           #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      .           	explicit
144,192 ( 0.01%)  	_Impl(ptrdiff_t __original_len)
      .           	{
      .           	  pair<pointer, size_type> __p(
 48,064 ( 0.00%)  	    std::get_temporary_buffer<value_type>(__original_len));
5,315,542 ( 0.34%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::pair<Move*, long> std::get_temporary_buffer<Move>(long) (48,064x)
 48,064 ( 0.00%)  	  _M_len = __p.second;
 48,064 ( 0.00%)  	  _M_buffer = __p.first;
 96,128 ( 0.01%)  	}
      .           #pragma GCC diagnostic pop
      .           
      .           	~_Impl()
144,192 ( 0.01%)  	{ std::__detail::__return_temporary_buffer(_M_buffer, _M_len); }
3,917,544 ( 0.25%)  => /usr/include/c++/14/bits/stl_tempbuf.h:void std::__detail::__return_temporary_buffer<Move>(Move*, unsigned long) (48,064x)
      .           
      .           	size_type  _M_len;
      .           	pointer    _M_buffer;
      .                 } _M_impl;
      .           
      .               public:
      .                 /// As per Table mumble.
      .                 size_type
 48,064 ( 0.00%)        size() const
 48,064 ( 0.00%)        { return _M_impl._M_len; }
      .           
      .                 /// Returns the size requested by the constructor; may be >size().
      .                 size_type
 48,064 ( 0.00%)        requested_size() const
 48,064 ( 0.00%)        { return _M_original_len; }
      .           
      .                 /// As per Table mumble.
      .                 iterator
 96,128 ( 0.01%)        begin()
 96,128 ( 0.01%)        { return _M_impl._M_buffer; }
      .           
      .                 /// As per Table mumble.
      .                 iterator
      .                 end()
 96,128 ( 0.01%)        { return _M_impl._M_buffer + _M_impl._M_len; }
      .           
      .                 /**
      .                  * Constructs a temporary buffer of a size somewhere between
      .                  * zero and the given length.
      .                  */
      .                 _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);
      .           
      .                 ~_Temporary_buffer()
 96,128 ( 0.01%)        { std::_Destroy(_M_impl._M_buffer, _M_impl._M_buffer + _M_impl._M_len); }
4,061,736 ( 0.26%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::_Impl::~_Impl() (48,064x)
      .           
      .               private:
      .                 // Disable copy constructor and assignment operator.
      .                 _Temporary_buffer(const _Temporary_buffer&);
      .           
      .                 void
      .                 operator=(const _Temporary_buffer&);
      .               };
      .           
      .           
      .             template<bool>
      .               struct __uninitialized_construct_buf_dispatch
      .               {
      .                 template<typename _Pointer, typename _ForwardIterator>
      .                   static void
336,448 ( 0.02%)          __ucr(_Pointer __first, _Pointer __last,
      .           	      _ForwardIterator __seed)
      .                   {
192,256 ( 0.01%)  	  if (__builtin_expect(__first == __last, 0))
      .           	    return;
      .           
      .           	  _Pointer __cur = __first;
      .           	  __try
      .           	    {
240,320 ( 0.02%)  	      std::_Construct(std::__addressof(*__first),
769,024 ( 0.05%)  => /usr/include/c++/14/bits/stl_construct.h:void std::_Construct<Move, Move>(Move*, Move&&) (48,064x)
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/move.h:Move* std::__addressof<Move>(Move&) (48,064x)
240,320 ( 0.02%)  			      _GLIBCXX_MOVE(*__seed));
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (48,064x)
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (48,064x)
      .           	      _Pointer __prev = __cur;
 48,064 ( 0.00%)  	      ++__cur;
452,331 ( 0.03%)  	      for(; __cur != __last; ++__cur, ++__prev)
523,335 ( 0.03%)  		std::_Construct(std::__addressof(*__cur),
1,674,672 ( 0.11%)  => /usr/include/c++/14/bits/stl_construct.h:void std::_Construct<Move, Move>(Move*, Move&&) (104,667x)
209,334 ( 0.01%)  => /usr/include/c++/14/bits/move.h:Move* std::__addressof<Move>(Move&) (104,667x)
418,668 ( 0.03%)  				_GLIBCXX_MOVE(*__prev));
209,334 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (104,667x)
432,576 ( 0.03%)  	      *__seed = _GLIBCXX_MOVE(*__prev);
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (48,064x)
144,192 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (48,064x)
144,192 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (48,064x)
      .           	    }
      .           	  __catch(...)
      .           	    {
      .           	      std::_Destroy(__first, __cur);
      .           	      __throw_exception_again;
      .           	    }
336,448 ( 0.02%)  	}
      .               };
      .           
      .             template<>
      .               struct __uninitialized_construct_buf_dispatch<true>
      .               {
      .                 template<typename _Pointer, typename _ForwardIterator>
      .                   static void
      .                   __ucr(_Pointer, _Pointer, _ForwardIterator) { }
-- line 297 ----------------------------------------
-- line 310 ----------------------------------------
      .             // _Tp is move constructible and constructible from std::move(*__seed).
      .             template<typename _Tp, typename _ForwardIterator>
      .               inline void
      .               __uninitialized_construct_buf(_Tp* __first, _Tp* __last,
      .           				  _ForwardIterator __seed)
      .               {
      .                 std::__uninitialized_construct_buf_dispatch<
      .           	__has_trivial_constructor(_Tp)>::
 48,064 ( 0.00%)  	  __ucr(__first, __last, __seed);
6,756,026 ( 0.43%)  => /usr/include/c++/14/bits/stl_tempbuf.h:void std::__uninitialized_construct_buf_dispatch<false>::__ucr<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (48,064x)
      .               }
      .           
      .             template<typename _ForwardIterator, typename _Tp>
288,384 ( 0.02%)      _Temporary_buffer<_ForwardIterator, _Tp>::
      .               _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)
240,320 ( 0.02%)      : _M_original_len(__original_len), _M_impl(__original_len)
5,700,054 ( 0.36%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::_Impl::_Impl(long) (48,064x)
      .               {
432,576 ( 0.03%)        std::__uninitialized_construct_buf(begin(), end(), __seed);
6,804,090 ( 0.43%)  => /usr/include/c++/14/bits/stl_tempbuf.h:void std::__uninitialized_construct_buf<Move, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (48,064x)
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::begin() [clone .isra.0] (48,064x)
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::end() [clone .isra.0] (48,064x)
192,256 ( 0.01%)      }
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace
      .           
      .           #endif /* _STL_TEMPBUF_H */

--------------------------------------------------------------------------------
-- Auto-annotated source: Move.hpp
--------------------------------------------------------------------------------
Ir                  

-- line 2 ----------------------------------------
         .           
         .           #include <iostream>
         .           #include <cstdint>
         .           
         .           #include "notation.hpp"
         .           
         .           class Move{
         .           public:
25,424,703 ( 1.61%)      Move(): mMove{0U}{}
         .               Move(const Move &);
         .               Move(int tFrom, int tTo, int tFlag);
         .           
         .               void operator= (Move otherObj);
         .               friend bool operator== (const Move& thisObj, const Move& otherObj);
         .               friend bool operator!= (const Move& thisObj, const Move& otherObj);
         .               friend std::ostream& operator<< (std::ostream& os, const Move& cm);
         .           
         .               std::string asString() const;
         .           
 7,963,605 ( 0.51%)      inline int to()  const {return mMove & 0x3f;}
10,912,004 ( 0.69%)      inline int from() const {return (mMove >> 6) & 0x3f;}
14,897,049 ( 0.95%)      inline int flag()       const {return (mMove >> 12) & 0x0f;}
         .               inline int asInt()      const {return mMove;}
    28,224 ( 0.00%)      inline int promoPiece() const {return (flag() & 0x03) + knight;}
    21,168 ( 0.00%)  => Move.hpp:Move::flag() const [clone .isra.0] (7,056x)
         .           
         .               inline bool isInit()       const {return asInt();}
 3,771,072 ( 0.24%)      inline bool isCapture()    const {return (flag() & 0x04) != 0;}
 2,828,304 ( 0.18%)  => Move.hpp:Move::flag() const [clone .isra.0] (942,768x)
   634,952 ( 0.04%)      inline bool isDoublePush() const {return flag() == doublePush;}
   476,214 ( 0.03%)  => Move.hpp:Move::flag() const [clone .isra.0] (158,738x)
 4,990,344 ( 0.32%)      inline bool isPromo()      const {return (flag() & 0x08) != 0;}
 3,742,758 ( 0.24%)  => Move.hpp:Move::flag() const [clone .isra.0] (1,247,586x)
 6,238,364 ( 0.40%)      inline bool isEnPassant()  const {return flag() == enPassant;}
 4,678,773 ( 0.30%)  => Move.hpp:Move::flag() const [clone .isra.0] (1,559,591x)
 4,873,030 ( 0.31%)      inline bool isCastle()     const {return (flag() == kingCastle) || (flag() == queenCastle);}
 2,923,818 ( 0.19%)  => Move.hpp:Move::flag() const [clone .isra.0] (974,606x)
         .           
         .           private:
         .               uint16_t mMove;
         .           };
--------------------------------------------------------------------------------
-- Auto-annotated source: Zobrist.hpp
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .               // Deleted methods for singleton pattern
         .               Zobrist(const Zobrist&)             =delete;
         .               Zobrist& operator=(const Zobrist&)  =delete;
         .           
         .               static const Zobrist& getInstance();
         .           
         .               static constexpr int PIECE_OFFSET[7] = {0, 0, 64, 128, 192, 256, 320};
         .               static constexpr int SIDE_OFFSET[2] = { 0, 384 };
 1,604,224 ( 0.10%)      inline uint64_t getPieceKey(int tSTM, int tPiece, int tSquare) const {
14,438,016 ( 0.92%)          return mPieceKeys[SIDE_OFFSET[tSTM] + PIECE_OFFSET[tPiece] + tSquare];
 3,208,448 ( 0.20%)  => /usr/include/c++/14/array:std::array<unsigned long, 768ul>::operator[](unsigned long) const (1,604,224x)
 3,208,448 ( 0.20%)      }
         .               
 8,725,346 ( 0.55%)      inline uint64_t getCastleKey(int tCastleFlag) const {return mCastleKeys[tCastleFlag];}
 2,492,956 ( 0.16%)  => /usr/include/c++/14/array:std::array<unsigned long, 16ul>::operator[](unsigned long) const (1,246,478x)
   100,338 ( 0.01%)      inline uint64_t getEPKey(int tEPFile) const {return mEPKeys[tEPFile];}
    28,668 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) const (14,334x)
   623,238 ( 0.04%)      inline uint64_t getSTMKey() const {return mSTMKey;}
         .           
         .           private:
         .           
         .               Zobrist();
         .               ~Zobrist() {delete mInstance; mInstance = nullptr;}
         .           
         .               void initPieces();
         .               void initCastle();
-- line 32 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: TT.hpp
--------------------------------------------------------------------------------
Ir                  

         .           #pragma once
         .           
         .           #include "Move.hpp"
         .           #include <cstdint>
         .           #include <tuple>
         .           
   267,722 ( 0.02%)  struct TTEntry{
    26,643 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (8,881x)
    26,643 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (8,881x)
         .               uint64_t key;
         .               int16_t score;
         .               uint8_t depht = 0;
         .               uint8_t nodeType;
         .               Move hashMove;
         .           
25,362,432 ( 1.61%)      TTEntry() = default;
25,362,432 ( 1.61%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::Move() (8,454,144x)
    17,762 ( 0.00%)      TTEntry(uint64_t tKey, int16_t tScore, uint8_t tDepth, uint8_t tNodeType, Move tMove) :
    53,286 ( 0.00%)          key{tKey}, score(tScore), depht(tDepth), nodeType(tNodeType), hashMove(tMove){}
    26,643 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (8,881x)
         .           };
         .           
         .           class TT {
         .           public:
         .               // Constructor
         .               explicit TT(int sizeMB);
         .               ~TT();
         .               
-- line 24 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: evaluation.hpp
--------------------------------------------------------------------------------
Ir                  

         .           #pragma once
         .           #include <cstdint>
         .           #include "Board.hpp"
         .           
28,951,215 ( 1.84%)  inline void mirror(int &square) {square = 56 - (8*(square/8)) + square%8;};
         .           int16_t evaluate(const Board &bitBoards);
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/array
--------------------------------------------------------------------------------
Ir                  

-- line 92 ----------------------------------------
         .              *  <a href="tables.html#67">sequence</a>.
         .              *
         .              *  Sets support random access iterators.
         .              *
         .              *  @tparam  Tp  Type of element. Required to be a complete type.
         .              *  @tparam  Nm  Number of elements.
         .             */
         .             template<typename _Tp, std::size_t _Nm>
        30 ( 0.00%)      struct array
        30 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::Move() (10x)
         .               {
         .                 typedef _Tp 	    			      value_type;
         .                 typedef value_type*			      pointer;
         .                 typedef const value_type*                       const_pointer;
         .                 typedef value_type&                   	      reference;
         .                 typedef const value_type&             	      const_reference;
         .                 typedef value_type*          		      iterator;
         .                 typedef const value_type*			      const_iterator;
-- line 108 ----------------------------------------
-- line 124 ----------------------------------------
         .                 _GLIBCXX20_CONSTEXPR void
         .                 swap(array& __other)
         .                 noexcept(__array_traits<_Tp, _Nm>::_Is_nothrow_swappable::value)
         .                 { std::swap_ranges(begin(), end(), __other.begin()); }
         .           
         .                 // Iterators.
         .                 [[__gnu__::__const__, __nodiscard__]]
         .                 _GLIBCXX17_CONSTEXPR iterator
         7 ( 0.00%)        begin() noexcept
         7 ( 0.00%)        { return iterator(data()); }
         .           
         .                 [[__nodiscard__]]
         .                 _GLIBCXX17_CONSTEXPR const_iterator
         .                 begin() const noexcept
         .                 { return const_iterator(data()); }
         .           
         .                 [[__gnu__::__const__, __nodiscard__]]
         .                 _GLIBCXX17_CONSTEXPR iterator
         .                 end() noexcept
        14 ( 0.00%)        { return iterator(data() + _Nm); }
         .           
         .                 [[__nodiscard__]]
         .                 _GLIBCXX17_CONSTEXPR const_iterator
         .                 end() const noexcept
         .                 { return const_iterator(data() + _Nm); }
         .           
         .                 [[__gnu__::__const__, __nodiscard__]]
         .                 _GLIBCXX17_CONSTEXPR reverse_iterator
-- line 151 ----------------------------------------
-- line 201 ----------------------------------------
         .                 empty() const noexcept { return size() == 0; }
         .           
         .                 // Element access.
         .                 [[__nodiscard__]]
         .                 _GLIBCXX17_CONSTEXPR reference
         .                 operator[](size_type __n) noexcept
         .                 {
         .           	__glibcxx_requires_subscript(__n);
 3,360,651 ( 0.21%)  	return _M_elems[__n];
 3,360,651 ( 0.21%)        }
         .           
         .                 [[__nodiscard__]]
         .                 constexpr const_reference
         .                 operator[](size_type __n) const noexcept
         .                 {
         .           #if __cplusplus >= 201402L
         .           	__glibcxx_requires_subscript(__n);
         .           #endif
23,569,455 ( 1.50%)  	return _M_elems[__n];
23,569,391 ( 1.50%)        }
         .           
         .                 _GLIBCXX17_CONSTEXPR reference
         .                 at(size_type __n)
         .                 {
         .           	if (__n >= _Nm)
         .           	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
         .           					    ">= _Nm (which is %zu)"),
         .           					__n, _Nm);
-- line 228 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_construct.h
--------------------------------------------------------------------------------
Ir                 

-- line 101 ----------------------------------------
        .             /**
        .              * Constructs an object in existing memory by invoking an allocated
        .              * object's constructor with an initializer.
        .              */
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename... _Args>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
  165,396 ( 0.01%)      _Construct(_Tp* __p, _Args&&... __args)
        .               {
        .           #if __cpp_constexpr_dynamic_alloc // >= C++20
        .                 if (std::__is_constant_evaluated())
        .           	{
        .           	  // Allow std::_Construct to be used in constant expressions.
        .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
        .           	  return;
        .           	}
        .           #endif
1,110,307 ( 0.07%)        ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
        2 ( 0.00%)  => /usr/include/c++/14/new:operator new(unsigned long, void*) [clone .isra.0] (1x)
  165,397 ( 0.01%)      }
        .           #else
        .             template<typename _T1, typename _T2>
        .               inline void
        .               _Construct(_T1* __p, const _T2& __value)
        .               {
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 402. wrong new expression in [some_]allocator::construct
        .                 ::new(static_cast<void*>(__p)) _T1(__value);
-- line 128 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: utils.hpp
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           
        .           /**
        .            * @brief Returns index of the least significant active (1) bit
        .            * 
        .            * @param bitBoard Board rapresentation as unsigned long long
        .            * @return int Index of the LSB
        .            */
        .           inline int bitScanForward(uint64_t bitBoard){
9,463,458 ( 0.60%)      assert (bitBoard != 0);
        .           #if defined (_MSC_VER) 
        .               unsigned long index;
        .               _BitScanForward64(&index, bitBoard);
        .               return static_cast<int>(index);
        .           #elif  defined (__GNUC__) || defined (__clang__)
9,463,458 ( 0.60%)      return __builtin_ctzll(bitBoard);
        .           #else
        .               //Reference table for bitscans
        .               static constexpr std::array<int,64> index64 = {
        .                    0, 47,  1, 56, 48, 27,  2, 60,
        .                   57, 49, 41, 37, 28, 16,  3, 61,
        .                   54, 58, 35, 52, 50, 42, 21, 44,
        .                   38, 32, 29, 23, 17, 11,  4, 62,
        .                   46, 55, 26, 59, 40, 36, 15, 53,
        .                   34, 51, 20, 43, 31, 22, 10, 45,
        .                   25, 39, 14, 33, 19, 30,  9, 24,
        .                   13, 18,  8, 12,  7,  6,  5, 63
        .               };
        .               static constexpr uint64_t deBrujin64 = uint64_t(0x03f79d71b4cb0a89);
        .               return index64[((bitBoard ^ (bitBoard-1)) * deBrujin64) >> 58];
        .           #endif
4,731,729 ( 0.30%)  }
        .           
        .           /**
        .            * @brief Returns index of the most significant active (1) bit
        .            * 
        .            * @param bitBoard Board rapresentation as unsigned long long
        .            * @return int Index of the MSB
        .            */
        .           inline int bitScanReverse(uint64_t bitBoard){
-- line 50 ----------------------------------------
-- line 104 ----------------------------------------
        .           }
        .           
        .           // Bit TWiddling functions
        .           constexpr void wrapNort (uint64_t &bitBoard) {bitBoard <<= 8;}
        .           constexpr void wrapSout (uint64_t &bitBoard) {bitBoard >>= 8;}
        .           constexpr void wrapEast (uint64_t &bitBoard) {
        .               constexpr uint64_t mask = uint64_t(0x7f7f7f7f7f7f7f7f); 
        .               bitBoard &= mask; 
  295,810 ( 0.02%)      bitBoard <<= 1;
   59,162 ( 0.00%)  }
        .           constexpr void wrapWest (uint64_t &bitBoard) {
        .               constexpr uint64_t mask = uint64_t(0xfefefefefefefefe);
        .               bitBoard &= mask;
  295,810 ( 0.02%)      bitBoard >>= 1;
   59,162 ( 0.00%)  }
        .           constexpr uint64_t cpyWrapNort (uint64_t bitBoard) {wrapNort(bitBoard); return bitBoard;}
        .           constexpr uint64_t cpyWrapSout (uint64_t bitBoard) {wrapSout(bitBoard); return bitBoard;}
  413,966 ( 0.03%)  constexpr uint64_t cpyWrapEast (uint64_t bitBoard) {wrapEast(bitBoard); return bitBoard;}
  354,828 ( 0.02%)  => utils.hpp:wrapEast(unsigned long&) (59,138x)
  413,966 ( 0.03%)  constexpr uint64_t cpyWrapWest (uint64_t bitBoard) {wrapWest(bitBoard); return bitBoard;}
  354,828 ( 0.02%)  => utils.hpp:wrapWest(unsigned long&) (59,138x)
        .           
        .           // Time variables
        .           using TimePoint = std::chrono::milliseconds::rep;  // A value in milliseconds
        .           static_assert(sizeof(TimePoint) == sizeof(int64_t), "TimePoint should be 64 bits");
        1 ( 0.00%)  inline TimePoint now() {
        2 ( 0.00%)      return std::chrono::duration_cast<std::chrono::milliseconds>(
       21 ( 0.00%)  => /usr/include/c++/14/bits/chrono.h:std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0] (1x)
        9 ( 0.00%)               std::chrono::steady_clock::now().time_since_epoch())
      861 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      791 ( 0.00%)  => ???:std::chrono::_V2::steady_clock::now() (1x)
        2 ( 0.00%)  => /usr/include/c++/14/bits/chrono.h:std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0] (1x)
        1 ( 0.00%)        .count();
        2 ( 0.00%)  => /usr/include/c++/14/bits/chrono.h:std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [clone .isra.0] (1x)
        1 ( 0.00%)  }
        .           
        .           // Search data
       12 ( 0.00%)  struct SearchLimits
        .           {
        .               bool infinite = false;
        .               uint64_t nodes = 0ULL;
        .               int depth = 0, movestogo = 0;
        .               TimePoint movetime = 0, timestart = 0;
        .               TimePoint time[2], inc[2];
        .           };
        .           
-- line 142 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Engine.cpp
--------------------------------------------------------------------------------
Ir                 

-- line 9 ----------------------------------------
        .           #include <algorithm>
        .           #include <cassert>
        .           #include <chrono>
        .           #include <cstdint>
        .           #include <stdexcept>
        .           #include <vector>
        .           
        .           void Engine::resizeTT(int tMBSize)
        6 ( 0.00%)  {
        1 ( 0.00%)      stopSearch();
       33 ( 0.00%)  => Engine.cpp:Engine::stopSearch() (1x)
        4 ( 0.00%)      const std::lock_guard guard(mEngineMutex);
      927 ( 0.00%)  => /usr/include/c++/14/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
        3 ( 0.00%)      mTT.resize(tMBSize);
92,275,850 ( 5.85%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.cpp:TT::resize(int) (1x)
        7 ( 0.00%)  }
      931 ( 0.00%)  => /usr/include/c++/14/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
        .           
        .           void Engine::setPos(std::string tPosition)
        7 ( 0.00%)  {
        1 ( 0.00%)      stopSearch();
       33 ( 0.00%)  => Engine.cpp:Engine::stopSearch() (1x)
        4 ( 0.00%)      const std::lock_guard guard(mEngineMutex);
       44 ( 0.00%)  => /usr/include/c++/14/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
       17 ( 0.00%)      mBoard = Board(tPosition);
   10,904 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.cpp:Board::Board(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (1x)
    2,273 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.cpp:Board::operator=(Board const&) (1x)
      131 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (1x)
       86 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::~Board() (1x)
       76 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
        6 ( 0.00%)      mGameHist.emplace_back(mBoard.getHash());
      323 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:unsigned long& std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&) [clone .isra.0] (1x)
        2 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getHash() const [clone .isra.0] (1x)
        8 ( 0.00%)  }
       29 ( 0.00%)  => /usr/include/c++/14/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
        .           
        .           void Engine::makeMove(std::string tMove)
        .           {
        .               stopSearch();
        .               const std::lock_guard guard(mEngineMutex);
        .               std::vector<Move> moveList;
        .               moveList.reserve(256);
        .               mGenerator.all(mBoard, moveList);
-- line 37 ----------------------------------------
-- line 39 ----------------------------------------
        .                   mBoard.makeMove(move);
        .                   mGameHist.emplace_back(mBoard.getHash());
        .                   return;
        .               }
        .               throw std::invalid_argument("invalid move");
        .           }
        .           
        .           void Engine::goSearch(SearchLimits tLimits)
        4 ( 0.00%)  {
        1 ( 0.00%)      stopSearch();
       33 ( 0.00%)  => Engine.cpp:Engine::stopSearch() (1x)
        3 ( 0.00%)      mGoSearch = true;
        4 ( 0.00%)  => /usr/include/c++/14/atomic:std::atomic<bool>::operator=(bool) [clone .isra.0] (1x)
       10 ( 0.00%)      mLimits = tLimits;
        5 ( 0.00%)      int depth = tLimits.infinite ? 99 : tLimits.depth;
       15 ( 0.00%)      mThread = std::thread(&Engine::mainSearch, this, depth);
    3,938 ( 0.00%)  => /usr/include/c++/14/bits/std_thread.h:std::thread::thread<void (Engine::*)(int), Engine*, int&, void>(void (Engine::*&&)(int), Engine*&&, int&) (1x)
       58 ( 0.00%)  => /usr/include/c++/14/bits/std_thread.h:std::thread::operator=(std::thread&&) [clone .isra.0] (1x)
       23 ( 0.00%)  => /usr/include/c++/14/bits/std_thread.h:std::thread::~thread() (1x)
        4 ( 0.00%)  }
        .           
        .           void Engine::stopSearch()
       10 ( 0.00%)  {
       15 ( 0.00%)      mGoSearch = false;
       20 ( 0.00%)  => /usr/include/c++/14/atomic:std::atomic<bool>::operator=(bool) [clone .isra.0] (5x)
       32 ( 0.00%)      if (mThread.joinable()) mThread.join();
      917 ( 0.00%)  => ???:std::thread::join() (1x)
      768 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
       85 ( 0.00%)  => /usr/include/c++/14/bits/std_thread.h:std::thread::joinable() const (5x)
        9 ( 0.00%)  }
        .           
        .           void Engine::mainSearch(int tMaxDepth)
       10 ( 0.00%)  {
        5 ( 0.00%)      const std::lock_guard guard(mEngineMutex);
       43 ( 0.00%)  => /usr/include/c++/14/bits/std_mutex.h:std::lock_guard<std::mutex>::lock_guard(std::mutex&) (1x)
        .           
        .               static constexpr int16_t windowSize = 50;
        4 ( 0.00%)      int16_t eval = 0, alpha = CHECKMATE, beta = -CHECKMATE;
        4 ( 0.00%)      std::vector<Move> PV;
        7 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::vector() (1x)
        4 ( 0.00%)      Move bestmove;
        3 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::Move() (1x)
        .           
        3 ( 0.00%)      mKillers.resize(tMaxDepth);
    1,859 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::resize(unsigned long) (1x)
        3 ( 0.00%)      mGameHist.resize(tMaxDepth);
      606 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::resize(unsigned long) (1x)
        .           
       52 ( 0.00%)      for(int depth = 0; depth <= tMaxDepth && !exitSearch(); depth ++){
      138 ( 0.00%)  => Engine.cpp:Engine::exitSearch() (6x)
       12 ( 0.00%)          int lowFails = 0, highFails = 0;
        .           
        .                   do {
        .                       // exponentially widening the aspiration window for each failed search
       12 ( 0.00%)              if (eval <= alpha) alpha -= windowSize * (1 << ++lowFails);
       12 ( 0.00%)              if (eval >= beta ) beta  += windowSize * (1 << ++highFails);
        .           
        6 ( 0.00%)              mSearchedNodes = 0;
       22 ( 0.00%)              auto start = std::chrono::high_resolution_clock::now();
      883 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      120 ( 0.00%)  => ???:std::chrono::_V2::system_clock::now() (6x)
       42 ( 0.00%)              eval = alphaBeta(depth, alpha, beta, PV);
1,463,337,358 (92.83%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&) (6x)
       18 ( 0.00%)              auto stop  = std::chrono::high_resolution_clock::now(); 
      120 ( 0.00%)  => ???:std::chrono::_V2::system_clock::now() (6x)
       60 ( 0.00%)              auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count();
      204 ( 0.00%)  => /usr/include/c++/14/bits/chrono.h:std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0] (6x)
      126 ( 0.00%)  => /usr/include/c++/14/bits/chrono.h:std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0] (6x)
       12 ( 0.00%)  => /usr/include/c++/14/bits/chrono.h:std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const [clone .isra.0] (6x)
        .           
       54 ( 0.00%)              if (!exitSearch()) printSearchInfo(depth, elapsed, eval, PV);
   62,583 ( 0.00%)  => Engine.cpp:Engine::printSearchInfo(int, long, short, std::vector<Move, std::allocator<Move> >&) (6x)
      138 ( 0.00%)  => Engine.cpp:Engine::exitSearch() (6x)
       24 ( 0.00%)          } while ((eval <= alpha || eval >= beta) && !exitSearch()); 
        .           
        .           
        6 ( 0.00%)          alpha = eval - windowSize;
        6 ( 0.00%)          beta  = eval + windowSize;
        .           
       90 ( 0.00%)          if(PV.size() && !exitSearch()) bestmove = PV.back();
      115 ( 0.00%)  => Engine.cpp:Engine::exitSearch() (5x)
      165 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::back() (5x)
       24 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] (6x)
       15 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (5x)
       15 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (5x)
        .               }
        .               
        3 ( 0.00%)      mGoSearch = false;
        4 ( 0.00%)  => /usr/include/c++/14/atomic:std::atomic<bool>::operator=(bool) [clone .isra.0] (1x)
       11 ( 0.00%)      std::cout << "bestmove " << bestmove << std::endl;
      492 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:operator<<(std::ostream&, Move const&) (1x)
      476 ( 0.00%)  => ???:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1x)
      293 ( 0.00%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (1x)
       12 ( 0.00%)  }
       92 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::~vector() (1x)
       32 ( 0.00%)  => /usr/include/c++/14/bits/std_mutex.h:std::lock_guard<std::mutex>::~lock_guard() (1x)
        .           
        .           
        .           void Engine::printSearchInfo(int tDepth, int64_t tElapsed, int16_t tEval, std::vector<Move> &tPV)
       72 ( 0.00%)  {
       18 ( 0.00%)      double elapsedSec = tElapsed / 1000.0;
       84 ( 0.00%)      uint64_t nps = (elapsedSec > 0) ? static_cast<uint64_t>(mSearchedNodes / elapsedSec) : 0;
        .               
      214 ( 0.00%)      std::cout << "info depth " << tDepth << " nodes " << mSearchedNodes << " time " << tElapsed << " nps " << nps;
   10,685 ( 0.00%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (24x)
    6,989 ( 0.00%)  => ???:std::ostream::operator<<(unsigned long) (12x)
    3,205 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (4x)
    4,179 ( 0.00%)  => ???:std::ostream::operator<<(int) (6x)
    2,521 ( 0.00%)  => ???:std::ostream::operator<<(long) (6x)
        .           
        .               // if(eval <= CHECKMATE) std::cout << " mate " << (t_maxDepth - (CHECKMATE - eval)) / 2 + 1 << " ";
        .               // else if( eval  >= -CHECKMATE) std::cout << " mate -" << (t_maxDepth - (CHECKMATE + eval)) / 2 + 1 << " ";
        .               // else
       52 ( 0.00%)      std::cout << " score cp " << tEval;
    1,788 ( 0.00%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (6x)
      699 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    2,364 ( 0.00%)  => ???:std::ostream::operator<<(short) (6x)
        .               
       30 ( 0.00%)      if (tPV.size()){
       24 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] (6x)
       20 ( 0.00%)          std::cout << " pv ";
    1,350 ( 0.00%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (5x)
      725 ( 0.00%)          for (auto move = tPV.crbegin(); move != tPV.crend(); move ++) if(move->asString() != "a1a1") std::cout << *move << " ";
    3,840 ( 0.00%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (15x)
    8,789 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:operator<<(std::ostream&, Move const&) (15x)
    5,617 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::asString[abi:cxx11]() const (20x)
    1,545 ( 0.00%)  => /usr/include/c++/14/bits/basic_string.h:bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (20x)
    1,000 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool std::operator!=<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > > const&) [clone .isra.0] (25x)
      550 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::crend() const (25x)
      380 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::operator++(int) [clone .isra.0] (20x)
      280 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::operator->() const [clone .isra.0] (20x)
      180 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::operator*() const [clone .isra.0] (15x)
      120 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (20x)
      110 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::crbegin() const (5x)
        .               }
        .           
       28 ( 0.00%)      std::cout << std::endl;
      793 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    4,290 ( 0.00%)  => ???:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (6x)
       42 ( 0.00%)  }
        .           
        .           
1,116,540 ( 0.07%)  int16_t Engine::alphaBeta(int tDepth, int16_t tAlpha, int16_t tBeta, std::vector<Move> &tPV){ 
1,023,495 ( 0.06%)      if (exitSearch() || threefoldRepetition() || fiftyMove()) return DRAW;
      462 ( 0.00%)  => Engine.cpp:Engine::threefoldRepetition() (6x)
      282 ( 0.00%)  => Engine.cpp:Engine::fiftyMove() (6x)
      138 ( 0.00%)  => Engine.cpp:Engine::exitSearch() (6x)
  780,435 ( 0.05%)      if (tDepth == 0) return quiescence(tAlpha, tBeta);  
15,273,116 ( 0.97%)  => Engine.cpp:Engine::quiescence(short, short) (1x)
        .           
        .               // Hash move search    
   56,970 ( 0.00%)      uint64_t hashKey = mBoard.getHash();
       10 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getHash() const [clone .isra.0] (5x)
  113,940 ( 0.01%)      auto [ttHit, ttEntry] = mTT.probe(hashKey);
      500 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.cpp:TT::probe(unsigned long) (5x)
       60 ( 0.00%)  => /usr/include/c++/14/tuple:std::tuple_element<0ul, std::tuple<bool, TTEntry> >::type&& std::get<0ul, bool, TTEntry>(std::tuple<bool, TTEntry>&&) (5x)
       55 ( 0.00%)  => /usr/include/c++/14/tuple:std::tuple_element<1ul, std::tuple<bool, TTEntry> >::type&& std::get<1ul, bool, TTEntry>(std::tuple<bool, TTEntry>&&) (5x)
   69,600 ( 0.00%)      if( ttHit && hashUsageCondition(ttEntry, tDepth, tAlpha, tBeta)){
       30 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.hpp:TTEntry::TTEntry(TTEntry const&) (3x)
       15 ( 0.00%)  => Engine.cpp:Engine::hashUsageCondition(TTEntry, int, int, int) (3x)
    1,836 ( 0.00%)          tPV.emplace_back(ttEntry.hashMove); 
  134,677 ( 0.01%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move&>(Move&) [clone .isra.0] (612x)
    1,224 ( 0.00%)          return ttEntry.score;
        .               }
        .           
   35,532 ( 0.00%)      Move bestMove;
       15 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::Move() (5x)
   35,532 ( 0.00%)      int16_t bestScore = CHECKMATE - tDepth; 
    8,883 ( 0.00%)      uint8_t bestNodeType = allNode;
   44,415 ( 0.00%)      std::vector<Move> line(tDepth);
    1,108 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::vector(unsigned long, std::allocator<Move> const&) (5x)
        .           
    8,883 ( 0.00%)      mSearchedNodes +=1;
        .           
        .               // Lambda function for searching individual moves
  649,080 ( 0.04%)      auto searchMove = [&] (Move move) {
  324,540 ( 0.02%)          mBoard.makeMove(move);
  200,275 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.cpp:Board::makeMove(Move const&) (253x)
  865,440 ( 0.05%)          mGameHist.emplace_back(mBoard.getHash());
    9,194 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:unsigned long& std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&) [clone .isra.0] (253x)
      506 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getHash() const [clone .isra.0] (253x)
  432,720 ( 0.03%)          if(!isIllegal()){
  119,669 ( 0.01%)  => Engine.cpp:Engine::isIllegal() (253x)
        .                       int16_t score = CHECKMATE;
        .                       // zero-window search if alpha has already been raised
  279,093 ( 0.02%)              if (bestNodeType == pvNode)
  200,297 ( 0.01%)                  score = -alphaBeta(tDepth - 1, -tAlpha - 1, -tAlpha, line);
820,480,581 (52.05%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)'2 (248x)
        .                       // full window search if alpha hasn't been searched or move could raise alpha
  191,577 ( 0.01%)              if (bestNodeType != pvNode || (score > tAlpha && score < tBeta))
1,011,384 ( 0.06%)                  score = -alphaBeta(tDepth - 1, -tBeta, -tAlpha, line);
626,941,561 (39.77%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)'2 (6x)
        .           
  279,093 ( 0.02%)              if (score > bestScore) {
   11,560 ( 0.00%)                  bestScore = score;
   69,360 ( 0.00%)                  bestMove = move;
       18 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (6x)
       18 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (6x)
   57,800 ( 0.00%)                  if (bestScore > tAlpha) {
   12,908 ( 0.00%)                      bestNodeType = pvNode;
   25,816 ( 0.00%)                      tAlpha = bestScore;
   19,362 ( 0.00%)                      tPV = line;
    1,736 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<Move, std::allocator<Move> >::operator=(std::vector<Move, std::allocator<Move> > const&) [clone .isra.0] (6x)
   25,816 ( 0.00%)                      tPV.emplace_back(move);
    1,984 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move&>(Move&) [clone .isra.0] (6x)
        .                           }
        .                       }
        .                   }
  432,720 ( 0.03%)          mBoard.undoMove(move);
  147,015 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.cpp:Board::undoMove(Move const&) (253x)
  324,540 ( 0.02%)          mGameHist.pop_back();
      506 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::pop_back() (253x)
  565,965 ( 0.04%)      };
        .           
        .               // Lambda function for checking if the node fails high and populating TT accordingly
  973,620 ( 0.06%)      auto failsHigh = [&] (Move move, int TTDepth){
  540,900 ( 0.03%)          if (tAlpha >= tBeta){
   57,789 ( 0.00%)              if (!exitSearch() && tDepth >= TTDepth) 
  147,683 ( 0.01%)  => Engine.cpp:Engine::exitSearch() (6,421x)
  147,637 ( 0.01%)                  mTT.insert({hashKey, bestScore, uint8_t(tDepth), cutNode, bestMove});
  218,246 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.cpp:TT::insert(TTEntry) (6,419x)
   70,609 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.hpp:TTEntry::TTEntry(unsigned long, short, unsigned char, unsigned char, Move) (6,419x)
   19,257 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (6,419x)
   26,374 ( 0.00%)              if (!move.isCapture() && mKillers[tDepth-1][0] != move){
   44,947 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCapture() const [clone .isra.0] (6,421x)
       92 ( 0.00%)  => /usr/include/c++/14/array:std::array<Move, 2ul>::operator[](unsigned long) (46x)
       92 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::operator[](unsigned long) [clone .isra.0] (46x)
      184 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:operator!=(Move const&, Move const&) (46x)
      972 ( 0.00%)                  mKillers[tDepth-1][1] = mKillers[tDepth-1][0];
      108 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (36x)
      144 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::operator[](unsigned long) [clone .isra.0] (72x)
      144 ( 0.00%)  => /usr/include/c++/14/array:std::array<Move, 2ul>::operator[](unsigned long) (72x)
      108 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (36x)
      612 ( 0.00%)                  mKillers[tDepth-1][0] = move;
      108 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (36x)
       72 ( 0.00%)  => /usr/include/c++/14/array:std::array<Move, 2ul>::operator[](unsigned long) (36x)
       72 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::operator[](unsigned long) [clone .isra.0] (36x)
      108 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (36x)
        .                       }
    6,421 ( 0.00%)              return true;
        .                   }
        .                   return false;
  960,691 ( 0.06%)      };
        .           
   37,214 ( 0.00%)      if (ttHit && mGenerator.validate(mBoard, ttEntry.hashMove)){
        9 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (3x)
      590 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.cpp:MoveGenerator::validate(Board const&, Move) const (3x)
   10,388 ( 0.00%)          searchMove(ttEntry.hashMove);
579,534,334 (36.76%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#1}::operator()(Move) const (3x)
        9 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (3x)
   14,840 ( 0.00%)          if (failsHigh(ttEntry.hashMove, ttEntry.depht))
       66 ( 0.00%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, int)#1}::operator()(Move, int) const (3x)
        9 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (3x)
    2,716 ( 0.00%)              return bestScore;
        .               }
        .           
        .               // Generating, sorting and searching captures
   30,100 ( 0.00%)      std::vector<Move> captures;
       35 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::vector() (5x)
   22,575 ( 0.00%)      captures.reserve(256);
      845 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<Move, std::allocator<Move> >::reserve(unsigned long) (5x)
   30,100 ( 0.00%)      mGenerator.captures(mBoard, captures);
   22,160 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.hpp:MoveGenerator::captures(Board const&, std::vector<Move, std::allocator<Move> >&) const (5x)
        .           
1,071,321 ( 0.07%)      std::sort(captures.begin(), captures.end(),[&](const Move m1, const Move m2){
   18,655 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}) (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5x)
2,174,458 ( 0.14%)          return mBoard.searchPiece(m1.from()) < mBoard.searchPiece(m2.from());
3,010,788 ( 0.19%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (334,532x)
1,338,128 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (334,532x)
  669,064 ( 0.04%)      });
  959,943 ( 0.06%)      std::stable_sort(captures.begin(), captures.end(),[&](const Move m1, const Move m2){
   23,046 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::stable_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}) (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5x)
1,933,139 ( 0.12%)          return mBoard.searchPiece(m1.to()) > mBoard.searchPiece(m2.to());
2,676,654 ( 0.17%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (297,406x)
  892,218 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (297,406x)
  594,812 ( 0.04%)      });
        .               
  400,142 ( 0.03%)      for(Move move : captures){
      990 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (55x)
      150 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (50x)
      100 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (50x)
      100 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (50x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5x)
  183,722 ( 0.01%)          searchMove(move);
269,911,160 (17.12%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#1}::operator()(Move) const (50x)
      150 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (50x)
  262,460 ( 0.02%)          if(failsHigh(move, ttEntry.depht))
    1,100 ( 0.00%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, int)#1}::operator()(Move, int) const (50x)
      150 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (50x)
   10,060 ( 0.00%)              return bestScore;
        .               }
        .           
        .               // Generating, sorting and searching quiets
    7,485 ( 0.00%)      std::vector<Move> quiets;
       35 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::vector() (5x)
    7,485 ( 0.00%)      quiets.reserve(256);
      845 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<Move, std::allocator<Move> >::reserve(unsigned long) (5x)
    9,980 ( 0.00%)      mGenerator.quiets(mBoard, quiets);
   31,855 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.hpp:MoveGenerator::quiets(Board const&, std::vector<Move, std::allocator<Move> >&) const (5x)
        .           
  439,080 ( 0.03%)      std::partition(quiets.begin(), quiets.end(), [&](const Move m){
   19,230 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::partition<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}) (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5x)
2,260,689 ( 0.14%)          return m == mKillers[tDepth-1][0] || m == mKillers[tDepth-1][1];
  645,548 ( 0.04%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:operator==(Move const&, Move const&) (161,387x)
  322,774 ( 0.02%)  => /usr/include/c++/14/array:std::array<Move, 2ul>::operator[](unsigned long) (161,387x)
  322,774 ( 0.02%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::operator[](unsigned long) [clone .isra.0] (161,387x)
  245,258 ( 0.02%)      });
        .           
1,000,099 ( 0.06%)      for (Move move : quiets){
    3,690 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (205x)
      600 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (200x)
      400 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (200x)
      400 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (200x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5x)
       50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5x)
  563,150 ( 0.04%)          searchMove(move);
598,472,880 (37.97%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#1}::operator()(Move) const (200x)
      600 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (200x)
  884,950 ( 0.06%)          if(failsHigh(move, ttEntry.depht))
    4,400 ( 0.00%)  => Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, int)#1}::operator()(Move, int) const (200x)
      600 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (200x)
        .                       return bestScore;
        .               }
        .           
   19,696 ( 0.00%)      if(!exitSearch() && tDepth >= ttEntry.depht){
      115 ( 0.00%)  => Engine.cpp:Engine::exitSearch() (5x)
   12,310 ( 0.00%)          if (bestScore == CHECKMATE - tDepth && !isCheck()) bestScore = DRAW;
   41,854 ( 0.00%)          mTT.insert({hashKey, bestScore, uint8_t(tDepth), bestNodeType, bestMove});
       15 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (5x)
      170 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.cpp:TT::insert(TTEntry) (5x)
       55 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/TT.hpp:TTEntry::TTEntry(unsigned long, short, unsigned char, unsigned char, Move) (5x)
        .               }
        .               
    2,495 ( 0.00%)      return bestScore;
  884,094 ( 0.06%)  }
    2,798 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::~vector() (15x)
        .           
        .           int16_t Engine::quiescence(int16_t tAlpha, int16_t tBeta)
1,629,606 ( 0.10%)  {    
  148,146 ( 0.01%)      mSearchedNodes += 1;
        .           
        .               static constexpr int16_t pieceVal[7] = {0, 0, 100, 300, 300, 500, 1000}; 
  592,584 ( 0.04%)      int16_t standPat = evaluate(mBoard);
169,925,210 (10.78%)  => /home/claudio/Documenti/Code/BagattoEngine/evaluation.cpp:evaluate(Board const&) (83,550x)
        .               int16_t bestScore;
  444,438 ( 0.03%)      std::vector<Move> moveList;
  584,850 ( 0.04%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::vector() (83,550x)
  444,438 ( 0.03%)      moveList.reserve(256);
14,120,111 ( 0.90%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<Move, std::allocator<Move> >::reserve(unsigned long) (83,550x)
        .           
  740,730 ( 0.05%)      if (isCheck()){
39,337,577 ( 2.50%)  => Engine.cpp:Engine::isCheck() (83,550x)
   21,876 ( 0.00%)          bestScore = CHECKMATE;
   29,168 ( 0.00%)          mGenerator.evasions(mBoard, moveList);
2,137,671 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.hpp:MoveGenerator::evasions(Board const&, std::vector<Move, std::allocator<Move> >&) const (687x)
        .               }
        .               else{
   41,506 ( 0.00%)          bestScore = standPat;
  281,708 ( 0.02%)          if(bestScore > tAlpha) {
   96,399 ( 0.01%)              tAlpha = bestScore; 
  192,798 ( 0.01%)              if(tAlpha >= tBeta) return bestScore;
        .                   }
  444,550 ( 0.03%)          else if(bestScore + (promoThreat() ? 1800 : 1000) < tAlpha) 
  541,710 ( 0.03%)  => Engine.cpp:Engine::promoThreat() (6,945x)
        .                       return bestScore;
        .           
  166,024 ( 0.01%)          mGenerator.captures(mBoard, moveList);
16,946,638 ( 1.08%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.hpp:MoveGenerator::captures(Board const&, std::vector<Move, std::allocator<Move> >&) const (5,521x)
2,875,080 ( 0.18%)          std::sort(moveList.begin(), moveList.end(),[&](const Move m1, const Move m2){
16,024,607 ( 1.02%)  => /usr/include/c++/14/bits/stl_algo.h:void std::sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#1}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#1}) (5,521x)
   55,210 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5,521x)
   55,210 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5,521x)
5,419,973 ( 0.34%)              return mBoard.searchPiece(m1.from()) < mBoard.searchPiece(m2.from());
7,504,578 ( 0.48%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (833,842x)
3,335,368 ( 0.21%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (833,842x)
1,667,684 ( 0.11%)          });
2,745,708 ( 0.17%)          std::stable_sort(moveList.begin(), moveList.end(),[&](const Move m1, const Move m2){
19,751,067 ( 1.25%)  => /usr/include/c++/14/bits/stl_algo.h:void std::stable_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#2}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::quiescence(short, short)::{lambda(Move, Move)#2}) (5,521x)
   55,210 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (5,521x)
   55,210 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (5,521x)
5,139,667 ( 0.33%)              return mBoard.searchPiece(m1.to()) > mBoard.searchPiece(m2.to());
7,116,462 ( 0.45%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (790,718x)
2,372,154 ( 0.15%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (790,718x)
1,581,436 ( 0.10%)          });
        .               }
        .           
2,776,999 ( 0.18%)      for (const auto& move : moveList){
  520,362 ( 0.03%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (28,909x)
   62,080 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (6,208x)
   62,080 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() (6,208x)
   52,966 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (26,483x)
   45,402 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (22,701x)
  610,317 ( 0.04%)          mBoard.makeMove(move);
21,820,564 ( 1.38%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.cpp:Board::makeMove(Move const&) (26,483x)
2,164,376 ( 0.14%)              if(!isIllegal() && standPat + pieceVal[mBoard.getCaptured()] + 200 > tAlpha){ 
10,971,269 ( 0.70%)  => Engine.cpp:Engine::isIllegal() (26,483x)
  846,117 ( 0.05%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCaptured() const (20,637x)
  581,364 ( 0.04%)              int16_t score = -quiescence(-tBeta, -tAlpha);
771,485,141 (48.94%)  => Engine.cpp:Engine::quiescence(short, short)'2 (6,395x)
        .                       
  129,192 ( 0.01%)              if (score > bestScore) {
   39,998 ( 0.00%)                  bestScore = score; 
  119,994 ( 0.01%)                  if (bestScore > tAlpha) tAlpha = bestScore;
        .                       }
        .                   }
  610,317 ( 0.04%)          mBoard.undoMove(move);
15,573,404 ( 0.99%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.cpp:Board::undoMove(Move const&) (26,483x)
        .           
  406,878 ( 0.03%)          if(tAlpha >= tBeta) return bestScore;
        .               }
        .           
   97,596 ( 0.01%)      return bestScore;
1,629,606 ( 0.10%)  }
7,747,407 ( 0.49%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::~vector() (83,550x)
        .           
        .           bool Engine::isIllegal()
1,246,476 ( 0.08%)  {
1,246,476 ( 0.08%)      const int stm = mBoard.getSideToMove();
12,464,760 ( 0.79%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (311,619x)
1,558,095 ( 0.10%)      const int kingSquare = mBoard.getKingSquare(1 - stm);
13,711,236 ( 0.87%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getKingSquare(int) const (311,619x)
1,246,476 ( 0.08%)      return mGenerator.isAttacked(mBoard, kingSquare, stm);
100,229,675 ( 6.36%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (311,619x)
  934,857 ( 0.06%)  }
        .           
        .           bool Engine::isCheck()
  592,584 ( 0.04%)  {
  592,584 ( 0.04%)      const int stm = mBoard.getSideToMove();
5,925,840 ( 0.38%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (148,146x)
  592,584 ( 0.04%)      const int kingSquare = mBoard.getKingSquare(stm);
6,518,424 ( 0.41%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getKingSquare(int) const (148,146x)
  740,730 ( 0.05%)      return mGenerator.isAttacked(mBoard, kingSquare, 1 - stm);
53,565,010 ( 3.40%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (148,146x)
  444,438 ( 0.03%)  }
        .           
        .           bool Engine::promoThreat()
  133,365 ( 0.01%)  {
        .               static constexpr uint64_t seventhRank[2] = {uint64_t(0x00ff000000000000), uint64_t(0x000000000000ff00)};
  177,820 ( 0.01%)      const int stm = mBoard.getSideToMove();
1,778,200 ( 0.11%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (44,455x)
  489,005 ( 0.03%)      return mBoard.getBitboard(pawn) & mBoard.getBitboard(stm) & seventhRank[stm];
  711,280 ( 0.05%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (88,910x)
  177,820 ( 0.01%)  }
        .           
        .           bool Engine::hashUsageCondition(TTEntry tTTVal, int tDepht, int tAlpha, int tBeta)
        .           {
   10,962 ( 0.00%)      return tTTVal.depht >= tDepht && (
      677 ( 0.00%)              (tTTVal.nodeType == pvNode)
    2,000 ( 0.00%)              || (tTTVal.nodeType == allNode && tTTVal.score <= tAlpha)
    2,495 ( 0.00%)              || (tTTVal.nodeType == cutNode && tTTVal.score >= tBeta )
        .                   );
    1,941 ( 0.00%)  }
        .           
        .           bool Engine::threefoldRepetition()
  558,270 ( 0.04%)  {
        .               int repetition = 1;
  372,180 ( 0.02%)      const int revPlies = mBoard.getHMC(); // number of plies with reversible moves
3,721,800 ( 0.24%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getHMC() const (93,045x)
  465,225 ( 0.03%)      const int histSize = mGameHist.size(); // lenght of current game
  372,180 ( 0.02%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::size() const [clone .isra.0] (93,045x)
  372,180 ( 0.02%)      const int maxPlies = std::min(histSize, revPlies);
  465,225 ( 0.03%)  => /usr/include/c++/14/bits/stl_algobase.h:int const& std::min<int>(int const&, int const&) (93,045x)
        .               
  279,135 ( 0.02%)      if (maxPlies < 8) return false; // not enough reversible moves for threefold rep 
        .               for (int ply = 2; ply <= maxPlies; ply += 2){ // checks every even spaced key for repetition (excluding the second last)
        .                   if(mGameHist[(histSize - 1) - ply] ==  mGameHist.back()) {
        .                       repetition += 1;
        .                       if(repetition == 3) return true;
        .                   }
        .               }
        .               return false;
  558,270 ( 0.04%)  }
        .           
        .           bool Engine::fiftyMove()
   93,045 ( 0.01%)  {
  186,090 ( 0.01%)      const int revPlies = mBoard.getHMC(); // number of plies with reversible moves
3,721,800 ( 0.24%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getHMC() const (93,045x)
  186,090 ( 0.01%)      return revPlies >= 100;
  186,090 ( 0.01%)  }
        .           
        .           bool Engine::exitSearch()
  203,890 ( 0.01%)  {
  611,670 ( 0.04%)      if (!mGoSearch.load()) 
  407,780 ( 0.03%)  => /usr/include/c++/14/bits/atomic_base.h:std::atomic<bool>::load(std::memory_order) const (101,945x)
  101,945 ( 0.01%)          return true;
  305,835 ( 0.02%)      else if(mLimits.infinite)
        .                   return false;
  203,890 ( 0.01%)      else if(mLimits.movetime)
        .                   return (now() - mLimits.timestart) > mLimits.movetime;
  305,835 ( 0.02%)      else if(mLimits.nodes)
        .                   return mSearchedNodes > mLimits.nodes;
        .               else 
        .                   return false;
  203,890 ( 0.01%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: MoveGenerator.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 2 ----------------------------------------
         .           #include "Board.hpp"
         .           #include "Move.hpp"
         .           #include "notation.hpp"
         .           #include "utils.hpp"
         .           #include <array>
         .           #include <cstdint>
         .           #include <vector>
         .           
   529,362 ( 0.03%)  void MoveGenerator::generate(uint64_t tTarget, const Board& tBoard, std::vector<Move>& tList) const{
 2,705,628 ( 0.17%)      for (int piece = knight; piece <= king; piece ++) pieceMoves(tTarget, piece, tList, tBoard);
73,644,210 ( 4.67%)  => MoveGenerator.cpp:MoveGenerator::pieceMoves(unsigned long, int, std::vector<Move, std::allocator<Move> >&, Board const&) const (294,090x)
   294,090 ( 0.02%)      pawnMoves(tTarget, tList, tBoard);
17,532,992 ( 1.11%)  => MoveGenerator.cpp:MoveGenerator::pawnMoves(unsigned long, std::vector<Move, std::allocator<Move> >&, Board const&) const (58,818x)
         .               
   236,976 ( 0.02%)      if(tBoard.getEpState() == true) enPassants(tTarget, tList, tBoard);
 2,411,538 ( 0.15%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpState() const (58,818x)
    39,476 ( 0.00%)  => MoveGenerator.cpp:MoveGenerator::enPassants(unsigned long, std::vector<Move, std::allocator<Move> >&, Board const&) const (284x)
         .           
   235,272 ( 0.01%)      castles(tList, tBoard);
72,900,708 ( 4.62%)  => MoveGenerator.cpp:MoveGenerator::castles(std::vector<Move, std::allocator<Move> >&, Board const&) const (58,818x)
   294,090 ( 0.02%)  }
         .           
         .           void MoveGenerator::pieceMoves(uint64_t tTarget, int tPiece, std::vector<Move> &tList, const Board &tBoard) const
 3,823,170 ( 0.24%)  {
 2,646,810 ( 0.17%)      uint64_t pieceSet = tBoard.getBitboard(tPiece) & tBoard.getBitboard(tBoard.getSideToMove());
11,763,600 ( 0.75%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (294,090x)
 4,705,440 ( 0.30%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (588,180x)
 2,314,620 ( 0.15%)      uint64_t occupied = tBoard.getBitboard(white) | tBoard.getBitboard(black);
 4,114,880 ( 0.26%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (514,360x)
 1,800,260 ( 0.11%)      uint64_t enemySet = tBoard.getBitboard(1 - tBoard.getSideToMove());
 2,057,440 ( 0.13%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (257,180x)
         .           
   588,180 ( 0.04%)      if (pieceSet) do {
 1,038,981 ( 0.07%)          int startingSquare = bitScanForward(pieceSet);
 1,731,635 ( 0.11%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (346,327x)
 1,731,635 ( 0.11%)          uint64_t attackSet = mLookup.getAttacks(tPiece, startingSquare, occupied);
 6,647,340 ( 0.42%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.hpp:MagicBitboards::getAttacks(int, int, unsigned long) const (346,327x)
         .           
 1,464,194 ( 0.09%)          uint64_t quietMoves = attackSet & tTarget & ~occupied;
 1,300,236 ( 0.08%)          if (quietMoves) do {
   483,642 ( 0.03%)              int endSquare = bitScanForward(quietMoves);
   806,070 ( 0.05%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (161,214x)
 1,128,498 ( 0.07%)              tList.emplace_back(Move(startingSquare, endSquare, quiet));
 5,964,918 ( 0.38%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (161,214x)
 1,289,712 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (161,214x)
   535,893 ( 0.03%)          } while (quietMoves &= (quietMoves - 1));
         .           
         .                   uint64_t captures = attackSet & tTarget & enemySet;
 1,091,232 ( 0.07%)          if (captures) do {
   528,693 ( 0.03%)              int endSquare = bitScanForward(captures);
   881,155 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (176,231x)
 1,233,617 ( 0.08%)              tList.emplace_back(Move(startingSquare, endSquare, capture));
 6,520,547 ( 0.41%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (176,231x)
 1,409,848 ( 0.09%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (176,231x)
   650,263 ( 0.04%)          } while (captures &= (captures - 1));
 1,038,981 ( 0.07%)      } while (pieceSet &= (pieceSet - 1));
 2,352,720 ( 0.15%)  }
         .           
         .           
         .           
         .           void MoveGenerator::pawnMoves(uint64_t tTarget, std::vector<Move> &tList, const Board &tBoard) const
   588,180 ( 0.04%)  {
         .               uint64_t doublePushSet, pushSet, promoSet, eastCaptures, westCaptures, eastPromoCaptures, westPromoCaptures;
         .               int pushOffset, eastOffset, westOffset;
         .           
         .           
   294,090 ( 0.02%)      if(tBoard.getSideToMove() == white) {
 2,352,720 ( 0.15%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (58,818x)
         .                   static constexpr uint64_t rank4 = uint64_t(0x00000000ff000000);
         .                   static constexpr uint64_t rank8 = uint64_t(0xff00000000000000);
         .           
   764,634 ( 0.05%)          const uint64_t emptySet = ~(tBoard.getBitboard(white) | tBoard.getBitboard(black));
   941,088 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (117,636x)
         .                   const uint64_t enemySet = tBoard.getBitboard(black);
   295,022 ( 0.02%)          const uint64_t pawnSet = tBoard.getBitboard(pawn) & tBoard.getBitboard(white);
   470,544 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (58,818x)
         .           
    89,625 ( 0.01%)          doublePushSet = (pawnSet << 8) & emptySet;
   179,250 ( 0.01%)          doublePushSet = (doublePushSet << 8) & emptySet & rank4 & tTarget;
   179,250 ( 0.01%)          pushSet  = pawnSet << 8 & ~rank8 & emptySet & tTarget;
    59,750 ( 0.00%)          promoSet = pawnSet << 8 &  rank8 & emptySet & tTarget;
   239,000 ( 0.02%)          eastCaptures      = cpyWrapEast(pawnSet) << 8 & ~rank8 & enemySet & tTarget;
   388,375 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (29,875x)
    29,875 ( 0.00%)          eastPromoCaptures = cpyWrapEast(pawnSet) << 8 &  rank8 & enemySet & tTarget;
   239,000 ( 0.02%)          westCaptures      = cpyWrapWest(pawnSet) << 8 & ~rank8 & enemySet & tTarget;
   388,375 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (29,875x)
    29,875 ( 0.00%)          westPromoCaptures = cpyWrapWest(pawnSet) << 8 &  rank8 & enemySet & tTarget;
         .           
    59,750 ( 0.00%)          eastOffset = -9;
    29,875 ( 0.00%)          westOffset = -7;
    29,875 ( 0.00%)          pushOffset = -8;
         .               }
         .               else {
         .                   static constexpr uint64_t rank5 = uint64_t(0x000000ff00000000);
         .                   static constexpr uint64_t rank1 = uint64_t(0x00000000000000ff);
         .           
         .                   const uint64_t emptySet = ~(tBoard.getBitboard(white) | tBoard.getBitboard(black));
         .                   const uint64_t enemySet = tBoard.getBitboard(white);
    28,943 ( 0.00%)          const uint64_t pawnSet = tBoard.getBitboard(pawn) & tBoard.getBitboard(black);
         .           
   289,430 ( 0.02%)          doublePushSet = ((pawnSet >> 8) & emptySet) >> 8 & emptySet & rank5 & tTarget;
   144,715 ( 0.01%)          pushSet  = pawnSet >> 8 & ~rank1 & emptySet & tTarget;
    28,943 ( 0.00%)          promoSet = pawnSet >> 8 &  rank1 & emptySet & tTarget;
   231,544 ( 0.01%)          eastCaptures      = cpyWrapEast(pawnSet) >> 8 & ~rank1 & enemySet & tTarget;
   376,259 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (28,943x)
    28,943 ( 0.00%)          eastPromoCaptures = cpyWrapEast(pawnSet) >> 8 &  rank1 & enemySet & tTarget;
   202,601 ( 0.01%)          westCaptures      = cpyWrapWest(pawnSet) >> 8 & ~rank1 & enemySet & tTarget;
   376,259 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (28,943x)
    28,943 ( 0.00%)          westPromoCaptures = cpyWrapWest(pawnSet) >> 8 &  rank1 & enemySet & tTarget;
         .           
    28,943 ( 0.00%)          eastOffset = 7;
    28,943 ( 0.00%)          westOffset = 9;
   144,715 ( 0.01%)          pushOffset = 8;
         .               }
         .           
   117,636 ( 0.01%)      if (doublePushSet) do {
    24,330 ( 0.00%)          int endSq = bitScanForward(doublePushSet);
    40,550 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (8,110x)
    50,394 ( 0.00%)          int startSq = endSq + (2 * pushOffset);
    48,660 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, doublePush));
   300,070 ( 0.02%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (8,110x)
    64,880 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (8,110x)
    39,706 ( 0.00%)      } while (doublePushSet  &= (doublePushSet - 1));
         .           
   171,501 ( 0.01%)      if (pushSet) do {
    55,470 ( 0.00%)          int endSq = bitScanForward(pushSet);
    92,450 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (18,490x)
    18,490 ( 0.00%)          int startSq = endSq + pushOffset;
   110,940 ( 0.01%)          tList.emplace_back(Move(startSq, endSq, quiet));
   684,130 ( 0.04%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (18,490x)
   147,920 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (18,490x)
    78,555 ( 0.00%)      } while (pushSet &= (pushSet - 1));
         .           
   117,660 ( 0.01%)      if (promoSet) do {
         9 ( 0.00%)          int endSq = bitScanForward(promoSet);
        15 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (3x)
         3 ( 0.00%)          int startSq = endSq + pushOffset;
        24 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, knightPromo));
       111 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (3x)
        24 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (3x)
        24 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, bishopPromo));
       111 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (3x)
        24 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (3x)
        24 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, rookPromo));
       111 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (3x)
        24 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (3x)
        24 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, queenPromo));
       111 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (3x)
        24 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (3x)
        21 ( 0.00%)      } while (promoSet &= (promoSet - 1));
         .           
         .           
   200,760 ( 0.01%)      if (westCaptures) do {
    84,318 ( 0.01%)          int endSq = bitScanForward(westCaptures);
   140,530 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (28,106x)
    28,106 ( 0.00%)          int startSq = endSq + westOffset;
   168,636 ( 0.01%)          tList.emplace_back(Move(startSq, endSq, capture));
 1,039,922 ( 0.07%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (28,106x)
   224,848 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (28,106x)
   105,099 ( 0.01%)      } while (westCaptures &= (westCaptures - 1));
         .           
         .           
   227,980 ( 0.01%)      if (eastCaptures) do {
   113,985 ( 0.01%)          int endSq = bitScanForward(eastCaptures);
   189,975 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (37,995x)
    37,995 ( 0.00%)          int startSq = endSq + eastOffset;
   227,970 ( 0.01%)          tList.emplace_back(Move(startSq, endSq, capture));
 1,405,815 ( 0.09%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (37,995x)
   303,960 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (37,995x)
   113,985 ( 0.01%)      } while (eastCaptures &= (eastCaptures - 1));
         .           
   126,316 ( 0.01%)      if (eastPromoCaptures) do {
     5,208 ( 0.00%)          int endSq = bitScanForward(eastPromoCaptures);
     8,680 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (1,736x)
     1,736 ( 0.00%)          int startSq = endSq + eastOffset;
    13,888 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, knightPromoCapture));
    64,232 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (1,736x)
    13,888 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (1,736x)
    13,888 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, bishopPromoCapture));
    64,232 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (1,736x)
    13,888 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (1,736x)
    13,888 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, rookPromoCapture));
    64,232 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (1,736x)
    13,888 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (1,736x)
    13,888 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, queenPromoCapture));
    64,232 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (1,736x)
    13,888 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (1,736x)
     6,944 ( 0.00%)      } while (eastPromoCaptures &= (eastPromoCaptures - 1));
         .           
   118,464 ( 0.01%)      if (westPromoCaptures) do {
       828 ( 0.00%)          int endSq = bitScanForward(westPromoCaptures);
     1,380 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (276x)
       276 ( 0.00%)          int startSq = endSq + westOffset;
     2,208 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, knightPromoCapture));
    10,212 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (276x)
     2,208 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (276x)
     2,208 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, bishopPromoCapture));
    10,212 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (276x)
     2,208 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (276x)
     2,208 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, rookPromoCapture));
    10,212 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (276x)
     2,208 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (276x)
     2,208 ( 0.00%)          tList.emplace_back(Move(startSq, endSq, queenPromoCapture));
    10,212 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (276x)
     2,208 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (276x)
       828 ( 0.00%)      } while (westPromoCaptures &= (westPromoCaptures - 1));
   470,544 ( 0.03%)  }
         .           
         .           void MoveGenerator::castles(std::vector<Move> &tList, const Board &tBoard) const
   529,362 ( 0.03%)  {
   470,544 ( 0.03%)      uint64_t emptySet = ~(tBoard.getBitboard(black) | tBoard.getBitboard(white));
   941,088 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (117,636x)
         .           
   235,272 ( 0.01%)      if (tBoard.getSideToMove() == white){
 2,352,720 ( 0.15%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (58,818x)
         .                   static constexpr uint64_t longCastleSquares = uint64_t(0x000000000000000e);
         .                   static constexpr uint64_t shortCastleSquares = uint64_t(0x0000000000000060);
         .                   uint64_t intersection = longCastleSquares & emptySet;
         .                   if(
   128,773 ( 0.01%)              tBoard.getLongCastle(white) &&
 1,284,625 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getLongCastle(int) const (29,875x)
    37,534 ( 0.00%)              (intersection == longCastleSquares) &&
   127,591 ( 0.01%)              ! isAttacked(tBoard, c1, black) &&
 6,457,478 ( 0.41%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (18,767x)
   171,844 ( 0.01%)              ! isAttacked(tBoard, d1, black) &&
 5,660,242 ( 0.36%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (16,878x)
    69,260 ( 0.00%)              ! isAttacked(tBoard, e1, black)
 5,028,846 ( 0.32%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (13,852x)
   129,160 ( 0.01%)          ) tList.emplace_back(Move(e1, c1, queenCastle));
   477,892 ( 0.03%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (12,916x)
   103,328 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (12,916x)
         .                   
         .                   intersection = shortCastleSquares & emptySet; 
         .                   if(
   122,997 ( 0.01%)              tBoard.getShortCastle(white) &&
 1,284,625 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getShortCastle(int) const (29,875x)
    32,854 ( 0.00%)              (intersection == shortCastleSquares) &&
   110,365 ( 0.01%)              ! isAttacked(tBoard, e1, black) &&
 5,628,843 ( 0.36%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (16,427x)
   151,373 ( 0.01%)              ! isAttacked(tBoard, f1, black) &&
 4,365,978 ( 0.28%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (14,115x)
    52,620 ( 0.00%)              ! isAttacked(tBoard, g1, black)
 3,873,587 ( 0.25%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (10,524x)
    51,995 ( 0.00%)          ) tList.emplace_back(Move(e1, g1, kingCastle));
         .               }
         .               else{
         .                   static constexpr uint64_t longCastleSquares = uint64_t(0x0e00000000000000);
         .                   static constexpr uint64_t shortCastleSquares = uint64_t(0x6000000000000000);
         .                   uint64_t intersection = longCastleSquares & emptySet; 
         .                   if(
   148,527 ( 0.01%)              tBoard.getLongCastle(black) &&
 1,244,549 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getLongCastle(int) const (28,943x)
    40,518 ( 0.00%)              (intersection == longCastleSquares) &&
   119,677 ( 0.01%)              ! isAttacked(tBoard, c8, white) &&
 5,228,261 ( 0.33%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (20,259x)
   118,089 ( 0.01%)              ! isAttacked(tBoard, d8, white) &&
 2,944,674 ( 0.19%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (9,191x)
    35,620 ( 0.00%)              ! isAttacked(tBoard, e8, white)
 2,512,790 ( 0.16%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (7,124x)
    65,300 ( 0.00%)          ) tList.emplace_back(Move(e8, c8, queenCastle));
   241,610 ( 0.02%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (6,530x)
    52,240 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (6,530x)
         .           
         .                   intersection = shortCastleSquares & emptySet;
         .                   if(
   143,517 ( 0.01%)              tBoard.getShortCastle(black) &&
 1,244,549 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getShortCastle(int) const (28,943x)
    37,184 ( 0.00%)              (intersection == shortCastleSquares) &&
   126,148 ( 0.01%)              ! isAttacked(tBoard, e8, white) &&
 6,547,576 ( 0.42%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (18,592x)
   168,328 ( 0.01%)              ! isAttacked(tBoard, f8, white) &&
 5,470,132 ( 0.35%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (16,594x)
    68,680 ( 0.00%)              ! isAttacked(tBoard, g8, white)
 4,821,753 ( 0.31%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (13,736x)
   166,232 ( 0.01%)          ) tList.emplace_back(Move(e8, g8, kingCastle));
   854,404 ( 0.05%)  => /usr/include/c++/14/bits/vector.tcc:Move& std::vector<Move, std::allocator<Move> >::emplace_back<Move>(Move&&) [clone .isra.0] (23,092x)
   184,736 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(int, int, int) (23,092x)
         .               }
   434,818 ( 0.03%)  }
         .           
         .           void MoveGenerator::enPassants(uint64_t tTarget, std::vector<Move> &tList, const Board &tBoard) const
     2,840 ( 0.00%)  {
       852 ( 0.00%)      int stm = tBoard.getSideToMove();
    11,360 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (284x)
     2,272 ( 0.00%)      uint64_t pawnSet = tBoard.getBitboard(pawn) & tBoard.getBitboard(stm);
     4,544 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (568x)
         .           
       852 ( 0.00%)      int epSquare = tBoard.getEpSquare();
    11,928 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpSquare() const (284x)
       852 ( 0.00%)      uint64_t epMask = uint64_t(1) << epSquare;
         .           
         .           
       568 ( 0.00%)      if (stm == white) {
       461 ( 0.00%)          if(tTarget & (epMask << 8)){
         .                       if (cpyWrapEast(epMask) & pawnSet) 
         .                           tList.emplace_back(Move(epSquare + 1, epSquare + 8, enPassant));
         .                       if (cpyWrapWest(epMask) & pawnSet) 
         .                           tList.emplace_back(Move(epSquare - 1, epSquare + 8, enPassant));
         .                   }
         .               }
         .               else {
       675 ( 0.00%)          if(tTarget & (epMask >> 8)) {
         .                       if (cpyWrapEast(epMask) & pawnSet) 
         .                           tList.emplace_back(Move(epSquare + 1, epSquare - 8, enPassant));
         .                       if (cpyWrapWest(epMask) & pawnSet) 
         .                           tList.emplace_back(Move(epSquare - 1, epSquare - 8, enPassant));
         .                   }
         .               }
     2,272 ( 0.00%)  }
         .           
         .           bool MoveGenerator::isAttacked(const Board &tBoard, int tSquare, int tAttackingSide) const
 8,265,790 ( 0.52%)  {
 5,430,609 ( 0.34%)      uint64_t occupied = tBoard.getBitboard(white) | tBoard.getBitboard(black);
 9,654,416 ( 0.61%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (1,206,802x)
 5,722,470 ( 0.36%)      uint64_t pawnsSet = tBoard.getBitboard(pawn) & tBoard.getBitboard(tAttackingSide);
10,173,280 ( 0.65%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (1,271,660x)
 5,208,971 ( 0.33%)      if ((mLookup.pawnAttacks(tSquare, 1-tAttackingSide) & pawnsSet) != 0) return true;
 3,179,150 ( 0.20%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.hpp:MagicBitboards::pawnAttacks(int, int) const (635,830x)
         .           
         .           
 8,790,404 ( 0.56%)      for (int piece = knight; piece <= king; piece ++){
20,137,620 ( 1.28%)          uint64_t pieceSet = tBoard.getBitboard(piece) & tBoard.getBitboard(tAttackingSide);
40,275,240 ( 2.55%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (5,034,405x)
29,197,730 ( 1.85%)          if((mLookup.getAttacks(piece, tSquare, occupied) & pieceSet) != 0) return true;
60,700,014 ( 3.85%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.hpp:MagicBitboards::getAttacks(int, int, unsigned long) const (2,818,903x)
         .               } 
         .           
   513,499 ( 0.03%)      return false;
 5,086,640 ( 0.32%)  }
         .           
    16,456 ( 0.00%)  bool MoveGenerator::validate(const Board& tBoard,const Move tMove) const {
     8,976 ( 0.00%)      int moved = tBoard.searchPiece(tMove.from());
    13,464 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (1,496x)
     5,984 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (1,496x)
         .           
     4,066 ( 0.00%)      if (moved == pawn){
         .                   // Insures that ep is available and the right file is used
     2,110 ( 0.00%)          if (tMove.isEnPassant())
     2,954 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isEnPassant() const [clone .isra.0] (422x)
     1,496 ( 0.00%)              return tBoard.getEpState() && (tBoard.getEpSquare()%8 == tMove.to()%8);
         .           
     1,266 ( 0.00%)          int stm = tBoard.getSideToMove();
    16,880 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (422x)
     3,376 ( 0.00%)          uint64_t moveMask = uint64_t(1) << tMove.to();
     1,266 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (422x)
         .           
         .                   // Insures pawns capture according to their attack pattern and move_to square is occupied
     1,266 ( 0.00%)          if (tMove.isCapture())
     2,954 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCapture() const [clone .isra.0] (422x)
     5,004 ( 0.00%)              return (mLookup.pawnAttacks(tMove.from(), stm) & moveMask) && tBoard.searchPiece(tMove.to());
     3,726 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (414x)
     2,100 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.hpp:MagicBitboards::pawnAttacks(int, int) const (420x)
         .               
         .                   // Insures pawns don't push trough existing pieces
        18 ( 0.00%)          uint64_t emptySet = ~(tBoard.getBitboard(white) | tBoard.getBitboard(black));
        32 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (4x)
         4 ( 0.00%)          uint64_t moveSet  = uint64_t(1) << tMove.from();
        10 ( 0.00%)          moveSet  = (stm == white ? moveSet << 8 : moveSet >> 8) & emptySet;
         .           
         8 ( 0.00%)          if (tMove.isDoublePush()) // move_to square correctness doesn't need to be checked
        14 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isDoublePush() const [clone .isra.0] (2x)
         5 ( 0.00%)              return (stm == white ? moveSet << 8 : moveSet >> 8) & emptySet;
         .                   
         3 ( 0.00%)          return moveSet & moveMask; // Checks move_to square correnctess
         .               }
         .           
     2,148 ( 0.00%)      if (moved != 0){
    12,888 ( 0.00%)          if (tMove.isPromo() || tMove.isEnPassant() || tMove.isDoublePush())
     7,518 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isEnPassant() const [clone .isra.0] (1,074x)
     7,518 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isDoublePush() const [clone .isra.0] (1,074x)
     7,518 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isPromo() const [clone .isra.0] (1,074x)
         .                       return false; // These flags are pawn exclusive
         .                   
     4,296 ( 0.00%)          int stm = tBoard.getSideToMove();
    42,960 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (1,074x)
     8,592 ( 0.00%)          uint64_t occupied   = tBoard.getBitboard(white) | tBoard.getBitboard(black);
    17,184 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (2,148x)
         .           
        36 ( 0.00%)          auto isKingSafe = [&] (uint64_t mask) {
         .                       do {
        18 ( 0.00%)                  int square = bitScanForward(mask);
        30 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (6x)
        42 ( 0.00%)                  if (isAttacked(tBoard, square, stm))
       988 ( 0.00%)  => MoveGenerator.cpp:MoveGenerator::isAttacked(Board const&, int, int) const (6x)
         6 ( 0.00%)                      return false;
         .                       } while (mask &= (mask - 1));
         .                       return true;
     5,394 ( 0.00%)          };
         .           
     4,296 ( 0.00%)          if (tMove.isCastle()) {
     8,592 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCastle() const [clone .isra.0] (1,074x)
         .                       static constexpr std::array<uint64_t, 4> castleSets = {
         .                           uint64_t(0x0000000000000060), uint64_t(0x000000000000000e),
         .                           uint64_t(0x6000000000000000), uint64_t(0x0e00000000000000)
         .                       };
        48 ( 0.00%)              uint64_t castleMask = castleSets[(tMove.flag() - kingCastle) + (2 * stm)];
        18 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::flag() const [clone .isra.0] (6x)
        12 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 4ul>::operator[](unsigned long) const (6x)
        48 ( 0.00%)              return (castleMask & ~occupied) && isKingSafe(castleMask);
     1,144 ( 0.00%)  => MoveGenerator.cpp:MoveGenerator::validate(Board const&, Move) const::{lambda(unsigned long)#1}::operator()(unsigned long) const (6x)
         .                   }
         .                   
         .                   // Insures pieces move according to their attack patterns
     8,544 ( 0.00%)          uint64_t attackSet = mLookup.getAttacks(moved, tMove.from(), occupied);
    19,002 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.hpp:MagicBitboards::getAttacks(int, int, unsigned long) const (1,068x)
     2,136 ( 0.00%)          uint64_t moveMask  = uint64_t(1) << tMove.to();
     3,204 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (1,068x)
     6,408 ( 0.00%)          bool captureFound  = tBoard.searchPiece(tMove.to());
     9,612 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (1,068x)
         .           
         .                   // Checks that move_to square is occupied iff move is capture
     7,476 ( 0.00%)          return (attackSet & moveMask) && (tMove.isCapture() == captureFound);
     7,476 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCapture() const [clone .isra.0] (1,068x)
         .               } 
         .           
         .               return false;
    13,464 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: evaluation.cpp
--------------------------------------------------------------------------------
Ir                  

-- line 77 ----------------------------------------
         .                   mgBishopTable,
         .                   mgRookTable,
         .                   mgQueenTable,
         .                   mgKingTable
         .               };
         .           
         .               static constexpr int16_t mgPieceValue[6] = { 82, 337, 365, 477, 1025,  0};
         .           
31,617,560 ( 2.01%)      return  mgPieceValue[piece - pawn] + mgSquareTables[piece - pawn][square];
 3,952,195 ( 0.25%)  }
         .           
         .           inline int16_t egValue(int piece, int square)
         .           {
         .               static constexpr int16_t egKnightTable[64] ={
         .                   -58, -38, -13, -28, -31, -27, -63, -99,
         .                   -25,  -8, -25,  -2,  -9, -25, -24, -52,
         .                   -24, -20,  10,   9,  -1,  -9, -19, -41,
         .                   -17,   3,  22,  22,  22,  11,   8, -18,
-- line 94 ----------------------------------------
-- line 159 ----------------------------------------
         .                   egBishopTable,
         .                   egRookTable,
         .                   egQueenTable,
         .                   egKingTable
         .               };
         .           
         .               static constexpr int16_t egPieceValue[6] = { 94, 281, 297, 512,  936,  0};
         .           
31,617,560 ( 2.01%)      return  egPieceValue[piece - 2] + egSquareTables[piece - 2][square];
 3,952,195 ( 0.25%)  }
         .           
         .           int16_t evaluate(const Board &board)
 1,185,168 ( 0.08%)  {
         .               static constexpr std::array<int16_t, 8> pieceVal = {0, 0, 100, 300, 300, 500, 1000, 0};
         .               static constexpr int16_t mgMax = 16*pieceVal[pawn] + 4*pieceVal[knight] + 4*pieceVal[bishop] + 4*pieceVal[rook] + 2*pieceVal[queen];
   148,146 ( 0.01%)      int16_t egEval = 0;
   148,146 ( 0.01%)      int16_t mgEval = 0;
   444,438 ( 0.03%)      int16_t materialCount = 0;
         .           
 2,814,774 ( 0.18%)      for (int piece = pawn; piece <= king; piece++){
 7,999,884 ( 0.51%)          uint64_t wPieces = board.getBitboard(piece) & board.getBitboard(white);
14,222,016 ( 0.90%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (1,777,752x)
 3,459,223 ( 0.22%)          if(wPieces) do {
 5,790,243 ( 0.37%)              int square = bitScanForward(wPieces);
 9,650,405 ( 0.61%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (1,930,081x)
 3,860,162 ( 0.24%)              mirror(square);
28,951,215 ( 1.84%)  => /home/claudio/Documenti/Code/BagattoEngine/evaluation.hpp:mirror(int&) (1,930,081x)
         .           
12,028,190 ( 0.76%)              materialCount += pieceVal[piece];
 3,860,162 ( 0.24%)  => /usr/include/c++/14/array:std::array<short, 8ul>::operator[](unsigned long) const (1,930,081x)
 7,720,324 ( 0.49%)              mgEval += mgValue(piece, square);
17,370,729 ( 1.10%)  => evaluation.cpp:mgValue(int, int) (1,930,081x)
 7,720,324 ( 0.49%)              egEval += egValue(piece, square);
17,370,729 ( 1.10%)  => evaluation.cpp:egValue(int, int) (1,930,081x)
 5,790,243 ( 0.37%)          } while (wPieces &= wPieces - 1);
         .           
 6,629,603 ( 0.42%)          uint64_t bPieces = board.getBitboard(piece) & board.getBitboard(black);
13,451,768 ( 0.85%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (1,681,471x)
 2,666,628 ( 0.17%)          if(bPieces) do {
 8,088,456 ( 0.51%)              int square = bitScanForward(bPieces);
10,110,570 ( 0.64%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (2,022,114x)
         .           
11,828,704 ( 0.75%)              materialCount += pieceVal[piece];
 4,044,228 ( 0.26%)  => /usr/include/c++/14/array:std::array<short, 8ul>::operator[](unsigned long) const (2,022,114x)
 8,088,456 ( 0.51%)              mgEval -= mgValue(piece, square);
18,199,026 ( 1.15%)  => evaluation.cpp:mgValue(int, int) (2,022,114x)
 8,088,456 ( 0.51%)              egEval -= egValue(piece, square);
18,199,026 ( 1.15%)  => evaluation.cpp:egValue(int, int) (2,022,114x)
 8,088,456 ( 0.51%)          } while (bPieces &= bPieces - 1);
         .               }
         .           
 1,333,314 ( 0.08%)      const int16_t gamePhase = 100 * std::min(materialCount, mgMax) / mgMax;
   740,730 ( 0.05%)  => /usr/include/c++/14/bits/stl_algobase.h:short const& std::min<short>(short const&, short const&) (148,146x)
 2,518,482 ( 0.16%)      const int16_t eval = (mgEval * gamePhase + egEval * (100 - gamePhase)) / 100;
         .           
   444,438 ( 0.03%)      return board.getSideToMove() == white ? eval : -eval;
 5,925,840 ( 0.38%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (148,146x)
 1,185,168 ( 0.08%)  }
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir                 

-- line 142 ----------------------------------------
        .             { return _Iter_equal_to_val(); }
        .           
        .             template<typename _Compare>
        .               struct _Iter_comp_iter
        .               {
        .                 _Compare _M_comp;
        .           
        .                 explicit _GLIBCXX14_CONSTEXPR
  294,186 ( 0.02%)        _Iter_comp_iter(_Compare __comp)
  392,248 ( 0.02%)  	: _M_comp(_GLIBCXX_MOVE(__comp))
   15,050 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>::type&& std::move<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}&) (7,525x)
  196,124 ( 0.01%)        { }
        .           
        .                 template<typename _Iterator1, typename _Iterator2>
        .                   _GLIBCXX14_CONSTEXPR
        .                   bool
3,616,092 ( 0.23%)          operator()(_Iterator1 __it1, _Iterator2 __it2)
9,880,112 ( 0.63%)          { return bool(_M_comp(*__it1, *__it2)); }
1,000,489 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}::operator()(Move, Move) const [clone .isra.0] (21,287x)
  127,722 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (42,574x)
   42,574 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (21,287x)
        .               };
        .           
        .             template<typename _Compare>
        .               _GLIBCXX14_CONSTEXPR
        .               inline _Iter_comp_iter<_Compare>
  196,124 ( 0.01%)      __iter_comp_iter(_Compare __comp)
  784,496 ( 0.05%)      { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
   82,775 ( 0.01%)  => /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::_Iter_comp_iter(Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}) (7,525x)
   15,050 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>::type&& std::move<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}&) (7,525x)
        .           
        .             template<typename _Compare>
        .               struct _Iter_comp_val
        .               {
        .                 _Compare _M_comp;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 explicit
-- line 173 ----------------------------------------
-- line 223 ----------------------------------------
        .                 explicit
        .                 _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
        .           	: _M_comp(__comp._M_comp)
        .                 { }
        .           
        .           #if __cplusplus >= 201103L
        .                 _GLIBCXX20_CONSTEXPR
        .                 explicit
  699,132 ( 0.04%)        _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
1,048,698 ( 0.07%)  	: _M_comp(std::move(__comp._M_comp))
  295,546 ( 0.02%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>::type&& std::move<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}&) (147,773x)
  349,566 ( 0.02%)        { }
        .           #endif
        .           
        .                 template<typename _Value, typename _Iterator>
        .           	_GLIBCXX20_CONSTEXPR
        .           	bool
3,153,402 ( 0.20%)  	operator()(_Value& __val, _Iterator __it)
7,883,505 ( 0.50%)  	{ return bool(_M_comp(__val, *__it)); }
5,866,822 ( 0.37%)  => /home/claudio/Documenti/Code/BagattoEngine/Engine.cpp:Engine::quiescence(short, short)::{lambda(Move, Move)#2}::operator()(Move, Move) const [clone .isra.0] (124,826x)
  748,956 ( 0.05%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (249,652x)
  249,652 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (124,826x)
        .               };
        .           
        .             template<typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Val_comp_iter<_Compare>
        .               __val_comp_iter(_Compare __comp)
        .               { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
        .           
        .             template<typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Val_comp_iter<_Compare>
  699,132 ( 0.04%)      __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
2,796,528 ( 0.18%)      { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
  413,400 ( 0.03%)  => /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::_Val_comp_iter(__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>&&) (51,675x)
  103,350 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>::type&& std::move<Engine::quiescence(short, short)::{lambda(Move, Move)#1}&>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}&) (51,675x)
        .           
        .             template<typename _Value>
        .               struct _Iter_equals_val
        .               {
        .                 _Value& _M_value;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 explicit
-- line 261 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir                 

-- line 77 ----------------------------------------
        .           namespace std _GLIBCXX_VISIBILITY(default)
        .           {
        .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
        .           
        .             /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
        .             template<typename _Iterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
       44 ( 0.00%)      __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
        .           			   _Iterator __c, _Compare __comp)
        .               {
       20 ( 0.00%)        if (__comp(__a, __b))
      328 ( 0.00%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (4x)
        .           	{
        4 ( 0.00%)  	  if (__comp(__b, __c))
        .           	    std::iter_swap(__result, __b);
        .           	  else if (__comp(__a, __c))
        .           	    std::iter_swap(__result, __c);
        .           	  else
       12 ( 0.00%)  	    std::iter_swap(__result, __a);
      280 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (4x)
        .           	}
       20 ( 0.00%)        else if (__comp(__a, __c))
      328 ( 0.00%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (4x)
        .           	std::iter_swap(__result, __a);
        .                 else if (__comp(__b, __c))
        .           	std::iter_swap(__result, __c);
        .                 else
        .           	std::iter_swap(__result, __b);
       28 ( 0.00%)      }
        .           
        .             /// Provided for stable_partition to use.
        .             template<typename _InputIterator, typename _Predicate>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _InputIterator
        .               __find_if_not(_InputIterator __first, _InputIterator __last,
        .           		  _Predicate __pred)
        .               {
-- line 111 ----------------------------------------
-- line 1422 ----------------------------------------
        .           
        .                 return __first;
        .               }
        .           
        .             /// This is a helper function...
        .             template<typename _BidirectionalIterator, typename _Predicate>
        .               _GLIBCXX20_CONSTEXPR
        .               _BidirectionalIterator
   29,940 ( 0.00%)      __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
        .           		_Predicate __pred, bidirectional_iterator_tag)
        .               {
        .                 while (true)
        .           	{
        .           	  while (true)
   19,630 ( 0.00%)  	    if (__first == __last)
   70,668 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (3,926x)
    6,421 ( 0.00%)  	      return __first;
   45,153 ( 0.00%)  	    else if (__pred(*__first))
  201,656 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}::operator()(Move) const (3,878x)
   11,634 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (3,878x)
    7,756 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (3,878x)
        .           	      ++__first;
        .           	    else
        .           	      break;
  159,796 ( 0.01%)  	  --__last;
  239,694 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (79,898x)
        .           	  while (true)
  399,490 ( 0.03%)  	    if (__first == __last)
1,438,164 ( 0.09%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (79,898x)
        .           	      return __first;
  774,510 ( 0.05%)  	    else if (!bool(__pred(*__last)))
4,002,032 ( 0.25%)  => /home/claudio/Documenti/Code/BagattoEngine/Engine.cpp:Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}::operator()(Move) const (77,451x)
  232,353 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (77,451x)
  154,902 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (77,451x)
        .           	      --__last;
        .           	    else
        .           	      break;
    5,724 ( 0.00%)  	  std::iter_swap(__first, __last);
  100,170 ( 0.01%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (1,431x)
    2,862 ( 0.00%)  	  ++__first;
    2,862 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (1,431x)
        .           	}
   14,970 ( 0.00%)      }
        .           
        .           #if _GLIBCXX_HOSTED
        .             // partition
        .           
        .             /// This is a helper function...
        .             /// Requires __first != __last and !__pred(__first)
        .             /// and __len == distance(__first, __last).
        .             ///
-- line 1461 ----------------------------------------
-- line 1742 ----------------------------------------
        .               }
        .           
        .             /// @cond undocumented
        .           
        .             /// This is a helper function for the sort routine.
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
3,146,094 ( 0.20%)      __unguarded_linear_insert(_RandomAccessIterator __last,
        .           			      _Compare __comp)
        .               {
        .                 typename iterator_traits<_RandomAccessIterator>::value_type
3,146,094 ( 0.20%)  	__val = _GLIBCXX_MOVE(*__last);
  443,319 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (147,773x)
  295,546 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (147,773x)
  295,546 ( 0.02%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (147,773x)
        .                 _RandomAccessIterator __next = __last;
1,747,830 ( 0.11%)        --__next;
  443,319 ( 0.03%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (147,773x)
4,028,535 ( 0.26%)        while (__comp(__val, __next))
18,979,116 ( 1.20%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>::operator()<Move, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (243,322x)
        .           	{
2,112,012 ( 0.13%)  	  *__last = _GLIBCXX_MOVE(*__next);
  286,647 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (95,549x)
  382,196 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (191,098x)
  191,098 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (95,549x)
  286,647 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (95,549x)
  176,001 ( 0.01%)  	  __last = __next;
  528,003 ( 0.03%)  	  --__next;
  286,647 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (95,549x)
        .           	}
3,495,660 ( 0.22%)        *__last = _GLIBCXX_MOVE(__val);
  443,319 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (147,773x)
  295,546 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (147,773x)
  295,546 ( 0.02%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (147,773x)
  443,319 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (147,773x)
2,796,528 ( 0.18%)      }
        .           
        .             /// This is a helper function for the sort routine.
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
1,446,320 ( 0.09%)      __insertion_sort(_RandomAccessIterator __first,
        .           		     _RandomAccessIterator __last, _Compare __comp)
        .               {
1,009,795 ( 0.06%)        if (__first == __last) return;
  276,174 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (15,343x)
        .           
4,569,935 ( 0.29%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1,200,726 ( 0.08%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (66,707x)
  180,840 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (15,070x)
  103,274 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (51,637x)
        .           	{
2,660,101 ( 0.17%)  	  if (__comp(__i, __first))
4,130,960 ( 0.26%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (51,637x)
        .           	    {
        .           	      typename iterator_traits<_RandomAccessIterator>::value_type
  560,968 ( 0.04%)  		__val = _GLIBCXX_MOVE(*__i);
   27,726 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (9,242x)
   18,484 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (9,242x)
   18,484 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (9,242x)
  490,847 ( 0.03%)  	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1,752,966 ( 0.11%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::move_backward<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (9,242x)
  110,904 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (9,242x)
  771,331 ( 0.05%)  	      *__first = _GLIBCXX_MOVE(__val);
   27,726 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (9,242x)
   18,484 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (9,242x)
   18,484 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (9,242x)
   27,726 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (9,242x)
        .           	    }
        .           	  else
2,097,372 ( 0.13%)  	    std::__unguarded_linear_insert(__i,
6,947,099 ( 0.44%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (42,395x)
  847,900 ( 0.05%)  => /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> __gnu_cxx::__ops::__val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>(__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (42,395x)
        .           				__gnu_cxx::__ops::__val_comp_iter(__comp));
        .           	}
1,157,056 ( 0.07%)      }
        .           
        .             /// This is a helper function for the sort routine.
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
       32 ( 0.00%)      __unguarded_insertion_sort(_RandomAccessIterator __first,
        .           			       _RandomAccessIterator __last, _Compare __comp)
        .               {
       56 ( 0.00%)        for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
      144 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (8x)
        8 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (4x)
       20 ( 0.00%)  	std::__unguarded_linear_insert(__i,
      588 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
       80 ( 0.00%)  => /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> __gnu_cxx::__ops::__val_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>(__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
        .           				__gnu_cxx::__ops::__val_comp_iter(__comp));
       20 ( 0.00%)      }
        .           
        .             /**
        .              *  @doctodo
        .              *  This controls some aspect of the sort routines.
        .             */
        .             enum { _S_threshold = 16 };
        .           
        .             /// This is a helper function for the sort routine.
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
  288,384 ( 0.02%)      __final_insertion_sort(_RandomAccessIterator __first,
        .           			   _RandomAccessIterator __last, _Compare __comp)
        .               {
  240,324 ( 0.02%)        if (__last - __first > int(_S_threshold))
  770,241 ( 0.05%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (40,539x)
        .           	{
       28 ( 0.00%)  	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   24,340 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
       48 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (4x)
       28 ( 0.00%)  	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
      948 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
       48 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (4x)
        .           					  __comp);
        .           	}
        .                 else
  192,240 ( 0.01%)  	std::__insertion_sort(__first, __last, __comp);
67,273,487 ( 4.27%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) (40,539x)
  192,256 ( 0.01%)      }
        .           
        .             /// This is a helper function...
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               _RandomAccessIterator
       52 ( 0.00%)      __unguarded_partition(_RandomAccessIterator __first,
        .           			  _RandomAccessIterator __last,
        .           			  _RandomAccessIterator __pivot, _Compare __comp)
        .               {
        .                 while (true)
        .           	{
      300 ( 0.00%)  	  while (__comp(__first, __pivot))
    3,608 ( 0.00%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (44x)
       48 ( 0.00%)  	    ++__first;
       48 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (24x)
        .           	  --__last;
      168 ( 0.00%)  	  while (__comp(__pivot, __last))
    2,296 ( 0.00%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (28x)
       56 ( 0.00%)  	    --__last;
       84 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (28x)
      100 ( 0.00%)  	  if (!(__first < __last))
      360 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator< <Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (20x)
        4 ( 0.00%)  	    return __first;
       48 ( 0.00%)  	  std::iter_swap(__first, __last);
    1,120 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (16x)
       32 ( 0.00%)  	  ++__first;
       32 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (16x)
        .           	}
       24 ( 0.00%)      }
        .           
        .             /// This is a helper function...
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _RandomAccessIterator
       32 ( 0.00%)      __unguarded_partition_pivot(_RandomAccessIterator __first,
        .           				_RandomAccessIterator __last, _Compare __comp)
        .               {
       44 ( 0.00%)        _RandomAccessIterator __mid = __first + (__last - __first) / 2;
       48 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (4x)
       76 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (4x)
       52 ( 0.00%)        std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
    1,064 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__move_median_to_first<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
       48 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (4x)
       52 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator-(long) const [clone .isra.0] (4x)
        .           				  __comp);
       32 ( 0.00%)        return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    8,380 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
       48 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (4x)
       24 ( 0.00%)      }
        .           
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
        .               __partial_sort(_RandomAccessIterator __first,
        .           		   _RandomAccessIterator __middle,
        .           		   _RandomAccessIterator __last,
        .           		   _Compare __comp)
-- line 1866 ----------------------------------------
-- line 1868 ----------------------------------------
        .                 std::__heap_select(__first, __middle, __last, __comp);
        .                 std::__sort_heap(__first, __middle, __comp);
        .               }
        .           
        .             /// This is a helper function for the sort routine.
        .             template<typename _RandomAccessIterator, typename _Size, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
  576,816 ( 0.04%)      __introsort_loop(_RandomAccessIterator __first,
        .           		     _RandomAccessIterator __last,
        .           		     _Size __depth_limit, _Compare __comp)
        .               {
  240,360 ( 0.02%)        while (__last - __first > int(_S_threshold))
  143,051 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (7,529x)
        .           	{
        8 ( 0.00%)  	  if (__depth_limit == 0)
        .           	    {
        .           	      std::__partial_sort(__first, __last, __last, __comp);
        .           	      return;
        .           	    }
        4 ( 0.00%)  	  --__depth_limit;
        .           	  _RandomAccessIterator __cut =
       20 ( 0.00%)  	    std::__unguarded_partition_pivot(__first, __last, __comp);
    9,900 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (4x)
       20 ( 0.00%)  	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
      172 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__introsort_loop<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>)'2 (4x)
        8 ( 0.00%)  	  __last = __cut;
        .           	}
  336,476 ( 0.02%)      }
        .           
        .             // sort
        .           
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
  343,217 ( 0.02%)      __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .           	   _Compare __comp)
        .               {
  294,186 ( 0.02%)        if (__first != __last)
  135,450 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (7,525x)
        .           	{
  240,320 ( 0.02%)  	  std::__introsort_loop(__first, __last,
  333,803 ( 0.02%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__introsort_loop<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (7,525x)
  240,320 ( 0.02%)  				std::__lg(__last - __first) * 2,
  142,975 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (7,525x)
  142,975 ( 0.01%)  => /usr/include/c++/14/bits/stl_algobase.h:long std::__lg<long>(long) (7,525x)
        .           				__comp);
  192,256 ( 0.01%)  	  std::__final_insertion_sort(__first, __last, __comp);
25,506,507 ( 1.62%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#1}>) (7,525x)
        .           	}
  245,155 ( 0.02%)      }
        .           
        .             template<typename _RandomAccessIterator, typename _Size, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
        .           		  _RandomAccessIterator __last, _Size __depth_limit,
        .           		  _Compare __comp)
        .               {
-- line 1918 ----------------------------------------
-- line 2244 ----------------------------------------
        .               }
        .           
        .             // merge
        .           
        .             /// This is a helper function for the __merge_adaptive routines.
        .             template<typename _InputIterator1, typename _InputIterator2,
        .           	   typename _OutputIterator, typename _Compare>
        .               void
  257,917 ( 0.02%)      __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
        .           			  _InputIterator2 __first2, _InputIterator2 __last2,
        .           			  _OutputIterator __result, _Compare __comp)
        .               {
  815,236 ( 0.05%)        while (__first1 != __last1 && __first2 != __last2)
1,236,996 ( 0.08%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (68,722x)
        .           	{
  579,244 ( 0.04%)  	  if (__comp(__first2, __first1))
5,125,288 ( 0.33%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) (67,438x)
        .           	    {
  272,961 ( 0.02%)  	      *__result = _GLIBCXX_MOVE(*__first2);
   48,165 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (16,055x)
   48,165 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (16,055x)
   64,220 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (32,110x)
   32,110 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (16,055x)
   41,994 ( 0.00%)  	      ++__first2;
   32,110 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (16,055x)
        .           	    }
        .           	  else
        .           	    {
  812,736 ( 0.05%)  	      *__result = _GLIBCXX_MOVE(*__first1);
  154,149 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (51,383x)
  154,149 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (51,383x)
  102,766 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (51,383x)
  102,766 ( 0.01%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (51,383x)
   67,728 ( 0.00%)  	      ++__first1;
        .           	    }
  354,900 ( 0.02%)  	  ++__result;
  134,876 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (67,438x)
        .           	}
    2,634 ( 0.00%)        if (__first1 != __last1)
    6,585 ( 0.00%)  	_GLIBCXX_MOVE3(__first1, __last1, __result);
  205,616 ( 0.01%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::move<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (1,284x)
  187,576 ( 0.01%)      }
        .           
        .             /// This is a helper function for the __merge_adaptive routines.
        .             template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
        .           	   typename _BidirectionalIterator3, typename _Compare>
        .               void
  320,021 ( 0.02%)      __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
        .           				   _BidirectionalIterator1 __last1,
        .           				   _BidirectionalIterator2 __first2,
        .           				   _BidirectionalIterator2 __last2,
        .           				   _BidirectionalIterator3 __result,
        .           				   _Compare __comp)
        .               {
  196,936 ( 0.01%)        if (__first1 == __last1)
  373,968 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (20,776x)
        .           	{
        .           	  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);
        .           	  return;
        .           	}
   49,234 ( 0.00%)        else if (__first2 == __last2)
        .           	return;
        .           
  111,995 ( 0.01%)        --__last1;
   55,674 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (18,558x)
   44,798 ( 0.00%)        --__last2;
        .                 while (true)
        .           	{
  564,096 ( 0.04%)  	  if (__comp(__last2, __last1))
5,150,368 ( 0.33%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (67,768x)
        .           	    {
  611,660 ( 0.04%)  	      *--__result = _GLIBCXX_MOVE(*__last1);
   89,418 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (29,806x)
   89,418 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (29,806x)
   89,418 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (29,806x)
  119,224 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (59,612x)
   59,612 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (29,806x)
  218,450 ( 0.01%)  	      if (__first1 == __last1)
  536,508 ( 0.03%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (29,806x)
        .           		{
   25,996 ( 0.00%)  		  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);
  737,131 ( 0.05%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::move_backward<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (4,489x)
        .           		  return;
        .           		}
  111,573 ( 0.01%)  	      --__last1;
   75,951 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (25,317x)
        .           	    }
        .           	  else
        .           	    {
  603,912 ( 0.04%)  	      *--__result = _GLIBCXX_MOVE(*__last2);
  113,886 ( 0.01%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator--() (37,962x)
  113,886 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (37,962x)
  113,886 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (37,962x)
   75,924 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (37,962x)
   75,924 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (37,962x)
  100,652 ( 0.01%)  	      if (__first2 == __last2)
        .           		return;
   68,852 ( 0.00%)  	      --__last2;
        .           	    }
        .           	}
  196,936 ( 0.01%)      }
        .           
        .             /// This is a helper function for the merge routines.
        .             template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
        .           	   typename _Distance>
        .               _BidirectionalIterator1
        .               __rotate_adaptive(_BidirectionalIterator1 __first,
        .           		      _BidirectionalIterator1 __middle,
        .           		      _BidirectionalIterator1 __last,
-- line 2323 ----------------------------------------
-- line 2351 ----------------------------------------
        .                 else
        .           	return std::rotate(__first, __middle, __last);
        .               }
        .           
        .             /// This is a helper function for the merge routines.
        .             template<typename _BidirectionalIterator, typename _Distance,
        .           	   typename _Pointer, typename _Compare>
        .               void
  480,640 ( 0.03%)      __merge_adaptive(_BidirectionalIterator __first,
        .           		     _BidirectionalIterator __middle,
        .           		     _BidirectionalIterator __last,
        .           		     _Distance __len1, _Distance __len2,
        .           		     _Pointer __buffer, _Compare __comp)
        .               {
   96,128 ( 0.01%)        if (__len1 <= __len2)
        .           	{
   94,958 ( 0.01%)  	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
  685,648 ( 0.04%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::move<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) (3,684x)
  140,682 ( 0.01%)  	  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
3,038,332 ( 0.19%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__move_merge_adaptive<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (3,684x)
        .           				     __first, __comp);
        .           	}
        .                 else
        .           	{
   98,468 ( 0.01%)  	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
  672,937 ( 0.04%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::move<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*) (3,841x)
  147,702 ( 0.01%)  	  std::__move_merge_adaptive_backward(__first, __middle, __buffer,
3,867,571 ( 0.25%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__move_merge_adaptive_backward<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (3,841x)
        .           					      __buffer_end, __last, __comp);
        .           	}
  240,320 ( 0.02%)      }
        .           
        .             template<typename _BidirectionalIterator, typename _Distance,
        .           	   typename _Pointer, typename _Compare>
        .               void
        .               __merge_adaptive_resize(_BidirectionalIterator __first,
        .           			    _BidirectionalIterator __middle,
        .           			    _BidirectionalIterator __last,
        .           			    _Distance __len1, _Distance __len2,
-- line 2385 ----------------------------------------
-- line 2599 ----------------------------------------
        .           			   __gnu_cxx::__ops::__iter_comp_iter(__comp));
        .               }
        .           
        .           
        .             /// This is a helper function for the __merge_sort_loop routines.
        .             template<typename _InputIterator, typename _OutputIterator,
        .           	   typename _Compare>
        .               _OutputIterator
      841 ( 0.00%)      __move_merge(_InputIterator __first1, _InputIterator __last1,
        .           		 _InputIterator __first2, _InputIterator __last2,
        .           		 _OutputIterator __result, _Compare __comp)
        .               {
    2,379 ( 0.00%)        while (__first1 != __last1 && __first2 != __last2)
    2,412 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (134x)
        .           	{
    1,068 ( 0.00%)  	  if (__comp(__first2, __first1))
    4,640 ( 0.00%)  => /usr/include/c++/14/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>::operator()<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (58x)
        .           	    {
      231 ( 0.00%)  	      *__result = _GLIBCXX_MOVE(*__first2);
       27 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (9x)
       27 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (9x)
       18 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (9x)
       18 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (9x)
       42 ( 0.00%)  	      ++__first2;
       18 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (9x)
        .           	    }
        .           	  else
        .           	    {
    1,727 ( 0.00%)  	      *__result = _GLIBCXX_MOVE(*__first1);
      147 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (49x)
      147 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (49x)
       98 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (49x)
       98 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (49x)
      471 ( 0.00%)  	      ++__first1;
       98 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (49x)
        .           	    }
      178 ( 0.00%)  	  ++__result;
        .           	}
      493 ( 0.00%)        return _GLIBCXX_MOVE3(__first2, __last2,
    3,780 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::move<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) (18x)
        .           			    _GLIBCXX_MOVE3(__first1, __last1,
        .           					   __result));
      464 ( 0.00%)      }
        .           
        .             template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
        .           	   typename _Distance, typename _Compare>
        .               void
      783 ( 0.00%)      __merge_sort_loop(_RandomAccessIterator1 __first,
        .           		      _RandomAccessIterator1 __last,
        .           		      _RandomAccessIterator2 __result, _Distance __step_size,
        .           		      _Compare __comp)
        .               {
       58 ( 0.00%)        const _Distance __two_step = 2 * __step_size;
        .           
      348 ( 0.00%)        while (__last - __first >= __two_step)
      171 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (9x)
        .           	{
        .           	  __result = std::__move_merge(__first, __first + __step_size,
        .           				       __first + __step_size,
        .           				       __first + __two_step,
        .           				       __result, __comp);
        .           	  __first += __two_step;
        .           	}
      319 ( 0.00%)        __step_size = std::min(_Distance(__last - __first), __step_size);
       45 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:long const& std::min<long>(long const&, long const&) (9x)
        .           
      609 ( 0.00%)        std::__move_merge(__first, __first + __step_size,
   11,945 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:Move* std::__move_merge<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) (9x)
      216 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (18x)
        .           			__first + __step_size, __last, __result, __comp);
      464 ( 0.00%)      }
        .           
        .             template<typename _RandomAccessIterator, typename _Distance,
        .           	   typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               void
1,057,408 ( 0.07%)      __chunk_insertion_sort(_RandomAccessIterator __first,
        .           			   _RandomAccessIterator __last,
        .           			   _Distance __chunk_size, _Compare __comp)
        .               {
  482,840 ( 0.03%)        while (__last - __first >= __chunk_size)
1,543,275 ( 0.10%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (81,225x)
        .           	{
    3,520 ( 0.00%)  	  std::__insertion_sort(__first, __first + __chunk_size, __comp);
  341,735 ( 0.02%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) (147x)
    1,764 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (147x)
    1,320 ( 0.00%)  	  __first += __chunk_size;
      441 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+=(long) [clone .isra.0] (147x)
        .           	}
  384,512 ( 0.02%)        std::__insertion_sort(__first, __last, __comp);
48,727,328 ( 3.09%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) (81,078x)
  576,768 ( 0.04%)      }
        .           
        .             enum { _S_chunk_size = 7 };
        .           
        .             template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
        .               void
  961,280 ( 0.06%)      __merge_sort_with_buffer(_RandomAccessIterator __first,
        .           			     _RandomAccessIterator __last,
        .           			     _Pointer __buffer, _Compare __comp)
        .               {
        .                 typedef typename iterator_traits<_RandomAccessIterator>::difference_type
        .           	_Distance;
        .           
  384,512 ( 0.02%)        const _Distance __len = __last - __first;
  285,950 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (15,050x)
   96,128 ( 0.01%)        const _Pointer __buffer_last = __buffer + __len;
        .           
       58 ( 0.00%)        _Distance __step_size = _S_chunk_size;
  384,512 ( 0.02%)        std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
18,139,184 ( 1.15%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__chunk_insertion_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) [clone .constprop.0] (15,050x)
        .           
  192,314 ( 0.01%)        while (__step_size < __len)
        .           	{
      174 ( 0.00%)  	  std::__merge_sort_loop(__first, __last, __buffer,
   27,080 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__merge_sort_loop<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (20x)
        .           				 __step_size, __comp);
       29 ( 0.00%)  	  __step_size *= 2;
      145 ( 0.00%)  	  std::__merge_sort_loop(__buffer, __buffer_last, __first,
   10,040 ( 0.00%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__merge_sort_loop<Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(Move*, Move*, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (20x)
        .           				 __step_size, __comp);
       29 ( 0.00%)  	  __step_size *= 2;
        .           	}
  672,896 ( 0.04%)      }
        .           
        .             template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
        .               void
  480,640 ( 0.03%)      __stable_sort_adaptive(_RandomAccessIterator __first,
        .           			   _RandomAccessIterator __middle,
        .           			   _RandomAccessIterator __last,
        .           			   _Pointer __buffer, _Compare __comp)
        .               {
  144,192 ( 0.01%)        std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
10,088,874 ( 0.64%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__merge_sort_with_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (7,525x)
  240,320 ( 0.02%)        std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
8,795,120 ( 0.56%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__merge_sort_with_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (7,525x)
        .           
  817,088 ( 0.05%)        std::__merge_adaptive(__first, __middle, __last,
8,467,820 ( 0.54%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__merge_adaptive<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long, long, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (7,525x)
  285,950 ( 0.02%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (15,050x)
        .           			    __middle - __first, __last - __middle,
        .           			    __buffer, __comp);
  288,384 ( 0.02%)      }
        .           
        .             template<typename _RandomAccessIterator, typename _Pointer,
        .           	   typename _Distance, typename _Compare>
        .               void
        .               __stable_sort_adaptive_resize(_RandomAccessIterator __first,
        .           				  _RandomAccessIterator __last,
        .           				  _Pointer __buffer, _Distance __buffer_size,
        .           				  _Compare __comp)
-- line 2719 ----------------------------------------
-- line 4575 ----------------------------------------
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
        .           				  _ForwardIterator>)
        .                 __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
        .           	    typename iterator_traits<_ForwardIterator>::value_type>)
        .                 __glibcxx_requires_valid_range(__first, __last);
        .           
    2,495 ( 0.00%)        return std::__partition(__first, __last, __pred,
7,920,387 ( 0.50%)  => /usr/include/c++/14/bits/stl_algo.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::__partition<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}>(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move)#2}, std::bidirectional_iterator_tag) [clone .isra.0] (2,495x)
        .           			      std::__iterator_category(__first));
        .               }
        .           
        .           
        .             /**
        .              *  @brief Sort the smallest elements of a sequence.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __first   An iterator.
-- line 4591 ----------------------------------------
-- line 4785 ----------------------------------------
        .              *  range `[__first, __last - 1)`.
        .              *
        .              *  The relative ordering of equivalent elements is not preserved, use
        .              *  `stable_sort()` if this is needed.
        .             */
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
  196,124 ( 0.01%)      sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .           	 _Compare __comp)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
        .           	    _RandomAccessIterator>)
        .                 __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
        .           	    typename iterator_traits<_RandomAccessIterator>::value_type,
        .           	    typename iterator_traits<_RandomAccessIterator>::value_type>)
        .                 __glibcxx_requires_valid_range(__first, __last);
        .                 __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
        .           
  245,155 ( 0.02%)        std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
74,159,390 ( 4.70%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>) (41,506x)
  954,638 ( 0.06%)  => /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}> __gnu_cxx::__ops::__iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#1}>(Engine::quiescence(short, short)::{lambda(Move, Move)#1}) (41,506x)
   49,031 ( 0.00%)      }
        .           
        .             template<typename _InputIterator1, typename _InputIterator2,
        .           	   typename _OutputIterator, typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               _OutputIterator
        .               __merge(_InputIterator1 __first1, _InputIterator1 __last1,
        .           	    _InputIterator2 __first2, _InputIterator2 __last2,
        .           	    _OutputIterator __result, _Compare __comp)
-- line 4814 ----------------------------------------
-- line 4926 ----------------------------------------
        .           
        .                 return _GLIBCXX_STD_A::__merge(__first1, __last1,
        .           				__first2, __last2, __result,
        .           				__gnu_cxx::__ops::__iter_comp_iter(__comp));
        .               }
        .           
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               inline void
  392,248 ( 0.02%)      __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .           		  _Compare __comp)
        .               {
        .                 typedef typename iterator_traits<_RandomAccessIterator>::value_type
        .           	_ValueType;
        .                 typedef typename iterator_traits<_RandomAccessIterator>::difference_type
        .           	_DistanceType;
        .           
  294,186 ( 0.02%)        if (__first == __last)
  747,108 ( 0.05%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator==<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (41,506x)
        .           	return;
        .           
        .           #if _GLIBCXX_HOSTED
        .                 typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
        .                 // __stable_sort_adaptive sorts the range in two halves,
        .                 // so the buffer only needs to fit half the range at once.
  624,832 ( 0.04%)        _TmpBuf __buf(__first, (__last - __first + 1) / 2);
11,306,865 ( 0.72%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::_Temporary_buffer(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, long) (40,539x)
  770,241 ( 0.05%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::difference_type __gnu_cxx::operator-<Move*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > const&) (40,539x)
        .           
  384,512 ( 0.02%)        if (__builtin_expect(__buf.requested_size() == __buf.size(), true))
   81,078 ( 0.01%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::requested_size() const [clone .isra.0] (40,539x)
   81,078 ( 0.01%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::size() const [clone .isra.0] (40,539x)
  576,768 ( 0.04%)  	std::__stable_sort_adaptive(__first,
87,074,768 ( 5.52%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__stable_sort_adaptive<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move*, __gnu_cxx::__ops::_Iter_comp_iter<Engine::quiescence(short, short)::{lambda(Move, Move)#2}>) (40,539x)
  486,468 ( 0.03%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::operator+(long) const [clone .isra.0] (40,539x)
   81,078 ( 0.01%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::begin() [clone .isra.0] (40,539x)
        .           				    __first + _DistanceType(__buf.size()),
        .           				    __last, __buf.begin(), __comp);
        .                 else if (__builtin_expect(__buf.begin() == 0, false))
        .           	std::__inplace_stable_sort(__first, __last, __comp);
        .                 else
        .           	std::__stable_sort_adaptive_resize(__first, __last, __buf.begin(),
        .           					   _DistanceType(__buf.size()), __comp);
        .           #else
        .                 std::__inplace_stable_sort(__first, __last, __comp);
        .           #endif
  390,314 ( 0.02%)      }
3,510,829 ( 0.22%)  => /usr/include/c++/14/bits/stl_tempbuf.h:std::_Temporary_buffer<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, Move>::~_Temporary_buffer() (40,539x)
        .           
        .             /**
        .              *  @brief Sort the elements of a sequence, preserving the relative order
        .              *         of equivalent elements.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __first   An iterator.
        .              *  @param  __last    Another iterator.
        .              *  @return  Nothing.
-- line 4971 ----------------------------------------
-- line 5010 ----------------------------------------
        .              *
        .              *  The relative ordering of equivalent elements is preserved, so any two
        .              *  elements @p x and @p y in the range @p [__first,__last) such that
        .              *  @p __comp(x,y) is false and @p __comp(y,x) is false will have the same
        .              *  relative ordering after calling @p stable_sort().
        .             */
        .             template<typename _RandomAccessIterator, typename _Compare>
        .               inline void
  196,124 ( 0.01%)      stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
        .           		_Compare __comp)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
        .           	    _RandomAccessIterator>)
        .                 __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
        .           	    typename iterator_traits<_RandomAccessIterator>::value_type,
        .           	    typename iterator_traits<_RandomAccessIterator>::value_type>)
        .                 __glibcxx_requires_valid_range(__first, __last);
        .                 __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
        .           
  245,155 ( 0.02%)        _GLIBCXX_STD_A::__stable_sort(__first, __last,
31,964,145 ( 2.03%)  => /usr/include/c++/14/bits/stl_algo.h:void std::__stable_sort<__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> >(__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>) (7,525x)
  173,075 ( 0.01%)  => /usr/include/c++/14/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}> __gnu_cxx::__ops::__iter_comp_iter<Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}>(Engine::alphaBeta(int, short, short, std::vector<Move, std::allocator<Move> >&)::{lambda(Move, Move)#2}) (7,525x)
        .           				    __gnu_cxx::__ops::__iter_comp_iter(__comp));
   49,031 ( 0.00%)      }
        .           
        .             template<typename _InputIterator1, typename _InputIterator2,
        .           	   typename _OutputIterator,
        .           	   typename _Compare>
        .               _GLIBCXX20_CONSTEXPR
        .               _OutputIterator
        .               __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
        .           		_InputIterator2 __first2, _InputIterator2 __last2,
-- line 5040 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: MoveGenerator.hpp
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           
      .           #include "Move.hpp"
      .           #include "MagicBitboards.hpp"
      .           #include "Board.hpp"
      .           #include "notation.hpp"
      .           
      .           class MoveGenerator{
      .           public:
      6 ( 0.00%)      MoveGenerator() : mLookup{MagicBitboards::getInstance()} {};
17,937,564 ( 1.14%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.cpp:MagicBitboards::getInstance() (1x)
      .           
      .               /**
      .                * @brief Generates all pseudo-legal moves
      .                *
      .                * @param tBoard The position from wich moves are computed
      .                * @param outList Reference to a vector to wich the moves will be appended
      .                * @return Nothing
      .                */
-- line 21 ----------------------------------------
-- line 25 ----------------------------------------
      .           
      .               /**
      .                * @brief Generates only pseudo-legal captures
      .                * 
      .                * @param tBoard The position from wich moves are computed
      .                * @param outList Reference to a vector to wich the moves will be appended
      .                * @return Nothing
      .                */
294,186 ( 0.02%)      inline void captures(const Board& tBoard, std::vector<Move>& outList) const {
343,217 ( 0.02%)          uint64_t enemySet = tBoard.getBitboard(1 - tBoard.getSideToMove());
1,961,240 ( 0.12%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (49,031x)
392,248 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (49,031x)
196,124 ( 0.01%)          generate(enemySet, tBoard, outList);
139,140,683 ( 8.83%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.cpp:MoveGenerator::generate(unsigned long, Board const&, std::vector<Move, std::allocator<Move> >&) const (49,031x)
147,093 ( 0.01%)      }
      .           
      .               /**
      .                * @brief Generates only pseudo-legal quiet moves
      .                * 
      .                * @param tBoard The position from wich moves are computed
      .                * @param outList Reference to a vector to wich the moves will be appended
      .                * @return Nothing
      .                */
 19,960 ( 0.00%)      inline void quiets(const Board& tBoard, std::vector<Move>& outList) const {
 24,950 ( 0.00%)          uint64_t emptySet = ~(tBoard.getBitboard(white) | tBoard.getBitboard(black));
 39,920 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (4,990x)
  9,980 ( 0.00%)          generate(emptySet, tBoard, outList);
11,176,398 ( 0.71%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.cpp:MoveGenerator::generate(unsigned long, Board const&, std::vector<Move, std::allocator<Move> >&) const (2,495x)
 12,475 ( 0.00%)      }
      .           
      .               /**
      .                * @brief Generates pseudo-legal moves that COULD get the king out of check
      .                * 
      .                * @param tBoard The position from wich moves are computed
      .                * @param outList Reference to a vector to wich the moves will be appended
      .                * @return Nothing
      .                */
 72,920 ( 0.00%)      inline void evasions(const Board& tBoard, std::vector<Move> &outList) const{
 43,752 ( 0.00%)          int kingSquare = tBoard.getKingSquare(tBoard.getSideToMove());
320,848 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getKingSquare(int) const (7,292x)
291,680 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (7,292x)
 58,336 ( 0.00%)          uint64_t occupied = tBoard.getBitboard(white) | tBoard.getBitboard(black);
116,672 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getBitboard(int) const (14,584x)
 94,796 ( 0.01%)          uint64_t target = mLookup.getAttacks(queen, kingSquare, occupied) | mLookup.getAttacks(knight, kingSquare, occupied);
437,520 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/MagicBitboards.hpp:MagicBitboards::getAttacks(int, int, unsigned long) const (14,584x)
 29,168 ( 0.00%)          generate(target, tBoard, outList);        
20,507,261 ( 1.30%)  => /home/claudio/Documenti/Code/BagattoEngine/MoveGenerator.cpp:MoveGenerator::generate(unsigned long, Board const&, std::vector<Move, std::allocator<Move> >&) const (7,292x)
 51,044 ( 0.00%)      }
      .           
      .               /**
      .                * @brief Checks if a square is attacked
      .                * 
      .                * @param tBoard The position to reference
      .                * @param tSquare The square in question
      .                * @param tSide Player color that's attacking
      .                * @return true if the square is under attack, false otherwise
-- line 70 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .                 struct _Vector_impl_data
         .                 {
         .           	pointer _M_start;
         .           	pointer _M_finish;
         .           	pointer _M_end_of_storage;
         .           
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   501,162 ( 0.03%)  	: _M_start(), _M_finish(), _M_end_of_storage()
   167,054 ( 0.01%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
         .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
         .           	  _M_end_of_storage(__x._M_end_of_storage)
         .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
         .           #endif
-- line 108 ----------------------------------------
-- line 133 ----------------------------------------
         .           	: public _Tp_alloc_type, public _Vector_impl_data
         .                 {
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
         .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
         .           #if __cpp_lib_concepts
         .           	requires is_default_constructible_v<_Tp_alloc_type>
         .           #endif
   158,171 ( 0.01%)  	: _Tp_alloc_type()
         4 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_Vector_impl_data::_Vector_impl_data() (1x)
         .           	{ }
         .           
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
     8,883 ( 0.00%)  	: _Tp_alloc_type(__a)
    35,532 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_Vector_impl_data::_Vector_impl_data() (8,883x)
         .           	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	// Not defaulted, to enforce noexcept(true) even when
         .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl(_Vector_impl&& __x) noexcept
         .           	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
-- line 154 ----------------------------------------
-- line 306 ----------------------------------------
         .                 { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 allocator_type
         .                 get_allocator() const _GLIBCXX_NOEXCEPT
         .                 { return allocator_type(_M_get_Tp_allocator()); }
         .           
         .           #if __cplusplus >= 201103L
   158,171 ( 0.01%)        _Vector_base() = default;
   790,835 ( 0.05%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_Vector_impl::_Vector_impl() (158,167x)
         .           #else
         .                 _Vector_base() { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
         .                 : _M_impl(__a) { }
         .           
-- line 322 ----------------------------------------
-- line 324 ----------------------------------------
         .           #if !_GLIBCXX_INLINE_VERSION
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(size_t __n)
         .                 : _M_impl()
         .                 { _M_create_storage(__n); }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
    53,298 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
     8,883 ( 0.00%)        : _M_impl(__a)
    44,415 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_Vector_impl::_Vector_impl(std::allocator<Move> const&) (8,883x)
    62,181 ( 0.00%)        { _M_create_storage(__n); }
   675,111 ( 0.04%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_create_storage(unsigned long) (8,883x)
         .           
         .           #if __cplusplus >= 201103L
         .                 _Vector_base(_Vector_base&&) = default;
         .           
         .                 // Kept for ABI compatibility.
         .           # if !_GLIBCXX_INLINE_VERSION
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
-- line 342 ----------------------------------------
-- line 360 ----------------------------------------
         .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
         .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
         .                 { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 ~_Vector_base() _GLIBCXX_NOEXCEPT
         .                 {
   334,108 ( 0.02%)  	_M_deallocate(_M_impl._M_start,
       162 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long) [clone .isra.0] (2x)
   668,216 ( 0.04%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
         .                 }
         .           
         .               public:
         .                 _Vector_impl _M_impl;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 pointer
         .                 _M_allocate(size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
   334,736 ( 0.02%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
         .                 }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_deallocate(pointer __p, size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
   650,458 ( 0.04%)  	if (__p)
         .           	  _Tr::deallocate(_M_impl, __p, __n);
   158,167 ( 0.01%)        }
         .           
         .               protected:
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
    44,415 ( 0.00%)        _M_create_storage(size_t __n)
         .                 {
    44,415 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
   532,983 ( 0.03%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_allocate(unsigned long) [clone .isra.0] (8,883x)
         .           	this->_M_impl._M_finish = this->_M_impl._M_start;
    17,766 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    35,532 ( 0.00%)        }
         .               };
         .           
         .             /**
         .              *  @brief A standard container which offers fixed time access to
         .              *  individual elements in any order.
         .              *
         .              *  @ingroup sequences
         .              *  @headerfile vector
-- line 409 ----------------------------------------
-- line 501 ----------------------------------------
         .                 { return __result; }
         .           
         .                 static _GLIBCXX20_CONSTEXPR pointer
         .                 _S_relocate(pointer __first, pointer __last, pointer __result,
         .           		  _Tp_alloc_type& __alloc) noexcept
         .                 {
         .           #if __cpp_if_constexpr
         .           	// All callers have already checked _S_use_relocate() so just do it.
        11 ( 0.00%)  	return std::__relocate_a(__first, __last, __result, __alloc);
       140 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:unsigned long* std::__relocate_a<unsigned long*, unsigned long*, std::allocator<unsigned long> >(unsigned long*, unsigned long*, unsigned long*, std::allocator<unsigned long>&) [clone .isra.0] (3x)
         .           #else
         .           	using __do_it = __bool_constant<_S_use_relocate()>;
         .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
         .           #endif
         .                 }
         .           #endif // C++11
         .           
         .               protected:
-- line 517 ----------------------------------------
-- line 523 ----------------------------------------
         .               public:
         .                 // [23.2.4.1] construct/copy/destroy
         .                 // (assign() and get_allocator() are also listed in this section)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  */
         .           #if __cplusplus >= 201103L
   158,171 ( 0.01%)        vector() = default;
         6 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_Vector_base() (1x)
         .           #else
         .                 vector() { }
         .           #endif
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  *  @param  __a  An allocator object.
         .                  */
-- line 539 ----------------------------------------
-- line 548 ----------------------------------------
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n default
         .                  *  constructed elements.
         .                  */
         .                 explicit
         .                 _GLIBCXX20_CONSTEXPR
    53,298 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
    53,298 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
   843,888 ( 0.05%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_Vector_base(unsigned long, std::allocator<Move> const&) (8,883x)
   204,309 ( 0.01%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::_S_check_init_len(unsigned long, std::allocator<Move> const&) [clone .isra.0] (8,883x)
    53,298 ( 0.00%)        { _M_default_initialize(__n); }
   474,121 ( 0.03%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::_M_default_initialize(unsigned long) (8,883x)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with copies of an exemplar element.
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __value  An element to copy.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 566 ----------------------------------------
-- line 730 ----------------------------------------
         .                  *  responsibility.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 ~vector() _GLIBCXX_NOEXCEPT
         .                 {
         .           	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         .           		      _M_get_Tp_allocator());
         .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
   167,054 ( 0.01%)        }
15,644,813 ( 0.99%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::~_Vector_base() (167,050x)
         .           
         .                 /**
         .                  *  @brief  %Vector assignment operator.
         .                  *  @param  __x  A %vector of identical element and allocator types.
         .                  *
         .                  *  All the elements of @a __x are copied, but any unused capacity in
         .                  *  @a __x will not be copied.
         .                  *
-- line 746 ----------------------------------------
-- line 865 ----------------------------------------
         .                 // iterators
         .                 /**
         .                  *  Returns a read/write iterator that points to the first
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
   332,246 ( 0.02%)        begin() _GLIBCXX_NOEXCEPT
   830,615 ( 0.05%)        { return iterator(this->_M_impl._M_start); }
         6 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >::__normal_iterator(unsigned long* const&) (2x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points to the
         .                  *  first element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
    12,948 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
    32,370 ( 0.00%)        { return const_iterator(this->_M_impl._M_start); }
    19,422 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::__normal_iterator(Move const* const&) (6,474x)
         .           
         .                 /**
         .                  *  Returns a read/write iterator that points one past the last
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
 1,329,323 ( 0.08%)        end() _GLIBCXX_NOEXCEPT
 7,975,938 ( 0.51%)        { return iterator(this->_M_impl._M_finish); }
   479,034 ( 0.03%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >::__normal_iterator(Move* const&) (159,678x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points one past
         .                  *  the last element in the %vector.  Iteration is done in
         .                  *  ordinary element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
 5,535,742 ( 0.35%)        end() const _GLIBCXX_NOEXCEPT
33,214,452 ( 2.11%)        { return const_iterator(this->_M_impl._M_finish); }
16,587,864 ( 1.05%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&) (5,529,288x)
         .           
         .                 /**
         .                  *  Returns a read/write reverse iterator that points to the
         .                  *  last element in the %vector.  Iteration is done in reverse
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reverse_iterator
-- line 912 ----------------------------------------
-- line 966 ----------------------------------------
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reverse iterator that points
         .                  *  to the last element in the %vector.  Iteration is done in
         .                  *  reverse element order.
         .                  */
         .                 [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
         .                 const_reverse_iterator
        15 ( 0.00%)        crbegin() const noexcept
        35 ( 0.00%)        { return const_reverse_iterator(end()); }
        50 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() const (5x)
        10 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >) (5x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reverse iterator that points
         .                  *  to one before the first element in the %vector.  Iteration
         .                  *  is done in reverse element order.
         .                  */
         .                 [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
         .                 const_reverse_iterator
        75 ( 0.00%)        crend() const noexcept
       175 ( 0.00%)        { return const_reverse_iterator(begin()); }
       250 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() const (25x)
        50 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >) (25x)
         .           #endif
         .           
         .                 // [23.2.4.2] capacity
         .                 /**  Returns the number of elements in the %vector.  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
         .                 size() const _GLIBCXX_NOEXCEPT
 1,057,768 ( 0.07%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
         .           
         .                 /**  Returns the size() of the largest possible %vector.  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
         .                 max_size() const _GLIBCXX_NOEXCEPT
   158,786 ( 0.01%)        { return _S_max_size(_M_get_Tp_allocator()); }
        90 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::_S_max_size(std::allocator<unsigned long> const&) [clone .isra.0] (6x)
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
         .                  *  %vector's current size the %vector is truncated, otherwise
         .                  *  default constructed elements are appended.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         8 ( 0.00%)        resize(size_type __new_size)
         .                 {
         8 ( 0.00%)  	if (__new_size > size())
         4 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::size() const [clone .isra.0] (1x)
         8 ( 0.00%)  	  _M_default_append(__new_size - size());
     1,842 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<std::array<Move, 2ul>, std::allocator<std::array<Move, 2ul> > >::_M_default_append(unsigned long) (1x)
         .           	else if (__new_size < size())
         .           	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
         2 ( 0.00%)        }
         .           
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *  @param  __x  Data with which new elements should be populated.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
-- line 1027 ----------------------------------------
-- line 1073 ----------------------------------------
         .                  *  Returns the total number of elements that the %vector can
         .                  *  hold before needing to allocate more memory.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
         .                 capacity() const _GLIBCXX_NOEXCEPT
         .                 {
         .           	return size_type(this->_M_impl._M_end_of_storage
   493,860 ( 0.03%)  			   - this->_M_impl._M_start);
   164,620 ( 0.01%)        }
         .           
         .                 /**
         .                  *  Returns true if the %vector is empty.  (Thus begin() would
         .                  *  equal end().)
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 bool
         .                 empty() const _GLIBCXX_NOEXCEPT
-- line 1090 ----------------------------------------
-- line 1123 ----------------------------------------
         .                  *  out_of_range lookups are not defined. (For checked lookups
         .                  *  see at().)
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
         .                 operator[](size_type __n) _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_subscript(__n);
   161,541 ( 0.01%)  	return *(this->_M_impl._M_start + __n);
   161,541 ( 0.01%)        }
         .           
         .                 /**
         .                  *  @brief  Subscript access to the data contained in the %vector.
         .                  *  @param __n The index of the element for which data should be
         .                  *  accessed.
         .                  *  @return  Read-only (constant) reference to data.
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
-- line 1140 ----------------------------------------
-- line 1227 ----------------------------------------
         .                 }
         .           
         .                 /**
         .                  *  Returns a read/write reference to the data at the last
         .                  *  element of the %vector.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
 1,169,640 ( 0.07%)        back() _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
 7,017,840 ( 0.45%)  	return *(end() - 1);
15,205,255 ( 0.96%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const [clone .isra.0] (1,169,635x)
11,696,350 ( 0.74%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::end() (1,169,635x)
 2,339,270 ( 0.15%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const [clone .isra.0] (1,169,635x)
 1,169,640 ( 0.07%)        }
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reference to the data at the
         .                  *  last element of the %vector.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reference
 5,529,288 ( 0.35%)        back() const _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
33,175,728 ( 2.10%)  	return *(end() - 1);
71,880,744 ( 4.56%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const [clone .isra.0] (5,529,288x)
55,292,880 ( 3.51%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::end() const (5,529,288x)
11,058,576 ( 0.70%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const [clone .isra.0] (5,529,288x)
 5,529,288 ( 0.35%)        }
         .           
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // DR 464. Suggestion for new member functions in standard containers.
         .                 // data access
         .                 /**
         .                  *   Returns a pointer such that [data(), data() + size()) is a valid
         .                  *   range.  For a non-empty %vector, data() == &front().
         .                  */
-- line 1259 ----------------------------------------
-- line 1319 ----------------------------------------
         .                  *  data is needed, it should be retrieved before pop_back() is
         .                  *  called.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 pop_back() _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
   419,799 ( 0.03%)  	--this->_M_impl._M_finish;
         .           	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
         .           	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
   419,799 ( 0.03%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  Inserts an object in %vector before specified iterator.
         .                  *  @param  __position  A const_iterator into the %vector.
         .                  *  @param  __args  Arguments.
         .                  *  @return  An iterator that points to the inserted data.
         .                  *
-- line 1338 ----------------------------------------
-- line 1610 ----------------------------------------
         .               protected:
         .                 /**
         .                  *  Memory expansion handler.  Uses the member allocation function to
         .                  *  obtain @a n bytes of memory, and then copies [first,last) into it.
         .                  */
         .                 template<typename _ForwardIterator>
         .           	_GLIBCXX20_CONSTEXPR
         .           	pointer
 1,265,400 ( 0.08%)  	_M_allocate_and_copy(size_type __n,
         .           			     _ForwardIterator __first, _ForwardIterator __last)
         .           	{
   474,525 ( 0.03%)  	  pointer __result = this->_M_allocate(__n);
10,589,462 ( 0.67%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_allocate(unsigned long) [clone .isra.0] (158,166x)
         .           	  __try
         .           	    {
   632,700 ( 0.04%)  	      std::__uninitialized_copy_a(__first, __last, __result,
   948,996 ( 0.06%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__uninitialized_copy_a<Move const*, Move*, Move>(Move const*, Move const*, Move*, std::allocator<Move>&) [clone .isra.0] (158,166x)
         .           					  _M_get_Tp_allocator());
         .           	      return __result;
         .           	    }
         .           	  __catch(...)
         .           	    {
         .           	      _M_deallocate(__result, __n);
         .           	      __throw_exception_again;
         .           	    }
 1,107,225 ( 0.07%)  	}
         .           
         .           
         .                 // Internal constructor functions follow.
         .           
         .                 // Called by the range constructor to implement [23.1.1]/9
         .           
         .           #if __cplusplus < 201103L
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1641 ----------------------------------------
-- line 1709 ----------------------------------------
         .           	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
         .           					_M_get_Tp_allocator());
         .                 }
         .           
         .           #if __cplusplus >= 201103L
         .                 // Called by the vector(n) constructor.
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
    17,766 ( 0.00%)        _M_default_initialize(size_type __n)
         .                 {
     8,883 ( 0.00%)  	this->_M_impl._M_finish =
    17,766 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   411,940 ( 0.03%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__uninitialized_default_n_a<Move*, unsigned long, Move>(Move*, unsigned long, std::allocator<Move>&) [clone .isra.0] (8,883x)
         .           					   _M_get_Tp_allocator());
    17,766 ( 0.00%)        }
         .           #endif
         .           
         .                 // Internal assign functions follow.  The *_aux functions do the actual
         .                 // assignment work for the range versions.
         .           
         .                 // Called by the range assign to implement [23.1.1]/9
         .           
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1730 ----------------------------------------
-- line 1898 ----------------------------------------
         .                 iterator
         .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
         .                 { return _M_insert_rval(__position, std::move(__v)); }
         .           #endif
         .           
         .                 // Called by _M_fill_insert, _M_insert_aux etc.
         .                 _GLIBCXX20_CONSTEXPR
         .                 size_type
     2,170 ( 0.00%)        _M_check_len(size_type __n, const char* __s) const
         .                 {
     2,480 ( 0.00%)  	if (max_size() - size() < __n)
       128 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const (8x)
        32 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::size() const [clone .isra.0] (8x)
         .           	  __throw_length_error(__N(__s));
         .           
     1,860 ( 0.00%)  	const size_type __len = size() + (std::max)(size(), __n);
        40 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (8x)
     2,480 ( 0.00%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
       128 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const (8x)
     1,550 ( 0.00%)        }
         .           
         .                 // Called by constructors to check initial size.
         .                 static _GLIBCXX20_CONSTEXPR size_type
    17,766 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
         .                 {
    26,649 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   133,245 ( 0.01%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::_S_max_size(std::allocator<Move> const&) [clone .isra.0] (8,883x)
         .           	  __throw_length_error(
         .           	      __N("cannot create std::vector larger than max_size()"));
         .           	return __n;
    26,649 ( 0.00%)        }
         .           
         .                 static _GLIBCXX20_CONSTEXPR size_type
   167,669 ( 0.01%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
         .                 {
         .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
         .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
         .           	// (even if std::allocator_traits::max_size says we can).
   335,338 ( 0.02%)  	const size_t __diffmax
         .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
   167,669 ( 0.01%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
   670,676 ( 0.04%)  	return (std::min)(__diffmax, __allocmax);
        30 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (6x)
   335,338 ( 0.02%)        }
         .           
         .                 // Internal erase functions follow.
         .           
         .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         .                 // _M_assign_aux.
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1943 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Move.cpp
--------------------------------------------------------------------------------
Ir                  

         .           #include "Move.hpp"
         .           #include <array>
         .           
         .           Move::Move(const Move &tOther)
         .           {
11,748,224 ( 0.75%)      mMove = tOther.mMove;
 5,874,112 ( 0.37%)  }
         .           
         .           Move::Move(int tFrom, int tTo, int tFlag)
         .           {
 3,365,208 ( 0.21%)      mMove = (tFlag & 0x0f) << 12 | (tFrom & 0x3f) << 6 | (tTo & 0x3f);
   480,744 ( 0.03%)  }
         .           
         .           void Move::operator=(Move tOther)
         .           {
 2,370,070 ( 0.15%)      mMove = tOther.mMove;
 1,185,035 ( 0.08%)  }
         .           
         .           std::string Move::asString() const
       180 ( 0.00%)  {
        72 ( 0.00%)      std::string output;
       216 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() (36x)
         .           
         .               static constexpr std::array<const char*, 64> squares = {
         .                   "a1","b1","c1","d1","e1","f1","g1","h1",
         .                   "a2","b2","c2","d2","e2","f2","g2","h2",
         .                   "a3","b3","c3","d3","e3","f3","g3","h3",
         .                   "a4","b4","c4","d4","e4","f4","g4","h4",
         .                   "a5","b5","c5","d5","e5","f5","g5","h5",
         .                   "a6","b6","c6","d6","e6","f6","g6","h6",
-- line 29 ----------------------------------------
-- line 30 ----------------------------------------
         .                   "a7","b7","c7","d7","e7","f7","g7","h7",
         .                   "a8","b8","c8","d8","e8","f8","g8","h8"
         .               };
         .               
         .               static constexpr std::array<char, 8> pieces{
         .                   ' ',' ','p','n','b','r','q','k'
         .               };
         .           
       364 ( 0.00%)      output += squares[from()];
     2,988 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*) (36x)
     1,093 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
        72 ( 0.00%)  => /usr/include/c++/14/array:std::array<char const*, 64ul>::operator[](unsigned long) const (36x)
       144 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (36x)
       324 ( 0.00%)      output += squares[to()];
     2,988 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*) (36x)
        72 ( 0.00%)  => /usr/include/c++/14/array:std::array<char const*, 64ul>::operator[](unsigned long) const (36x)
       108 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (36x)
       180 ( 0.00%)      if (isPromo()) output += pieces[promoPiece()];
       252 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isPromo() const [clone .isra.0] (36x)
         .           
         .               return output;
       180 ( 0.00%)  }
         .           
         .           bool operator==(const Move &tThis, const Move &tOther)
         .           {
   484,161 ( 0.03%)      return tThis.mMove == tOther.mMove;
   161,387 ( 0.01%)  }
         .           
         .           bool operator!=(const Move &tThis, const Move &tOther)
         .           {
       138 ( 0.00%)      return tThis.mMove != tOther.mMove;
        46 ( 0.00%)  }
         .           
         .           std::ostream &operator<<(std::ostream &os, const Move &cm)
        64 ( 0.00%)  {
        48 ( 0.00%)      std::string output = cm.asString();
     3,616 ( 0.00%)  => Move.cpp:Move::asString[abi:cxx11]() const (16x)
        68 ( 0.00%)      os << output;
     3,856 ( 0.00%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (16x)
     1,405 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
         .           
         .               return os;
       128 ( 0.00%)  }
        96 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (16x)

--------------------------------------------------------------------------------
-- Auto-annotated source: Board.hpp
--------------------------------------------------------------------------------
Ir                  

-- line 3 ----------------------------------------
         .           #include <cstdint>
         .           #include <string>
         .           #include <vector>
         .           #include <array>
         .           #include "Move.hpp"
         .           #include "Zobrist.hpp"
         .           #include <cassert>
         .           
         4 ( 0.00%)  class Board
       176 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::~vector() (2x)
         .           {
         .           public:
         .               Board(): mZobrist{Zobrist::getInstance()}{}
         .               Board(std::string tFEN);
         .               Board(const Board&);
         .               Board& operator= (const Board&);
         .               bool operator==(const Board&) const;
         .               bool operator!=(const Board&) const;
         .               inline friend std::ostream& operator<< (std::ostream& os, const Board& cb) {return os << cb.asString();}
         .               std::string asString() const;
         .               
         .               
76,716,810 ( 4.87%)      inline uint64_t getBitboard(int tPiece) const {return mBitboards[tPiece];}   
25,572,270 ( 1.62%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) const (12,786,135x)
         .           
12,218,031 ( 0.78%)      inline int  getSideToMove() const           {return mStateHist.back() & 0x1;}
57,599,289 ( 3.65%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (1,745,433x)
 9,971,824 ( 0.63%)      inline int  getCastles() const              {return (mStateHist.back() >> 1) & 0xf;}
41,133,774 ( 2.61%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (1,246,478x)
   588,180 ( 0.04%)      inline bool getShortCastle (int tSide)const {return (mStateHist.back() >> (tSide + 1)) & 0x1;}
 1,940,994 ( 0.12%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (58,818x)
   588,180 ( 0.04%)      inline bool getLongCastle (int tSide) const {return (mStateHist.back() >> (tSide + 3)) & 0x1;}
 1,940,994 ( 0.12%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (58,818x)
10,442,352 ( 0.66%)      inline bool getEpState() const              {return (mStateHist.back() >> 5) & 0x01;}
43,074,702 ( 2.73%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (1,305,294x)
   131,562 ( 0.01%)      inline int  getEpSquare() const             {return ((mStateHist.back() >> 6) & 0xf) + 24;}
   482,394 ( 0.03%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (14,618x)
 3,573,448 ( 0.23%)      inline int  getCaptured() const             {return (mStateHist.back() >> 10) & 0x7;}
14,740,473 ( 0.94%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (446,681x)
 5,137,627 ( 0.33%)      inline int  getKingSquare (int tSide) const {return (mStateHist.back() >> (13 + 6 * tSide)) & 0x3f;}
15,412,881 ( 0.98%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (467,057x)
 1,302,630 ( 0.08%)      inline int  getHMC() const                  {return (mStateHist.back() >> 25) & 0x7f;} 
 6,140,970 ( 0.39%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (186,090x)
         .               inline int  getFMC() const                  {return (mStateHist.size() / 2);}
         .           
   235,352 ( 0.01%)      inline uint64_t getHash() const {return mKey;}
         .           
         .               void makeMove(const Move &tMove);
         .               void undoMove(const Move &tMove);
         .           
22,343,867 ( 1.42%)      inline int searchPiece(int tSquare) const {return mPieceSquare[tSquare];}
 6,383,962 ( 0.40%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) const (3,191,981x)
         .           
         .           private:
         .               void updateBitboards(int tActiveColor, int tPiece, int tCaptured, Move tMove);
         .               void updateState(int tPiece, int tCaptured, Move tMove);
         .               void forgetState();
         .           
 3,427,809 ( 0.22%)      inline void toggleSideToMove()              {mStateHist.back() ^= 0x01; mKey ^= mZobrist.getSTMKey();}
10,283,427 ( 0.65%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (311,619x)
   623,238 ( 0.04%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getSTMKey() const [clone .isra.0] (311,619x)
         .               inline void removeShortCastle (int tSide)   {mStateHist.back() &= ~(0x1 << (tSide + 1));}
         .               inline void removeLongCastle (int tSide)    {mStateHist.back() &= ~(0x1 << (tSide + 3));}
   129,010 ( 0.01%)      inline void setEpSquare (int tSquare )      {mStateHist.back() |= (1 << 5) | ((tSquare % 24)  << 6);}
   224,070 ( 0.01%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (6,790x)
 1,091,776 ( 0.07%)      inline void setCaptured (int tPiece)        {mStateHist.back() |= tPiece << 10;}
 4,503,576 ( 0.29%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (136,472x)
   457,530 ( 0.03%)      inline void setKingSquare (int tSide, int tSquare) {
   732,048 ( 0.05%)                                                  mStateHist.back() &= ~(0x3f << (13 + 6 * tSide));
 3,019,698 ( 0.19%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (91,506x)
   274,518 ( 0.02%)                                                  mStateHist.back() |= tSquare  << (13 + 6 * tSide);
   366,024 ( 0.02%)                                              }
   923,742 ( 0.06%)      inline void incrementHMC()                  {mStateHist.back() += 0x1 << 25;}
 5,080,581 ( 0.32%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (153,957x)
   945,972 ( 0.06%)      inline void resetHMC()                      {mStateHist.back() &= ~(0x7f << 25);}
 5,202,846 ( 0.33%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (157,662x)
         .           
         .           private:
         .               std::array<uint64_t, 8> mBitboards;
         .               std::array<int, 64> mPieceSquare;
         .               std::vector<uint32_t> mStateHist;
         .               uint64_t mKey = 0ULL;
         .           
         .               const Zobrist& mZobrist;
-- line 67 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir               

-- line 105 ----------------------------------------
      .           // should be too.
      .           # define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
      .               __is_trivial(T) && __is_assignable(T&, U)
      .           #endif
      .           
      .             template<typename _InputIterator, typename _ForwardIterator>
      .               _GLIBCXX20_CONSTEXPR
      .               _ForwardIterator
  1,331 ( 0.00%)      __do_uninit_copy(_InputIterator __first, _InputIterator __last,
      .           		     _ForwardIterator __result)
      .               {
      .                 _ForwardIterator __cur = __result;
      .                 __try
      .           	{
321,533 ( 0.02%)  	  for (; __first != __last; ++__first, (void)++__cur)
    918 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<Move const*, std::vector<Move, std::allocator<Move> > >(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > const&, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > const&) (51x)
     84 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator++() [clone .isra.0] (42x)
  4,111 ( 0.00%)  	    std::_Construct(std::__addressof(*__cur), *__first);
    672 ( 0.00%)  => /usr/include/c++/14/bits/stl_construct.h:void std::_Construct<Move, Move const&>(Move*, Move const&) (42x)
     84 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >::operator*() const [clone .isra.0] (42x)
     84 ( 0.00%)  => /usr/include/c++/14/bits/move.h:Move* std::__addressof<Move>(Move&) (42x)
      .           	  return __cur;
      .           	}
      .                 __catch(...)
      .           	{
      .           	  std::_Destroy(__result, __cur);
      .           	  __throw_exception_again;
      .           	}
159,731 ( 0.01%)      }
      .           
      .             template<bool _TrivialValueTypes>
      .               struct __uninitialized_copy
      .               {
      .                 template<typename _InputIterator, typename _ForwardIterator>
      .                   static _ForwardIterator
      .                   __uninit_copy(_InputIterator __first, _InputIterator __last,
      .           		      _ForwardIterator __result)
158,479 ( 0.01%)  	{ return std::__do_uninit_copy(__first, __last, __result); }
      3 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:std::array<Move, 2ul>* std::__do_uninit_copy<std::array<Move, 2ul> const*, std::array<Move, 2ul>*>(std::array<Move, 2ul> const*, std::array<Move, 2ul> const*, std::array<Move, 2ul>*) [clone .isra.0] (1x)
      .               };
      .           
      .             template<>
      .               struct __uninitialized_copy<true>
      .               {
      .                 template<typename _InputIterator, typename _ForwardIterator>
      .                   static _ForwardIterator
      .                   __uninit_copy(_InputIterator __first, _InputIterator __last,
-- line 145 ----------------------------------------
-- line 177 ----------------------------------------
      .                 typedef typename iterator_traits<_InputIterator>::reference _From;
      .           #else
      .                 using _From = decltype(*__first);
      .           #endif
      .                 const bool __assignable
      .           	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
      .           
      .                 return std::__uninitialized_copy<__can_memmove && __assignable>::
158,479 ( 0.01%)  	__uninit_copy(__first, __last, __result);
 24,964 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__uninitialized_copy<false>::__uninit_copy<Move const*, Move*>(Move const*, Move const*, Move*) (298x)
      .               }
      .           
      .             /// @cond undocumented
      .           
      .             template<typename _ForwardIterator, typename _Tp>
      .               _GLIBCXX20_CONSTEXPR void
      .               __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
      .           		     const _Tp& __x)
-- line 193 ----------------------------------------
-- line 365 ----------------------------------------
      .               inline _ForwardIterator
      .               __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      .           			   _ForwardIterator __result, allocator<_Tp>&)
      .               {
      .           #ifdef __cpp_lib_is_constant_evaluated
      .                 if (std::is_constant_evaluated())
      .           	return std::__do_uninit_copy(__first, __last, __result);
      .           #endif
158,479 ( 0.01%)        return std::uninitialized_copy(__first, __last, __result);
    269 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::uninitialized_copy<Move*, Move*>(Move*, Move*, Move*) [clone .isra.0] (5x)
      .               }
      .           #endif
      .           
      .             template<typename _InputIterator, typename _ForwardIterator,
      .           	   typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
      .               __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
-- line 381 ----------------------------------------
-- line 385 ----------------------------------------
      .           					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
      .           					 __result, __alloc);
      .               }
      .           
      .             template<typename _InputIterator, typename _ForwardIterator,
      .           	   typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
  1,794 ( 0.00%)      __uninitialized_move_if_noexcept_a(_InputIterator __first,
      .           				       _InputIterator __last,
      .           				       _ForwardIterator __result,
      .           				       _Allocator& __alloc)
      .               {
      .                 return std::__uninitialized_copy_a
  2,392 ( 0.00%)  	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 25,560 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__uninitialized_copy_a<Move const*, Move*, Move>(Move const*, Move const*, Move*, std::allocator<Move>&) [clone .isra.0] (298x)
  1,192 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:Move const* std::__make_move_if_noexcept_iterator<Move, Move const*>(Move*) (596x)
      .           	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    897 ( 0.00%)      }
      .           
      .             template<typename _ForwardIterator, typename _Tp, typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               void
      .               __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      .           			   const _Tp& __x, _Allocator& __alloc)
      .               {
      .                 _ForwardIterator __cur = __first;
-- line 409 ----------------------------------------
-- line 629 ----------------------------------------
      .               };
      .           
      .             template<bool _TrivialValueType>
      .               struct __uninitialized_default_n_1
      .               {
      .                 template<typename _ForwardIterator, typename _Size>
      .           	_GLIBCXX20_CONSTEXPR
      .                   static _ForwardIterator
 53,304 ( 0.00%)          __uninit_default_n(_ForwardIterator __first, _Size __n)
      .                   {
  8,884 ( 0.00%)  	  _ForwardIterator __cur = __first;
      .           	  __try
      .           	    {
 80,024 ( 0.01%)  	      for (; __n > 0; --__n, (void) ++__cur)
 47,472 ( 0.00%)  		std::_Construct(std::__addressof(*__cur));
118,630 ( 0.01%)  => /usr/include/c++/14/bits/stl_construct.h:void std::_Construct<Move>(Move*) (11,863x)
 23,726 ( 0.00%)  => /usr/include/c++/14/bits/move.h:Move* std::__addressof<Move>(Move&) (11,863x)
      .           	      return __cur;
      .           	    }
      .           	  __catch(...)
      .           	    {
      .           	      std::_Destroy(__first, __cur);
      .           	      __throw_exception_again;
      .           	    }
 62,188 ( 0.00%)  	}
      .               };
      .           
      .             template<>
      .               struct __uninitialized_default_n_1<true>
      .               {
      .                 template<typename _ForwardIterator, typename _Size>
      .           	_GLIBCXX20_CONSTEXPR
      .                   static _ForwardIterator
      4 ( 0.00%)          __uninit_default_n(_ForwardIterator __first, _Size __n)
      .                   {
      2 ( 0.00%)  	  if (__n > 0)
      .           	    {
      .           	      typename iterator_traits<_ForwardIterator>::value_type* __val
      2 ( 0.00%)  		= std::__addressof(*__first);
      2 ( 0.00%)  => /usr/include/c++/14/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (1x)
      2 ( 0.00%)  	      std::_Construct(__val);
      5 ( 0.00%)  => /usr/include/c++/14/bits/stl_construct.h:void std::_Construct<unsigned long>(unsigned long*) (1x)
      1 ( 0.00%)  	      ++__first;
      3 ( 0.00%)  	      __first = std::fill_n(__first, __n - 1, *__val);
     42 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:unsigned long* std::fill_n<unsigned long*, unsigned long, unsigned long>(unsigned long*, unsigned long, unsigned long const&) [clone .isra.0] (1x)
      .           	    }
      .           	  return __first;
      4 ( 0.00%)  	}
      .               };
      .           
      .             // __uninitialized_default
      .             // Fills [first, last) with value-initialized value_types.
      .             template<typename _ForwardIterator>
      .               inline void
      .               __uninitialized_default(_ForwardIterator __first,
      .           			    _ForwardIterator __last)
-- line 679 ----------------------------------------
-- line 704 ----------------------------------------
      .                 typedef typename iterator_traits<_ForwardIterator>::value_type
      .           	_ValueType;
      .                 // See uninitialized_fill_n for the conditions for using std::fill_n.
      .                 constexpr bool __can_fill
      .           	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
      .           
      .                 return __uninitialized_default_n_1<__is_trivial(_ValueType)
      .           					 && __can_fill>::
  8,885 ( 0.00%)  	__uninit_default_n(__first, __n);
    164 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:std::array<Move, 2ul>* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::array<Move, 2ul>*, unsigned long>(std::array<Move, 2ul>*, unsigned long) (1x)
      .               }
      .           
      .           
      .             // __uninitialized_default_a
      .             // Fills [first, last) with value_types constructed by the allocator
      .             // alloc, with no arguments passed to the construct call.
      .             template<typename _ForwardIterator, typename _Allocator>
      .               void
-- line 720 ----------------------------------------
-- line 771 ----------------------------------------
      .           #if _GLIBCXX_HOSTED
      .             // __uninitialized_default_n_a specialization for std::allocator,
      .             // which ignores the allocator and value-initializes the elements.
      .             template<typename _ForwardIterator, typename _Size, typename _Tp>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
      .               __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
      .           				allocator<_Tp>&)
  8,885 ( 0.00%)      { return std::__uninitialized_default_n(__first, __n); }
    165 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:std::array<Move, 2ul>* std::__uninitialized_default_n<std::array<Move, 2ul>*, unsigned long>(std::array<Move, 2ul>*, unsigned long) (1x)
      .           #endif
      .           
      .             template<bool _TrivialValueType>
      .               struct __uninitialized_default_novalue_1
      .               {
      .                 template<typename _ForwardIterator>
      .           	static void
      .           	__uninit_default_novalue(_ForwardIterator __first,
-- line 787 ----------------------------------------
-- line 1104 ----------------------------------------
      .           				 std::__addressof(*__first), __alloc);
      .                 return __cur;
      .               }
      .           
      .           #if _GLIBCXX_HOSTED
      .             template <typename _Tp, typename _Up>
      .               _GLIBCXX20_CONSTEXPR
      .               inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
     22 ( 0.00%)      __relocate_a_1(_Tp* __first, _Tp* __last,
      .           		   _Tp* __result,
      .           		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
      .               {
     22 ( 0.00%)        ptrdiff_t __count = __last - __first;
     22 ( 0.00%)        if (__count > 0)
      .           	{
      .           #ifdef __cpp_lib_is_constant_evaluated
      .           	  if (std::is_constant_evaluated())
      .           	    {
      .           	      // Can't use memcpy. Wrap the pointer so that __relocate_a_1
      .           	      // resolves to the non-trivial overload above.
      .           	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
      .           	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
      .           	      return __out.base();
      .           	    }
      .           #endif
     52 ( 0.00%)  	  __builtin_memcpy(__result, __first, __count * sizeof(_Tp));
     23 ( 0.00%)  => ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms (2x)
      .           	}
     11 ( 0.00%)        return __result + __count;
     22 ( 0.00%)      }
      .           #endif
      .           
      .             template <typename _InputIterator, typename _ForwardIterator,
      .           	    typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
     66 ( 0.00%)      __relocate_a(_InputIterator __first, _InputIterator __last,
      .           		 _ForwardIterator __result, _Allocator& __alloc)
      .               noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
      .           				     std::__niter_base(__last),
      .           				     std::__niter_base(__result), __alloc)))
      .               {
    121 ( 0.00%)        return std::__relocate_a_1(std::__niter_base(__first),
  1,105 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&) [clone .isra.0] (8x)
     48 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:unsigned int* std::__niter_base<unsigned int*>(unsigned int*) (24x)
      .           				 std::__niter_base(__last),
      .           				 std::__niter_base(__result), __alloc);
     33 ( 0.00%)      }
      .           
      .             /// @endcond
      .           #endif // C++11
      .           
      .             /// @} group memory
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace
-- line 1156 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: MagicBitboards.cpp
--------------------------------------------------------------------------------
Ir                 

        .           #include "MagicBitboards.hpp"
        .           #include "utils.hpp"
        .           #include "notation.hpp"
        .           
        .           MagicBitboards* MagicBitboards::mInstance = nullptr;
        .           
        .           const MagicBitboards &MagicBitboards::getInstance()
        1 ( 0.00%)  {
       15 ( 0.00%)      if (mInstance == nullptr) mInstance = new MagicBitboards();
17,936,477 ( 1.14%)  => MagicBitboards.cpp:MagicBitboards::MagicBitboards() (1x)
      705 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      364 ( 0.00%)  => ???:operator new(unsigned long) (1x)
        .               return *mInstance;
        2 ( 0.00%)  }
        .           
        .           // uint64_t MagicBitboards::getAttacks(int t_piece, int t_square, uint64_t t_occupied) const
        .           // {
        .           //     using AttackFunction = uint64_t (MagicBitboards::*)(uint64_t, int) const;
        .           
        .           //     static const AttackFunction attackFunction[] = {
        .           //         &MagicBitboards::knightAttacks, // knight
        .           //         &MagicBitboards::bishopAttacks, // bishops
-- line 19 ----------------------------------------
-- line 20 ----------------------------------------
        .           //         &MagicBitboards::rookAttacks,   // rooks
        .           //         &MagicBitboards::queenAttacks,  // queens
        .           //         &MagicBitboards::kingAttacks    // kings
        .           //     };
        .               
        .           //     return (m_instance->*attackFunction[t_piece - 3])(t_occupied, t_square);
        .           // }
        .           
        2 ( 0.00%)  MagicBitboards::MagicBitboards() :
       24 ( 0.00%)     mRShift {
        .                   52, 53, 53, 53, 53, 53, 53, 52,
        .                   53, 54, 54, 54, 54, 54, 54, 53,
        .                   53, 54, 54, 54, 54, 54, 54, 53,
        .                   53, 54, 54, 54, 54, 54, 54, 53,
        .                   53, 54, 54, 54, 54, 54, 54, 53,
        .                   53, 54, 54, 54, 54, 54, 54, 53,
        .                   53, 54, 54, 54, 54, 54, 54, 53,
        .                   53, 54, 54, 53, 53, 53, 53, 53
        .               } ,
       68 ( 0.00%)      mRMask {
        .                   uint64_t(0x000101010101017E), uint64_t(0x000202020202027C), uint64_t(0x000404040404047A), uint64_t(0x0008080808080876),
        .                   uint64_t(0x001010101010106E), uint64_t(0x002020202020205E), uint64_t(0x004040404040403E), uint64_t(0x008080808080807E),
        .                   uint64_t(0x0001010101017E00), uint64_t(0x0002020202027C00), uint64_t(0x0004040404047A00), uint64_t(0x0008080808087600),
        .                   uint64_t(0x0010101010106E00), uint64_t(0x0020202020205E00), uint64_t(0x0040404040403E00), uint64_t(0x0080808080807E00),
        .                   uint64_t(0x00010101017E0100), uint64_t(0x00020202027C0200), uint64_t(0x00040404047A0400), uint64_t(0x0008080808760800),
        .                   uint64_t(0x00101010106E1000), uint64_t(0x00202020205E2000), uint64_t(0x00404040403E4000), uint64_t(0x00808080807E8000),
        .                   uint64_t(0x000101017E010100), uint64_t(0x000202027C020200), uint64_t(0x000404047A040400), uint64_t(0x0008080876080800),
        .                   uint64_t(0x001010106E101000), uint64_t(0x002020205E202000), uint64_t(0x004040403E404000), uint64_t(0x008080807E808000),
-- line 47 ----------------------------------------
-- line 49 ----------------------------------------
        .                   uint64_t(0x0010106E10101000), uint64_t(0x0020205E20202000), uint64_t(0x0040403E40404000), uint64_t(0x0080807E80808000),
        .                   uint64_t(0x00017E0101010100), uint64_t(0x00027C0202020200), uint64_t(0x00047A0404040400), uint64_t(0x0008760808080800),
        .                   uint64_t(0x00106E1010101000), uint64_t(0x00205E2020202000), uint64_t(0x00403E4040404000), uint64_t(0x00807E8080808000),
        .                   uint64_t(0x007E010101010100), uint64_t(0x007C020202020200), uint64_t(0x007A040404040400), uint64_t(0x0076080808080800),
        .                   uint64_t(0x006E101010101000), uint64_t(0x005E202020202000), uint64_t(0x003E404040404000), uint64_t(0x007E808080808000),
        .                   uint64_t(0x7E01010101010100), uint64_t(0x7C02020202020200), uint64_t(0x7A04040404040400), uint64_t(0x7608080808080800),
        .                   uint64_t(0x6E10101010101000), uint64_t(0x5E20202020202000), uint64_t(0x3E40404040404000), uint64_t(0x7E80808080808000)
        .               },
       68 ( 0.00%)      mRMagic {
        .                   uint64_t(0x0080001020400080), uint64_t(0x0040001000200040), uint64_t(0x0080081000200080), uint64_t(0x0080040800100080),
        .                   uint64_t(0x0080020400080080), uint64_t(0x0080010200040080), uint64_t(0x0080008001000200), uint64_t(0x0080002040800100),
        .                   uint64_t(0x0000800020400080), uint64_t(0x0000400020005000), uint64_t(0x0000801000200080), uint64_t(0x0000800800100080),
        .                   uint64_t(0x0000800400080080), uint64_t(0x0000800200040080), uint64_t(0x0000800100020080), uint64_t(0x0000800040800100),
        .                   uint64_t(0x0000208000400080), uint64_t(0x0000404000201000), uint64_t(0x0000808010002000), uint64_t(0x0000808008001000),
        .                   uint64_t(0x0000808004000800), uint64_t(0x0000808002000400), uint64_t(0x0000010100020004), uint64_t(0x0000020000408104),
        .                   uint64_t(0x0000208080004000), uint64_t(0x0000200040005000), uint64_t(0x0000100080200080), uint64_t(0x0000080080100080),
        .                   uint64_t(0x0000040080080080), uint64_t(0x0000020080040080), uint64_t(0x0000010080800200), uint64_t(0x0000800080004100),
-- line 65 ----------------------------------------
-- line 67 ----------------------------------------
        .                   uint64_t(0x0000040080800800), uint64_t(0x0000020080800400), uint64_t(0x0000020001010004), uint64_t(0x0000800040800100),
        .                   uint64_t(0x0000204000808000), uint64_t(0x0000200040008080), uint64_t(0x0000100020008080), uint64_t(0x0000080010008080),
        .                   uint64_t(0x0000040008008080), uint64_t(0x0000020004008080), uint64_t(0x0000010002008080), uint64_t(0x0000004081020004),
        .                   uint64_t(0x0000204000800080), uint64_t(0x0000200040008080), uint64_t(0x0000100020008080), uint64_t(0x0000080010008080),
        .                   uint64_t(0x0000040008008080), uint64_t(0x0000020004008080), uint64_t(0x0000800100020080), uint64_t(0x0000800041000080),
        .                   uint64_t(0x00FFFCDDFCED714A), uint64_t(0x007FFCDDFCED714A), uint64_t(0x003FFFCDFFD88096), uint64_t(0x0000040810002101),
        .                   uint64_t(0x0001000204080011), uint64_t(0x0001000204000801), uint64_t(0x0001000082000401), uint64_t(0x0001FFFAABFAD1A2)
        .               },
       25 ( 0.00%)      mBShift {
        .                   58, 59, 59, 59, 59, 59, 59, 58,
        .                   59, 59, 59, 59, 59, 59, 59, 59,
        .                   59, 59, 57, 57, 57, 57, 59, 59,
        .                   59, 59, 57, 55, 55, 57, 59, 59,
        .                   59, 59, 57, 55, 55, 57, 59, 59,
        .                   59, 59, 57, 57, 57, 57, 59, 59,
        .                   59, 59, 59, 59, 59, 59, 59, 59,
        .                   58, 59, 59, 59, 59, 59, 59, 58
        .               },
       68 ( 0.00%)      mBMask {
        .                   uint64_t(0x0040201008040200), uint64_t(0x0000402010080400), uint64_t(0x0000004020100A00), uint64_t(0x0000000040221400),
        .                   uint64_t(0x0000000002442800), uint64_t(0x0000000204085000), uint64_t(0x0000020408102000), uint64_t(0x0002040810204000),
        .                   uint64_t(0x0020100804020000), uint64_t(0x0040201008040000), uint64_t(0x00004020100A0000), uint64_t(0x0000004022140000),
        .                   uint64_t(0x0000000244280000), uint64_t(0x0000020408500000), uint64_t(0x0002040810200000), uint64_t(0x0004081020400000),
        .                   uint64_t(0x0010080402000200), uint64_t(0x0020100804000400), uint64_t(0x004020100A000A00), uint64_t(0x0000402214001400),
        .                   uint64_t(0x0000024428002800), uint64_t(0x0002040850005000), uint64_t(0x0004081020002000), uint64_t(0x0008102040004000),
        .                   uint64_t(0x0008040200020400), uint64_t(0x0010080400040800), uint64_t(0x0020100A000A1000), uint64_t(0x0040221400142200),
        .                   uint64_t(0x0002442800284400), uint64_t(0x0004085000500800), uint64_t(0x0008102000201000), uint64_t(0x0010204000402000),
-- line 93 ----------------------------------------
-- line 95 ----------------------------------------
        .                   uint64_t(0x0044280028440200), uint64_t(0x0008500050080400), uint64_t(0x0010200020100800), uint64_t(0x0020400040201000),
        .                   uint64_t(0x0002000204081000), uint64_t(0x0004000408102000), uint64_t(0x000A000A10204000), uint64_t(0x0014001422400000),
        .                   uint64_t(0x0028002844020000), uint64_t(0x0050005008040200), uint64_t(0x0020002010080400), uint64_t(0x0040004020100800),
        .                   uint64_t(0x0000020408102000), uint64_t(0x0000040810204000), uint64_t(0x00000A1020400000), uint64_t(0x0000142240000000),
        .                   uint64_t(0x0000284402000000), uint64_t(0x0000500804020000), uint64_t(0x0000201008040200), uint64_t(0x0000402010080400),
        .                   uint64_t(0x0002040810204000), uint64_t(0x0004081020400000), uint64_t(0x000A102040000000), uint64_t(0x0014224000000000),
        .                   uint64_t(0x0028440200000000), uint64_t(0x0050080402000000), uint64_t(0x0020100804020000), uint64_t(0x0040201008040200)
        .               },
       68 ( 0.00%)      mBMagic {
        .                   uint64_t(0x0002020202020200), uint64_t(0x0002020202020000), uint64_t(0x0004010202000000), uint64_t(0x0004040080000000),
        .                   uint64_t(0x0001104000000000), uint64_t(0x0000821040000000), uint64_t(0x0000410410400000), uint64_t(0x0000104104104000),
        .                   uint64_t(0x0000040404040400), uint64_t(0x0000020202020200), uint64_t(0x0000040102020000), uint64_t(0x0000040400800000),
        .                   uint64_t(0x0000011040000000), uint64_t(0x0000008210400000), uint64_t(0x0000004104104000), uint64_t(0x0000002082082000),
        .                   uint64_t(0x0004000808080800), uint64_t(0x0002000404040400), uint64_t(0x0001000202020200), uint64_t(0x0000800802004000),
        .                   uint64_t(0x0000800400A00000), uint64_t(0x0000200100884000), uint64_t(0x0000400082082000), uint64_t(0x0000200041041000),
        .                   uint64_t(0x0002080010101000), uint64_t(0x0001040008080800), uint64_t(0x0000208004010400), uint64_t(0x0000404004010200),
        .                   uint64_t(0x0000840000802000), uint64_t(0x0000404002011000), uint64_t(0x0000808001041000), uint64_t(0x0000404000820800),
-- line 111 ----------------------------------------
-- line 114 ----------------------------------------
        .                   uint64_t(0x0000820820004000), uint64_t(0x0000410410002000), uint64_t(0x0000082088001000), uint64_t(0x0000002011000800),
        .                   uint64_t(0x0000080100400400), uint64_t(0x0001010101000200), uint64_t(0x0002020202000400), uint64_t(0x0001010101000200),
        .                   uint64_t(0x0000410410400000), uint64_t(0x0000208208200000), uint64_t(0x0000002084100000), uint64_t(0x0000000020880000),
        .                   uint64_t(0x0000001002020000), uint64_t(0x0000040408020000), uint64_t(0x0004040404040000), uint64_t(0x0002020202020000),
        .                   uint64_t(0x0000104104104000), uint64_t(0x0000002082082000), uint64_t(0x0000000020841000), uint64_t(0x0000000000208800),
        .                   uint64_t(0x0000000010020200), uint64_t(0x0000000404080200), uint64_t(0x0000040404040400), uint64_t(0x0002020202020200)
        .               }
        .           {
        2 ( 0.00%)      initRayAttacks();
    3,422 ( 0.00%)  => MagicBitboards.cpp:MagicBitboards::initRayAttacks() (1x)
        2 ( 0.00%)      initKnightAttacks();
    5,711 ( 0.00%)  => MagicBitboards.cpp:MagicBitboards::initKnightAttacks() (1x)
        2 ( 0.00%)      initKingAttacks();
    3,599 ( 0.00%)  => MagicBitboards.cpp:MagicBitboards::initKingAttacks() (1x)
        2 ( 0.00%)      initPawnAttacks();
    4,756 ( 0.00%)  => MagicBitboards.cpp:MagicBitboards::initPawnAttacks() (1x)
        2 ( 0.00%)      initMagicMoves();
17,918,655 ( 1.14%)  => MagicBitboards.cpp:MagicBitboards::initMagicMoves() (1x)
        1 ( 0.00%)  }
        .           
        .           void MagicBitboards::initRayAttacks()
       10 ( 0.00%)  {
        1 ( 0.00%)      uint64_t nortRay =  (uint64_t) 0x0101010101010100;
      256 ( 0.00%)      for (int sq = 0; sq < 64; sq ++, nortRay <<= 1)
       64 ( 0.00%)          mRayAttacks[sq][nort] = nortRay;
        .           
        .           
        3 ( 0.00%)      uint64_t noEaRay = (uint64_t) 0x8040201008040200;
       51 ( 0.00%)      for (int file = 0; file < 8; file ++, wrapEast(noEaRay)){
       48 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:wrapEast(unsigned long&) (8x)
       14 ( 0.00%)          uint64_t wrappedRay = noEaRay;
      288 ( 0.00%)          for (int rank = 0; rank < 8; rank ++, wrappedRay <<= 8)
       64 ( 0.00%)              mRayAttacks[rank * 8 + file][noEa] = wrappedRay;
        .               }
        .           
        2 ( 0.00%)      uint64_t noWeRay = (uint64_t) 0x102040810204000;
       53 ( 0.00%)      for (int file = 7; file >= 0; file --, wrapWest(noWeRay)){
       48 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:wrapWest(unsigned long&) (8x)
       14 ( 0.00%)          uint64_t wrappedRay = noWeRay;
      288 ( 0.00%)          for (int rank = 0; rank < 8; rank ++, wrappedRay <<= 8)
       64 ( 0.00%)              mRayAttacks[rank * 8 + file][noWe] = wrappedRay;
        .               }
        .           
        4 ( 0.00%)      uint64_t eastRay = (uint64_t) 0x0000000000000fe;
       50 ( 0.00%)      for (int file = 0; file < 8; file ++, wrapEast(eastRay)){
       48 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:wrapEast(unsigned long&) (8x)
       16 ( 0.00%)          uint64_t wrappedRay = eastRay;
      272 ( 0.00%)          for (int rank = 0; rank < 8; rank ++, wrappedRay <<= 8)
       64 ( 0.00%)              mRayAttacks[rank * 8 + file][east] = wrappedRay;
        .               }
        .           
        2 ( 0.00%)      uint64_t soutRay = (uint64_t) 0x0080808080808080;
      256 ( 0.00%)      for (int sq = 63; sq >= 0; sq --, soutRay >>= 1)
       64 ( 0.00%)          mRayAttacks[sq][sout] = soutRay;
        .           
        3 ( 0.00%)      uint64_t soEaRay = (uint64_t) 0x0002040810204080;
       51 ( 0.00%)      for (int file = 0; file < 8; file ++, wrapEast(soEaRay)){
       48 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:wrapEast(unsigned long&) (8x)
       14 ( 0.00%)          uint64_t wrappedRay = soEaRay;
      288 ( 0.00%)          for (int rank = 7; rank >= 0; rank --, wrappedRay >>= 8)
       64 ( 0.00%)              mRayAttacks[rank * 8 + file][soEa] = wrappedRay;
        .               }
        .           
        3 ( 0.00%)      uint64_t soWeRay = (uint64_t) 0x0040201008040201;
       51 ( 0.00%)      for (int file = 7; file >= 0; file --, wrapWest(soWeRay)){
       48 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:wrapWest(unsigned long&) (8x)
       14 ( 0.00%)          uint64_t wrappedRay = soWeRay;
      272 ( 0.00%)          for (int rank = 7; rank >= 0; rank --, wrappedRay >>= 8)
       64 ( 0.00%)              mRayAttacks[rank * 8 + file][soWe] = wrappedRay;
        .               }
        .           
        3 ( 0.00%)      uint64_t westRay = (uint64_t) 0x7f00000000000000;
       51 ( 0.00%)      for (int file = 7; file >= 0; file --, wrapWest(westRay)){
       48 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:wrapWest(unsigned long&) (8x)
       14 ( 0.00%)          uint64_t wrappedRay = westRay;
      272 ( 0.00%)          for (int rank = 7; rank >= 0; rank --, wrappedRay >>= 8)
       64 ( 0.00%)              mRayAttacks[rank * 8 + file][west] = wrappedRay;
        .               }
        6 ( 0.00%)  }
        .           
        .           void MagicBitboards::initKnightAttacks()
        7 ( 0.00%)  {
        2 ( 0.00%)      uint64_t knightPos = (uint64_t) 1;
      256 ( 0.00%)      for (int sq = 0; sq < 64; sq ++, knightPos <<= 1){
       64 ( 0.00%)          mKnightAttacks[sq] = (uint64_t) 0;
        .           
      192 ( 0.00%)          uint64_t eastDir = cpyWrapEast(knightPos);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (64x)
      128 ( 0.00%)          uint64_t eaEaDir = cpyWrapEast(eastDir);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (64x)
      384 ( 0.00%)          mKnightAttacks[sq] |= eastDir << 16 | eaEaDir << 8 
      256 ( 0.00%)              | eastDir >> 16 | eaEaDir >> 8;
        .           
      192 ( 0.00%)          uint64_t westDir = cpyWrapWest(knightPos);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (64x)
      192 ( 0.00%)          uint64_t weWeDir = cpyWrapWest(westDir);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (64x)
      448 ( 0.00%)          mKnightAttacks[sq] |= westDir << 16 | weWeDir << 8
      256 ( 0.00%)              | westDir >> 16 | weWeDir >> 8;
        .               }
        6 ( 0.00%)  }
        .           
        .           void MagicBitboards::initKingAttacks()
        8 ( 0.00%)  {
        1 ( 0.00%)      uint64_t kingPosition = (uint64_t) 1;
      256 ( 0.00%)      for (int sq = 0; sq < 64; sq ++, kingPosition <<= 1){
      384 ( 0.00%)          mKingAttacks[sq] = kingPosition << 8 | kingPosition >> 8;
      128 ( 0.00%)          uint64_t eastDir = cpyWrapEast(kingPosition);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (64x)
      512 ( 0.00%)          mKingAttacks[sq] |= eastDir | eastDir << 8 | eastDir >> 8;
      192 ( 0.00%)          uint64_t westDir = cpyWrapWest(kingPosition);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (64x)
      448 ( 0.00%)          mKingAttacks[sq] |= westDir | westDir << 8 | westDir >> 8;
        .               }
        6 ( 0.00%)  }
        .           
        .           void MagicBitboards::initPawnAttacks()
       11 ( 0.00%)  {
        1 ( 0.00%)      uint64_t pawnPosition = (uint64_t) 1;
      256 ( 0.00%)      for (int sq = 0; sq < 64; sq ++ , pawnPosition <<= 1){
      128 ( 0.00%)          uint64_t nortDir = pawnPosition << 8;
      128 ( 0.00%)          uint64_t soutDir = pawnPosition >> 8;
        .           
      448 ( 0.00%)          mPawnAttacks[sq][white] = cpyWrapEast(nortDir) | cpyWrapWest(nortDir);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (64x)
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (64x)
      448 ( 0.00%)          mPawnAttacks[sq][black] = cpyWrapEast(soutDir) | cpyWrapWest(soutDir);
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapWest(unsigned long) (64x)
      832 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:cpyWrapEast(unsigned long) (64x)
        .               }    
        8 ( 0.00%)  }
        .           
        .           void MagicBitboards::initMagicMoves()
      140 ( 0.00%)  {
      387 ( 0.00%)      for (int i = 0; i < 64; i++){
        .                   int squares[64];
       64 ( 0.00%)          int numSquares = 0;
      128 ( 0.00%)          uint64_t tmp = mBMask[i];
        .           
      128 ( 0.00%)          if (tmp) do {
    1,520 ( 0.00%)              squares[numSquares ++] = bitScanForward(tmp);
    1,820 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (364x)
    1,456 ( 0.00%)          } while (tmp &= (tmp - 1));
        .           
   16,000 ( 0.00%)          for(uint64_t occSeq = 0; occSeq < ((uint64_t) 1 << numSquares); occSeq++){
   31,488 ( 0.00%)              uint64_t tmpOcc = initMagicOcc(squares, numSquares, occSeq);
  316,800 ( 0.02%)  => MagicBitboards.cpp:MagicBitboards::initMagicOcc(int*, int, unsigned long) (5,248x)
   52,992 ( 0.00%)              mBMagicDb[i][(tmpOcc * mBMagic[i]) >> mBShift[i]] = initMagicBMoves(i,tmpOcc);
  467,020 ( 0.03%)  => MagicBitboards.cpp:MagicBitboards::initMagicBMoves(int, unsigned long) (5,248x)
        .                       // without applying the mask
        .                       // the for loop should ensure that all combination of active masked bits are computed and
        .                       // stored in the Magic database. The funcion `initMagicOcc` returns the right bit combination
        .                       // for a given sequence of on and off bits in the mask (represented by occSeq, wich stores the
        .                       // bit sequence, but each bit is not in the right place of the bitboard)
        .                   }
        .               }
        .           
      256 ( 0.00%)      for (int i = 0; i < 64; i++){
        .                   int squares[64];
       64 ( 0.00%)          int numSquares = 0;
      128 ( 0.00%)          uint64_t tmp = mRMask[i];
        .           
      128 ( 0.00%)          if (tmp) do {
    2,752 ( 0.00%)              squares[numSquares ++] = bitScanForward(tmp);
    3,360 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (672x)
    2,688 ( 0.00%)          } while (tmp &= (tmp - 1));
        .           
  307,456 ( 0.02%)          for(uint64_t occSeq = 0;occSeq < ((uint64_t) 1 << numSquares); occSeq++){
  614,400 ( 0.04%)              uint64_t tmpOcc = initMagicOcc(squares, numSquares, occSeq);
8,765,440 ( 0.56%)  => MagicBitboards.cpp:MagicBitboards::initMagicOcc(int*, int, unsigned long) (102,400x)
1,024,512 ( 0.06%)              mRMagicDb[i][(tmpOcc * mRMagic[i]) >> mRShift[i]] = initMagicRMoves(i,tmpOcc);
6,307,520 ( 0.40%)  => MagicBitboards.cpp:MagicBitboards::initMagicRMoves(int, unsigned long) (102,400x)
        .                   }
        .               }
        8 ( 0.00%)  }
        .           
        .           uint64_t MagicBitboards::initMagicOcc(int *tSquares, int tNSquares, uint64_t tSequence)
  107,648 ( 0.01%)  {
  322,944 ( 0.02%)      uint64_t returnVal = 0;
3,861,632 ( 0.24%)      for (int i = 0; i < tNSquares; i ++)
4,574,720 ( 0.29%)          if (tSequence & ((uint64_t) 1 << i)) returnVal |= (uint64_t) 1 << tSquares[i];
        .               return returnVal;
  215,296 ( 0.01%)  }
        .           
        .           uint64_t MagicBitboards::initMagicBMoves(int t_square, uint64_t t_occupied)
    5,248 ( 0.00%)  {
   47,232 ( 0.00%)      uint64_t ret=0;
        .           	uint64_t bit;
        .           	uint64_t bit2;
   52,480 ( 0.00%)  	uint64_t rowbits=(((uint64_t)0xFF)<<(8*(t_square/8)));
        .           	
   26,240 ( 0.00%)  	bit=(((uint64_t)(1))<<t_square);
    5,248 ( 0.00%)  	bit2=bit;
        .           	do
        .           	{
    9,920 ( 0.00%)  		bit<<=8-1;
    9,920 ( 0.00%)  		bit2>>=1;
   28,521 ( 0.00%)  		if(bit2&rowbits) ret|=bit;
        .           		else break;
   32,970 ( 0.00%)  	}while(bit && !(bit&t_occupied));
        .           	bit=(((uint64_t)(1))<<t_square);
        .           	bit2=bit;
        .           	do
        .           	{
    9,920 ( 0.00%)  		bit<<=8+1;
    9,920 ( 0.00%)  		bit2<<=1;
   28,521 ( 0.00%)  		if(bit2&rowbits) ret|=bit;
        .           		else break;
   32,970 ( 0.00%)  	}while(bit && !(bit&t_occupied));
        .           	bit=(((uint64_t)(1))<<t_square);
        .           	bit2=bit;
        .           	do
        .           	{
    9,920 ( 0.00%)  		bit>>=8-1;
    9,920 ( 0.00%)  		bit2<<=1;
   28,521 ( 0.00%)  		if(bit2&rowbits) ret|=bit;
        .           		else break;
   32,970 ( 0.00%)  	}while(bit && !(bit&t_occupied));
        .           	bit=(((uint64_t)(1))<<t_square);
        .           	bit2=bit;
        .           	do
        .           	{
    9,920 ( 0.00%)  		bit>>=8+1;
    9,920 ( 0.00%)  		bit2>>=1;
   28,521 ( 0.00%)  		if(bit2&rowbits) ret|=bit;
        .           		else break;
   32,970 ( 0.00%)  	}while(bit && !(bit&t_occupied));
        .           	return ret;
    5,248 ( 0.00%)  }
        .           
        .           uint64_t MagicBitboards::initMagicRMoves(int tSquare, uint64_t tOccupied)
  102,400 ( 0.01%)  {
  102,400 ( 0.01%)      uint64_t ret=0;
        .           	uint64_t bit;
1,024,000 ( 0.06%)  	uint64_t rowbits=(((uint64_t)0xFF)<<(8*(tSquare/8)));
        .           	
  512,000 ( 0.03%)  	bit=(((uint64_t)(1))<<tSquare);
        .           	do
        .           	{
  184,320 ( 0.01%)  		bit<<=8;
  184,320 ( 0.01%)  		ret|=bit;
  860,160 ( 0.05%)  	}while(bit && !(bit&tOccupied));
        .           	bit=(((uint64_t)(1))<<tSquare);
        .           	do
        .           	{
  184,320 ( 0.01%)  		bit>>=8;
  184,320 ( 0.01%)  		ret|=bit;
  860,160 ( 0.05%)  	}while(bit && !(bit&tOccupied));
        .           	bit=(((uint64_t)(1))<<tSquare);
        .           	do
        .           	{
  184,320 ( 0.01%)  		bit<<=1;
  512,000 ( 0.03%)  		if(bit&rowbits) ret|=bit;
        .           		else break;
  286,720 ( 0.02%)  	}while(!(bit&tOccupied));
        .           	bit=(((uint64_t)(1))<<tSquare);
        .           	do
        .           	{
  184,320 ( 0.01%)  		bit>>=1;
  552,640 ( 0.04%)  		if(bit&rowbits) ret|=bit;
        .           		else break;
  286,720 ( 0.02%)  	}while(!(bit&tOccupied));
        .           	return ret;
  102,400 ( 0.01%)  }
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                 

-- line 507 ----------------------------------------
        .                  *  @param  __a  An allocator.
        .                  *  @param  __n  The number of objects to allocate space for.
        .                  *
        .                  *  Calls @c a.allocate(n)
        .                 */
        .                 [[__nodiscard__,__gnu__::__always_inline__]]
        .                 static _GLIBCXX20_CONSTEXPR pointer
        .                 allocate(allocator_type& __a, size_type __n)
  167,368 ( 0.01%)        { return __a.allocate(__n); }
    1,493 ( 0.00%)  => /usr/include/c++/14/bits/new_allocator.h:std::__new_allocator<std::array<Move, 2ul> >::allocate(unsigned long, void const*) [clone .isra.0] (1x)
        .           
        .                 /**
        .                  *  @brief  Allocate memory.
        .                  *  @param  __a  An allocator.
        .                  *  @param  __n  The number of objects to allocate space for.
        .                  *  @param  __hint Aid to locality.
        .                  *  @return Memory of suitable size and alignment for @a n objects
        .                  *          of type @c value_type
-- line 523 ----------------------------------------
-- line 542 ----------------------------------------
        .                  *  @param  __p  Pointer to the memory to deallocate.
        .                  *  @param  __n  The number of objects space was allocated for.
        .                  *
        .                  *  Calls <tt> a.deallocate(p, n) </tt>
        .                 */
        .                 [[__gnu__::__always_inline__]]
        .                 static _GLIBCXX20_CONSTEXPR void
        .                 deallocate(allocator_type& __a, pointer __p, size_type __n)
  167,980 ( 0.01%)        { __a.deallocate(__p, __n); }
       74 ( 0.00%)  => /usr/include/c++/14/bits/new_allocator.h:std::__new_allocator<unsigned long>::deallocate(unsigned long*, unsigned long) [clone .isra.0] (1x)
        .           
        .                 /**
        .                  *  @brief  Construct an object of type `_Up`
        .                  *  @param  __a  An allocator.
        .                  *  @param  __p  Pointer to memory of suitable size and alignment for
        .                  *	       an object of type `_Up`.
        .                  *  @param  __args Constructor arguments.
        .                  *
-- line 558 ----------------------------------------
-- line 567 ----------------------------------------
        .           		  _Up* __p, _Args&&... __args)
        .           #if __cplusplus <= 201703L
        .           	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
        .           #else
        .           	noexcept(__is_nothrow_new_constructible<_Up, _Args...>)
        .           #endif
        .           	{
        .           #if __cplusplus <= 201703L
1,815,534 ( 0.12%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
  623,228 ( 0.04%)  => /usr/include/c++/14/bits/move.h:unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&) (311,614x)
        .           #elif __cpp_constexpr_dynamic_alloc // >= C++20
        .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
        .           #else
        .           	  std::_Construct(__p, std::forward<_Args>(__args)...);
        .           #endif
        .           	}
        .           
        .                 /**
-- line 583 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/vector.tcc
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .           namespace std _GLIBCXX_VISIBILITY(default)
        .           {
        .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
        .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
        .           
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               void
1,107,162 ( 0.07%)      vector<_Tp, _Alloc>::
        .               reserve(size_type __n)
        .               {
  632,664 ( 0.04%)        if (__n > this->max_size())
2,530,656 ( 0.16%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::max_size() const (158,166x)
        .           	__throw_length_error(__N("vector::reserve"));
  790,830 ( 0.05%)        if (this->capacity() < __n)
  632,664 ( 0.04%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::capacity() const [clone .isra.0] (158,166x)
        .           	{
  474,498 ( 0.03%)  	  const size_type __old_size = size();
  632,664 ( 0.04%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] (158,166x)
        .           	  pointer __tmp;
        .           #if __cplusplus >= 201103L
        .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        .           	    {
        .           	      __tmp = this->_M_allocate(__n);
        .           	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
        .           			  __tmp, _M_get_Tp_allocator());
        .           	    }
        .           	  else
        .           #endif
        .           	    {
1,739,826 ( 0.11%)  	      __tmp = _M_allocate_and_copy(__n,
15,018,110 ( 0.95%)  => /usr/include/c++/14/bits/stl_vector.h:Move* std::vector<Move, std::allocator<Move> >::_M_allocate_and_copy<Move const*>(unsigned long, Move const*, Move const*) (158,166x)
  632,664 ( 0.04%)  => /usr/include/c++/14/bits/stl_iterator.h:Move const* std::__make_move_if_noexcept_iterator<Move, Move const*>(Move*) (316,332x)
        .           		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
        .           		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
        .           	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        .           			    _M_get_Tp_allocator());
        .           	    }
        .           	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  158,166 ( 0.01%)  	  _M_deallocate(this->_M_impl._M_start,
  474,498 ( 0.03%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_deallocate(Move*, unsigned long) [clone .isra.0] (158,166x)
        .           			this->_M_impl._M_end_of_storage
  632,664 ( 0.04%)  			- this->_M_impl._M_start);
  158,166 ( 0.01%)  	  this->_M_impl._M_start = __tmp;
  316,332 ( 0.02%)  	  this->_M_impl._M_finish = __tmp + __old_size;
  316,332 ( 0.02%)  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
        .           	}
1,107,162 ( 0.07%)      }
        .           
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename _Alloc>
        .               template<typename... _Args>
        .           #if __cplusplus > 201402L
        .                 _GLIBCXX20_CONSTEXPR
        .                 typename vector<_Tp, _Alloc>::reference
        .           #else
        .                 void
        .           #endif
4,538,065 ( 0.29%)        vector<_Tp, _Alloc>::
        .                 emplace_back(_Args&&... __args)
        .                 {
3,630,452 ( 0.23%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        .           	  {
        .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1,815,226 ( 0.12%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  623,242 ( 0.04%)  => /usr/include/c++/14/bits/move.h:unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&) (311,621x)
        .           				     std::forward<_Args>(__args)...);
1,327,098 ( 0.08%)  	    ++this->_M_impl._M_finish;
        .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        .           	  }
        .           	else
      924 ( 0.00%)  	  _M_realloc_append(std::forward<_Args>(__args)...);
    3,656 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_append<unsigned int>(unsigned int&&) (7x)
        .           #if __cplusplus > 201402L
        .           	return back();
        .           #endif
3,630,144 ( 0.23%)        }
        .           #endif
        .           
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               typename vector<_Tp, _Alloc>::iterator
        .               vector<_Tp, _Alloc>::
        .           #if __cplusplus >= 201103L
        .               insert(const_iterator __position, const value_type& __x)
-- line 135 ----------------------------------------
-- line 202 ----------------------------------------
        .           	  _M_erase_at_end(__first.base() + (end() - __last));
        .           	}
        .                 return __first;
        .               }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               vector<_Tp, _Alloc>&
   45,178 ( 0.00%)      vector<_Tp, _Alloc>::
        .               operator=(const vector<_Tp, _Alloc>& __x)
        .               {
   32,270 ( 0.00%)        if (std::__addressof(__x) != this)
   12,908 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::vector<Move, std::allocator<Move> > const* std::__addressof<std::vector<Move, std::allocator<Move> > const>(std::vector<Move, std::allocator<Move> > const&) (6,454x)
        .           	{
        .           	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
        .           #if __cplusplus >= 201103L
        .           	  if (_Alloc_traits::_S_propagate_on_copy_assign())
        .           	    {
        .           	      if (!_Alloc_traits::_S_always_equal()
        .           	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
        .           	        {
-- line 221 ----------------------------------------
-- line 227 ----------------------------------------
        .           		  this->_M_impl._M_start = nullptr;
        .           		  this->_M_impl._M_finish = nullptr;
        .           		  this->_M_impl._M_end_of_storage = nullptr;
        .           		}
        .           	      std::__alloc_on_copy(_M_get_Tp_allocator(),
        .           				   __x._M_get_Tp_allocator());
        .           	    }
        .           #endif
   32,270 ( 0.00%)  	  const size_type __xlen = __x.size();
   25,816 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] (6,454x)
   32,270 ( 0.00%)  	  if (__xlen > capacity())
   25,816 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::capacity() const [clone .isra.0] (6,454x)
        .           	    {
       99 ( 0.00%)  	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
       90 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() const (9x)
       90 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() const (9x)
    3,495 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:Move* std::vector<Move, std::allocator<Move> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > > >(unsigned long, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >) (9x)
        .           						   __x.end());
        .           	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        .           			    _M_get_Tp_allocator());
        9 ( 0.00%)  	      _M_deallocate(this->_M_impl._M_start,
      667 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<Move, std::allocator<Move> >::_M_deallocate(Move*, unsigned long) [clone .isra.0] (9x)
        .           			    this->_M_impl._M_end_of_storage
       36 ( 0.00%)  			    - this->_M_impl._M_start);
        9 ( 0.00%)  	      this->_M_impl._M_start = __tmp;
    6,481 ( 0.00%)  	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
        .           	    }
   25,780 ( 0.00%)  	  else if (size() >= __xlen)
   25,780 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] (6,445x)
        .           	    {
   77,280 ( 0.00%)  	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
1,102,976 ( 0.07%)  => /usr/include/c++/14/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > std::copy<__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > > >(__gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move const*, std::vector<Move, std::allocator<Move> > >, __gnu_cxx::__normal_iterator<Move*, std::vector<Move, std::allocator<Move> > >) [clone .isra.0] (6,440x)
   64,400 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() const (6,440x)
   64,400 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::end() const (6,440x)
   64,400 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::begin() (6,440x)
        .           			    end(), _M_get_Tp_allocator());
        .           	    }
        .           	  else
        .           	    {
       15 ( 0.00%)  	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
      763 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:Move* std::copy<Move*, Move*>(Move*, Move*, Move*) [clone .isra.0] (5x)
        .           			this->_M_impl._M_start);
       40 ( 0.00%)  	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       20 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<Move, std::allocator<Move> >::size() const [clone .isra.0] (5x)
      274 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__uninitialized_copy_a<Move*, Move*, Move>(Move*, Move*, Move*, std::allocator<Move>&) [clone .isra.0] (5x)
        5 ( 0.00%)  					  __x._M_impl._M_finish,
        .           					  this->_M_impl._M_finish,
        .           					  _M_get_Tp_allocator());
        .           	    }
   19,349 ( 0.00%)  	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
        .           	}
        .                 return *this;
   38,724 ( 0.00%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               vector<_Tp, _Alloc>::
        .               _M_fill_assign(size_t __n, const value_type& __val)
        .               {
        .                 const size_type __sz = size();
-- line 273 ----------------------------------------
-- line 573 ----------------------------------------
        .                 this->_M_impl._M_end_of_storage = __new_start + __len;
        .               }
        .           
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename _Alloc>
        .               template<typename... _Args>
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
    2,772 ( 0.00%)        vector<_Tp, _Alloc>::
        .                 _M_realloc_append(_Args&&... __args)
        .           #else
        .             template<typename _Tp, typename _Alloc>
        .               void
        .               vector<_Tp, _Alloc>::
        .               _M_realloc_append(const _Tp& __x)
        .           #endif
        .               {
    1,232 ( 0.00%)        const size_type __len = _M_check_len(1u, "vector::_M_realloc_append");
       75 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const (1x)
        .                 if (__len <= 0)
        .           	__builtin_unreachable ();
      308 ( 0.00%)        pointer __old_start = this->_M_impl._M_start;
      616 ( 0.00%)        pointer __old_finish = this->_M_impl._M_finish;
    3,388 ( 0.00%)        const size_type __elems = end() - begin();
       19 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&) (1x)
       10 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::end() (1x)
       10 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::begin() (1x)
      924 ( 0.00%)        pointer __new_start(this->_M_allocate(__len));
      206 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long) [clone .isra.0] (1x)
        .                 pointer __new_finish(__new_start);
        .           
        .                 // RAII guard for allocated storage.
        .                 struct _Guard
        .                 {
        .           	pointer _M_storage;	    // Storage to deallocate
        .           	size_type _M_len;
        .           	_Tp_alloc_type& _M_alloc;
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Guard(pointer __s, size_type __l, _Tp_alloc_type& __a)
      924 ( 0.00%)  	: _M_storage(__s), _M_len(__l), _M_alloc(__a)
      308 ( 0.00%)  	{ }
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	~_Guard()
        .           	{
      924 ( 0.00%)  	  if (_M_storage)
        .           	    __gnu_cxx::__alloc_traits<_Tp_alloc_type>::
        .           	      deallocate(_M_alloc, _M_storage, _M_len);
        3 ( 0.00%)  	}
        .           
        .                 private:
        .           	_Guard(const _Guard&);
        .                 };
        .           
        .                 {
    1,540 ( 0.00%)  	_Guard __guard(__new_start, __len, _M_impl);
        4 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_append<unsigned int const&>(unsigned int const&)::_Guard::_Guard(unsigned int*, unsigned long, std::allocator<unsigned int>&) (1x)
        .           
        .           	// The order of the three operations is dictated by the C++11
        .           	// case, where the moves could alter a new element belonging
        .           	// to the existing vector.  This is an issue only for callers
        .           	// taking the element by lvalue ref (see last bullet of C++11
        .           	// [res.on.arguments]).
        .           
        .           	// If this throws, the existing elements are unchanged.
        .           #if __cplusplus >= 201103L
    2,146 ( 0.00%)  	_Alloc_traits::construct(this->_M_impl,
        2 ( 0.00%)  => /usr/include/c++/14/bits/move.h:unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&) (1x)
        2 ( 0.00%)  => /usr/include/c++/14/bits/ptr_traits.h:unsigned int* std::__to_address<unsigned int>(unsigned int*) (1x)
        .           				 std::__to_address(__new_start + __elems),
        .           				 std::forward<_Args>(__args)...);
        .           #else
        .           	_Alloc_traits::construct(this->_M_impl,
        .           				 __new_start + __elems,
        .           				 __x);
        .           #endif
        .           
        .           #if __cplusplus >= 201103L
        .           	if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        .           	  {
        .           	    // Relocation cannot throw.
       50 ( 0.00%)  	    __new_finish = _S_relocate(__old_start, __old_finish,
      974 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&) [clone .isra.0] (1x)
        .           				       __new_start, _M_get_Tp_allocator());
       20 ( 0.00%)  	    ++__new_finish;
        .           	  }
        .           	else
        .           #endif
        .           	  {
        .           	    // RAII type to destroy initialized elements.
        .           	    struct _Guard_elts
        .           	    {
        .           	      pointer _M_first, _M_last;  // Elements to destroy
-- line 657 ----------------------------------------
-- line 668 ----------------------------------------
        .           
        .           	    private:
        .           	      _Guard_elts(const _Guard_elts&);
        .           	    };
        .           
        .           	    // Guard the new element so it will be destroyed if anything throws.
        .           	    _Guard_elts __guard_elts(__new_start + __elems, _M_impl);
        .           
    1,490 ( 0.00%)  	    __new_finish = std::__uninitialized_move_if_noexcept_a(
   31,818 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:Move* std::__uninitialized_move_if_noexcept_a<Move*, Move*, std::allocator<Move> >(Move*, Move*, Move*, std::allocator<Move>&) [clone .isra.0] (298x)
        .           			     __old_start, __old_finish,
        .           			     __new_start, _M_get_Tp_allocator());
        .           
      596 ( 0.00%)  	    ++__new_finish;
        .           
        .           	    // New storage has been fully initialized, destroy the old elements.
        .           	    __guard_elts._M_first = __old_start;
        .           	    __guard_elts._M_last = __old_finish;
        .           	  }
      308 ( 0.00%)  	__guard._M_storage = __old_start;
    1,232 ( 0.00%)  	__guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
      616 ( 0.00%)        }
      773 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_append<unsigned int const&>(unsigned int const&)::_Guard::~_Guard() (1x)
        .                 // deallocate should be called before assignments to _M_impl,
        .                 // to avoid call-clobbering
        .           
      308 ( 0.00%)        this->_M_impl._M_start = __new_start;
        .                 this->_M_impl._M_finish = __new_finish;
      616 ( 0.00%)        this->_M_impl._M_end_of_storage = __new_start + __len;
    2,464 ( 0.00%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               vector<_Tp, _Alloc>::
        .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
        .               {
        .                 if (__n != 0)
-- line 703 ----------------------------------------
-- line 797 ----------------------------------------
        .           	    }
        .           	}
        .               }
        .           
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               void
       20 ( 0.00%)      vector<_Tp, _Alloc>::
        .               _M_default_append(size_type __n)
        .               {
        4 ( 0.00%)        if (__n != 0)
        .           	{
        9 ( 0.00%)  	  const size_type __size = size();
        4 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::size() const [clone .isra.0] (1x)
        .           	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
        6 ( 0.00%)  					 - this->_M_impl._M_finish);
        .           
        .           	  if (__size > max_size() || __navail > max_size() - __size)
        .           	    __builtin_unreachable();
        .           
        6 ( 0.00%)  	  if (__navail >= __n)
        .           	    {
        .           	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
        .           	      this->_M_impl._M_finish =
        .           		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
        .           						 __n, _M_get_Tp_allocator());
        .           	      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
        .           	    }
        .           	  else
        .           	    {
        .           	      // Make local copies of these members because the compiler thinks
        .           	      // the allocator can alter them if 'this' is globally reachable.
        .           	      pointer __old_start = this->_M_impl._M_start;
        .           	      pointer __old_finish = this->_M_impl._M_finish;
        .           
        .           	      const size_type __len =
       10 ( 0.00%)  		_M_check_len(__n, "vector::_M_default_append");
       75 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::_M_check_len(unsigned long, char const*) const (1x)
        6 ( 0.00%)  	      pointer __new_start(this->_M_allocate(__len));
      235 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_M_allocate(unsigned long) [clone .isra.0] (1x)
        .           
        .           	      // RAII guard for allocated storage.
        .           	      struct _Guard
        .           	      {
        .           		pointer _M_storage;         // Storage to deallocate
        .           		size_type _M_len;
        .           		_Tp_alloc_type& _M_alloc;
        .           
        .           		_GLIBCXX20_CONSTEXPR
        .           		_Guard(pointer __s, size_type __l, _Tp_alloc_type& __a)
        6 ( 0.00%)  		: _M_storage(__s), _M_len(__l), _M_alloc(__a)
        2 ( 0.00%)  		{ }
        .           
        .           		_GLIBCXX20_CONSTEXPR
        .           		~_Guard()
        .           		{
        6 ( 0.00%)  		  if (_M_storage)
        .           		    __gnu_cxx::__alloc_traits<_Tp_alloc_type>::
        .           		      deallocate(_M_alloc, _M_storage, _M_len);
        1 ( 0.00%)  		}
        .           
        .           	      private:
        .           		_Guard(const _Guard&);
        .           	      };
        .           
        .           	      {
       14 ( 0.00%)  		_Guard __guard(__new_start, __len, _M_impl);
        4 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)::_Guard::_Guard(unsigned long*, unsigned long, std::allocator<unsigned long>&) (1x)
        .           
        7 ( 0.00%)  		std::__uninitialized_default_n_a(__new_start + __size, __n,
       69 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:unsigned long* std::__uninitialized_default_n_a<unsigned long*, unsigned long, unsigned long>(unsigned long*, unsigned long, std::allocator<unsigned long>&) [clone .isra.0] (1x)
        .           						 _M_get_Tp_allocator());
        .           
        .           		if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
        .           		  {
        4 ( 0.00%)  		    _S_relocate(__old_start, __old_finish,
       54 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::_S_relocate(unsigned long*, unsigned long*, unsigned long*, std::allocator<unsigned long>&) [clone .isra.0] (1x)
        .           				__new_start, _M_get_Tp_allocator());
        .           		  }
        .           		else
        .           		  {
        .           		    // RAII type to destroy initialized elements.
        .           		    struct _Guard_elts
        .           		    {
        .           		      pointer _M_first, _M_last;  // Elements to destroy
-- line 876 ----------------------------------------
-- line 886 ----------------------------------------
        .           		      ~_Guard_elts()
        .           		      { std::_Destroy(_M_first, _M_last, _M_alloc); }
        .           
        .           		    private:
        .           		      _Guard_elts(const _Guard_elts&);
        .           		    };
        .           		    _Guard_elts __guard_elts(__new_start + __size, __n, _M_impl);
        .           
        4 ( 0.00%)  		    std::__uninitialized_move_if_noexcept_a(
       27 ( 0.00%)  => /usr/include/c++/14/bits/stl_uninitialized.h:std::array<Move, 2ul>* std::__uninitialized_move_if_noexcept_a<std::array<Move, 2ul>*, std::array<Move, 2ul>*, std::allocator<std::array<Move, 2ul> > >(std::array<Move, 2ul>*, std::array<Move, 2ul>*, std::array<Move, 2ul>*, std::allocator<std::array<Move, 2ul> >&) [clone .isra.0] (1x)
        .           		      __old_start, __old_finish, __new_start,
        .           		      _M_get_Tp_allocator());
        .           
        .           		    __guard_elts._M_first = __old_start;
        .           		    __guard_elts._M_last = __old_finish;
        .           		  }
        .           		_GLIBCXX_ASAN_ANNOTATE_REINIT;
        2 ( 0.00%)  		__guard._M_storage = __old_start;
        9 ( 0.00%)  		__guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
        4 ( 0.00%)  	      }
       80 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)::_Guard::~_Guard() (1x)
        .           	      // deallocate should be called before assignments to _M_impl,
        .           	      // to avoid call-clobbering
        .           
        2 ( 0.00%)  	      this->_M_impl._M_start = __new_start;
        7 ( 0.00%)  	      this->_M_impl._M_finish = __new_start + __size + __n;
        4 ( 0.00%)  	      this->_M_impl._M_end_of_storage = __new_start + __len;
        .           	    }
        .           	}
       16 ( 0.00%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               _GLIBCXX20_CONSTEXPR
        .               bool
        .               vector<_Tp, _Alloc>::
        .               _M_shrink_to_fit()
        .               {
        .                 if (capacity() == size())
-- line 921 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: MagicBitboards.hpp
--------------------------------------------------------------------------------
Ir                  

-- line 15 ----------------------------------------
         .               /**
         .                * @brief Returns attack pattern for pawns
         .                * 
         .                * @param tSquare Where the pawn is located
         .                * @param tSide Pawn color
         .                * @return uint64_t attack pattern bitboard
         .                */
         .               constexpr uint64_t pawnAttacks(int tSquare, int tSide) const {
 2,545,000 ( 0.16%)          return mPawnAttacks[tSquare][tSide];
   636,250 ( 0.04%)      }
         .           
         .               /**
         .                * @brief Returns attack pattern for (non-pawn) pieces 
         .                * 
         .                * @param tPiece Non-pawn piece 
         .                * @param tSquare Where the piece is located
         .                * @param tOccupied Position occupancy bitboard
         .                * @return uint64_t attack pattern bitboard
         .                */
         .               constexpr uint64_t getAttacks(int tPiece, int tSquare, uint64_t tOccupied) const {
22,266,174 ( 1.41%)          switch (tPiece) {
 1,367,580 ( 0.09%)              case knight: return knightAttacks(tSquare);
 2,051,370 ( 0.13%)  => MagicBitboards.hpp:MagicBitboards::knightAttacks(int) const (683,790x)
 1,313,098 ( 0.08%)              case bishop: return bishopAttacks(tOccupied, tSquare);
 5,908,941 ( 0.37%)  => MagicBitboards.hpp:MagicBitboards::bishopAttacks(unsigned long, int) const (656,549x)
 1,330,778 ( 0.08%)              case rook:   return rookAttacks(tOccupied, tSquare);
 5,988,501 ( 0.38%)  => MagicBitboards.hpp:MagicBitboards::rookAttacks(unsigned long, int) const (665,389x)
 1,205,648 ( 0.08%)              case queen:  return queenAttacks(tOccupied, tSquare);
23,510,136 ( 1.49%)  => MagicBitboards.hpp:MagicBitboards::queenAttacks(unsigned long, int) const (602,824x)
 1,144,660 ( 0.07%)              case king:   return kingAttacks(tSquare);
 1,716,990 ( 0.11%)  => MagicBitboards.hpp:MagicBitboards::kingAttacks(int) const (572,330x)
         .                       default: throw std::invalid_argument("Input piece is invalid");
         .                   }
         .               }
         .           
         .           private:
         .               MagicBitboards();
         .               ~MagicBitboards() {delete mInstance; mInstance = nullptr;}
         .           
-- line 48 ----------------------------------------
-- line 51 ----------------------------------------
         .               void initKingAttacks();
         .               void initPawnAttacks();
         .               void initMagicMoves();
         .               
         .               constexpr uint64_t rayAttacks (int tSquare, int tDirection) const {
         .                   return mRayAttacks[tSquare][tDirection];
         .               }
         .               constexpr uint64_t knightAttacks (int tSquare) const {
 1,367,580 ( 0.09%)          return mKnightAttacks[tSquare];
   683,790 ( 0.04%)      }
         .               constexpr uint64_t kingAttacks (int tSquare) const {
 1,144,660 ( 0.07%)          return mKingAttacks[tSquare];
   572,330 ( 0.04%)      }
         .               constexpr uint64_t rookAttacks (uint64_t tOccupied, int tSquare) const {
10,145,704 ( 0.64%)          return mRMagicDb[tSquare][((tOccupied & mRMask[tSquare]) * mRMagic[tSquare]) >> mRShift[tSquare]];
 1,268,213 ( 0.08%)      }
         .               constexpr uint64_t bishopAttacks (uint64_t tOccupied, int tSquare) const {
10,074,984 ( 0.64%)          return mBMagicDb[tSquare][((tOccupied & mBMask[tSquare]) * mBMagic[tSquare]) >> mBShift[tSquare]];
 1,259,373 ( 0.08%)      }
 4,822,592 ( 0.31%)      constexpr uint64_t queenAttacks (uint64_t tOccupied, int tSquare) const {
 4,219,768 ( 0.27%)          return rookAttacks(tOccupied, tSquare) | bishopAttacks(tOccupied, tSquare);
 5,425,416 ( 0.34%)  => MagicBitboards.hpp:MagicBitboards::bishopAttacks(unsigned long, int) const (602,824x)
 5,425,416 ( 0.34%)  => MagicBitboards.hpp:MagicBitboards::rookAttacks(unsigned long, int) const (602,824x)
 3,616,944 ( 0.23%)      }
         .           
         .               uint64_t initMagicOcc(int *, int, uint64_t);
         .               uint64_t initMagicBMoves(int, uint64_t);
         .               uint64_t initMagicRMoves(int, uint64_t);
         .           
         .           private:
         .               static MagicBitboards *mInstance;
         .           
-- line 80 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/new
--------------------------------------------------------------------------------
Ir                 

-- line 171 ----------------------------------------
        .           void operator delete(void*, std::size_t, std::align_val_t)
        .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
        .           void operator delete[](void*, std::size_t, std::align_val_t)
        .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
        .           #endif // __cpp_sized_deallocation
        .           #endif // __cpp_aligned_new
        .           
        .           // Default placement versions of operator new.
1,073,010 ( 0.07%)  _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
1,073,010 ( 0.07%)  { return __p; }
        .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
        .           { return __p; }
        .           
        .           // Default placement versions of operator delete.
        .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
        .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
        .           //@}
        .           } // extern "C++"
-- line 188 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir               

-- line 873 ----------------------------------------
      .           #endif
      .           
      .                 template<typename _U1, typename _U2, typename
      .           	       enable_if<_PCCP::template
      .           			   _MoveConstructiblePair<_U1, _U2>()
      .           			  && _PCCP::template
      .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
      .                                    bool>::type=true>
288,384 ( 0.02%)  	constexpr pair(_U1&& __x, _U2&& __y)
336,448 ( 0.02%)  	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/move.h:long& std::forward<long&>(std::remove_reference<long&>::type&) (48,064x)
 96,128 ( 0.01%)  => /usr/include/c++/14/bits/move.h:Move*& std::forward<Move*&>(std::remove_reference<Move*&>::type&) (48,064x)
192,256 ( 0.01%)  	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
      .           
      .                 template<typename _U1, typename _U2, typename
      .           	       enable_if<_PCCP::template
      .           			   _MoveConstructiblePair<_U1, _U2>()
      .           			  && !_PCCP::template
      .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
      .                                    bool>::type=false>
      .           	explicit constexpr pair(_U1&& __x, _U2&& __y)
-- line 891 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bit
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .           
      .             template<typename _Tp>
      .               constexpr int
      .               __countl_zero(_Tp __x) noexcept
      .               {
      .                 using __gnu_cxx::__int_traits;
      .                 constexpr auto _Nd = __int_traits<_Tp>::__digits;
      .           
 96,128 ( 0.01%)        if (__x == 0)
 48,064 ( 0.00%)          return _Nd;
      .           
      .                 constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
      .                 constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
      .                 constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
      .           
      .                 if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)
      .           	{
      .           	  constexpr int __diff = _Nd_u - _Nd;
      .           	  return __builtin_clz(__x) - __diff;
      .           	}
      .                 else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ul)
      .           	{
      .           	  constexpr int __diff = _Nd_ul - _Nd;
 96,128 ( 0.01%)  	  return __builtin_clzl(__x) - __diff;
      .           	}
      .                 else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ull)
      .           	{
      .           	  constexpr int __diff = _Nd_ull - _Nd;
      .           	  return __builtin_clzll(__x) - __diff;
      .           	}
      .                 else // (_Nd > _Nd_ull)
      .           	{
-- line 229 ----------------------------------------
-- line 235 ----------------------------------------
      .           	    {
      .           	      constexpr int __diff = (2 * _Nd_ull) - _Nd;
      .           	      return __builtin_clzll(__high) - __diff;
      .           	    }
      .           	  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;
      .           	  unsigned long long __low = __x & __max_ull;
      .           	  return (_Nd - _Nd_ull) + __builtin_clzll(__low);
      .           	}
 48,064 ( 0.00%)      }
      .           
      .             template<typename _Tp>
      .               constexpr int
      .               __countl_one(_Tp __x) noexcept
      .               {
      .                 return std::__countl_zero<_Tp>((_Tp)~__x);
      .               }
      .           
-- line 251 ----------------------------------------
-- line 363 ----------------------------------------
      .                 constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      .                 if (__x == 0)
      .                   return 0;
      .                 return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
      .               }
      .           
      .             template<typename _Tp>
      .               constexpr int
 48,064 ( 0.00%)      __bit_width(_Tp __x) noexcept
      .               {
      .                 constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
192,256 ( 0.01%)        return _Nd - std::__countl_zero(__x);
288,384 ( 0.02%)  => /usr/include/c++/14/bit:int std::__countl_zero<unsigned long>(unsigned long) (48,064x)
 96,128 ( 0.01%)      }
      .           
      .             /// @endcond
      .           
      .           #ifdef __cpp_lib_bitops // C++ >= 20
      .           
      .             /// @cond undocumented
      .             template<typename _Tp>
      .               concept __unsigned_integer = __is_unsigned_integer<_Tp>::value;
-- line 383 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/14/bits/move.h
--------------------------------------------------------------------------------
Ir                 

-- line 43 ----------------------------------------
        .           
        .             // Used, in C++03 mode too, by allocators, etc.
        .             /**
        .              *  @brief Same as C++11 std::addressof
        .              *  @ingroup utilities
        .              */
        .             template<typename _Tp>
        .               inline _GLIBCXX_CONSTEXPR _Tp*
  171,851 ( 0.01%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  171,851 ( 0.01%)      { return __builtin_addressof(__r); }
        .           
        .           #if __cplusplus >= 201103L
        .           
        .             /**
        .              *  @addtogroup utilities
        .              *  @{
        .              */
        .           
-- line 60 ----------------------------------------
-- line 63 ----------------------------------------
        .              *  @return The parameter cast to the specified type.
        .              *
        .              *  This function is used to implement "perfect forwarding".
        .              *  @since C++11
        .              */
        .             template<typename _Tp>
        .               _GLIBCXX_NODISCARD
        .               constexpr _Tp&&
3,058,287 ( 0.19%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
3,058,287 ( 0.19%)      { return static_cast<_Tp&&>(__t); }
        .           
        .             /**
        .              *  @brief  Forward an rvalue.
        .              *  @return The parameter cast to the specified type.
        .              *
        .              *  This function is used to implement "perfect forwarding".
        .              *  @since C++11
        .              */
-- line 80 ----------------------------------------
-- line 129 ----------------------------------------
        .              *  @brief  Convert a value to an rvalue.
        .              *  @param  __t  A thing of arbitrary type.
        .              *  @return The parameter cast to an rvalue-reference to allow moving it.
        .              *  @since C++11
        .             */
        .             template<typename _Tp>
        .               _GLIBCXX_NODISCARD
        .               constexpr typename std::remove_reference<_Tp>::type&&
2,624,257 ( 0.17%)      move(_Tp&& __t) noexcept
2,624,257 ( 0.17%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        .           
        .           
        .             template<typename _Tp>
        .               struct __move_if_noexcept_cond
        .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        .                               is_copy_constructible<_Tp>>::type { };
        .           
        .             /**
-- line 146 ----------------------------------------
-- line 218 ----------------------------------------
        .               inline
        .           #if __cplusplus >= 201103L
        .               typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        .           			      is_move_constructible<_Tp>,
        .           			      is_move_assignable<_Tp>>::value>::type
        .           #else
        .               void
        .           #endif
   10,162 ( 0.00%)      swap(_Tp& __a, _Tp& __b)
        .               _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        .           				is_nothrow_move_assignable<_Tp>>::value)
        .               {
        .           #if __cplusplus < 201103L
        .                 // concept requirements
        .                 __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        .           #endif
    7,258 ( 0.00%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
    4,353 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (1,451x)
    2,902 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (1,451x)
   13,063 ( 0.00%)        __a = _GLIBCXX_MOVE(__b);
    4,353 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (1,451x)
    2,902 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (1,451x)
    4,353 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (1,451x)
   11,612 ( 0.00%)        __b = _GLIBCXX_MOVE(__tmp);
    4,353 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (1,451x)
    2,902 ( 0.00%)  => /usr/include/c++/14/bits/move.h:std::remove_reference<Move&>::type&& std::move<Move&>(Move&) (1,451x)
    4,353 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::operator=(Move) (1,451x)
    8,710 ( 0.00%)      }
        .           
        .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .             // DR 809. std::swap should be overloaded for array types.
        .             /// Swap the contents of two arrays.
        .             template<typename _Tp, size_t _Nm>
        .               _GLIBCXX20_CONSTEXPR
        .               inline
        .           #if __cplusplus >= 201103L
-- line 245 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Board.cpp
--------------------------------------------------------------------------------
Ir                 

-- line 9 ----------------------------------------
        .           #include <ostream>
        .           #include <string>
        .           #include <sstream>
        .           #include <vector>
        .           #include <array>
        .           
        .           
        .           
       32 ( 0.00%)  Board::Board(std::string tFEN) : mZobrist{Zobrist::getInstance()} {
   49,542 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.cpp:Zobrist::getInstance() (2x)
       14 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::vector() (2x)
        .               struct PieceColor { int pieceType; int pieceColor; };
        .           
        .               static constexpr std::array<PieceColor, 128> pieceColorMap = [] {
        .                   std::array<PieceColor, 128> map {};
        .                   auto insert = [&] (char c, int piece, int color) {
        .                       map[static_cast<unsigned char>(c)] = {piece, color};
        .                   };
        .                   insert('P', pawn,   white); insert('p', pawn,   black);
-- line 25 ----------------------------------------
-- line 27 ----------------------------------------
        .                   insert('B', bishop, white); insert('b', bishop, black);
        .                   insert('R', rook,   white); insert('r', rook,   black);
        .                   insert('Q', queen,  white); insert('q', queen,  black);
        .                   insert('K', king,   white); insert('k', king,   black);
        .                   return map;
        .               }();
        .           
        .               // Parse FEN fields
       20 ( 0.00%)      std::istringstream fenStream(tFEN);
    1,455 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    3,592 ( 0.00%)  => ???:std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode) (2x)
       44 ( 0.00%)      std::string fenPiecePlacement, fenActiveColor, fenCastlingRights, fenEpSquare;
    1,070 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
       48 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() (8x)
        2 ( 0.00%)      int fenHalfmoveClock = 0;
        .           
       36 ( 0.00%)      fenStream >> fenPiecePlacement >> fenActiveColor >> fenCastlingRights >> fenEpSquare;
    1,355 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    6,344 ( 0.00%)  => ???:std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (8x)
       30 ( 0.00%)      if (!(fenStream >> fenHalfmoveClock)) fenHalfmoveClock = 0;
    1,691 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (2x)
    2,194 ( 0.00%)  => ???:std::istream::operator>>(int&) (2x)
        8 ( 0.00%)  => ???:std::basic_ios<char, std::char_traits<char> >::operator!() const (2x)
        .           
        .               // Initialize state
       10 ( 0.00%)      mStateHist.emplace_back(uint32_t(0x0));
      938 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) [clone .isra.0] (2x)
        6 ( 0.00%)      std::fill(std::begin(mBitboards), std::end(mBitboards), 0ULL);
       58 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::fill<unsigned long*, unsigned long long>(unsigned long*, unsigned long*, unsigned long long const&) [clone .isra.0] (2x)
       10 ( 0.00%)      std::fill(std::begin(mPieceSquare), std::end(mPieceSquare), 0);
      338 ( 0.00%)  => /usr/include/c++/14/bits/stl_algobase.h:void std::fill<int*, int>(int*, int*, int const&) [clone .isra.0] (2x)
        .           
        .               // Setup bitboards
       10 ( 0.00%)      std::istringstream piecePlacementStream(fenPiecePlacement);
    1,570 ( 0.00%)  => ???:std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode) (2x)
       16 ( 0.00%)      std::string fenRankString;
       12 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() (2x)
        .           
      112 ( 0.00%)      for (int rankIndex = 0; rankIndex < 8; ++rankIndex) {
       84 ( 0.00%)          getline(piecePlacementStream, fenRankString, '/');
    1,427 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    4,800 ( 0.00%)  => ???:std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char) (16x)
       16 ( 0.00%)          int fileIndex = 0;
    1,204 ( 0.00%)          for (char c : fenRankString) {
    2,131 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (2x)
    1,800 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&) (100x)
      168 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator*() const [clone .isra.0] (84x)
      168 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++() [clone .isra.0] (84x)
       64 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() (16x)
       48 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() (16x)
      252 ( 0.00%)              if (isdigit(c)) {
       20 ( 0.00%)                  fileIndex += c - '0';
       20 ( 0.00%)                  continue;
        .                       }
      256 ( 0.00%)              int squareIndex = (7 - rankIndex) * 8 + fileIndex++;
      256 ( 0.00%)              auto [piece, pieceColor] = pieceColorMap[static_cast<unsigned char>(c)];
      192 ( 0.00%)  => /usr/include/c++/14/array:std::array<Board::Board(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::PieceColor, 128ul>::operator[](unsigned long) const [clone .constprop.0] (64x)
      128 ( 0.00%)              assert(piece);
      192 ( 0.00%)              uint64_t squareMask = 1ULL << squareIndex;
      320 ( 0.00%)              mBitboards[piece] |= squareMask;
      128 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (64x)
      256 ( 0.00%)              mBitboards[pieceColor] |= squareMask;
      128 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (64x)
      320 ( 0.00%)              mPieceSquare[squareIndex] = piece;
      128 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (64x)
      320 ( 0.00%)              mKey ^= mZobrist.getPieceKey(pieceColor, piece, squareIndex);
      896 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (64x)
        .                   }
        .               }
        .           
        .               // King positions
       28 ( 0.00%)      setKingSquare(white, bitScanForward(mBitboards[king] & mBitboards[white]));
        8 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (4x)
      106 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::setKingSquare(int, int) (2x)
       10 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (2x)
       20 ( 0.00%)      setKingSquare(black, bitScanForward(mBitboards[king] & mBitboards[black]));
        4 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (2x)
      106 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::setKingSquare(int, int) (2x)
       10 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/utils.hpp:bitScanForward(unsigned long) (2x)
        .           
        .               // Side to move
       16 ( 0.00%)      if (fenActiveColor[0] != 'w') {
    1,052 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
        8 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) (2x)
        .                   toggleSideToMove();
        .                   mKey ^= mZobrist.getSTMKey();
        .               }
        .           
        .               // Castling rights
      112 ( 0.00%)      for (char c : fenCastlingRights) {
      180 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:bool __gnu_cxx::operator!=<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&) (10x)
       16 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator++() [clone .isra.0] (8x)
       16 ( 0.00%)  => /usr/include/c++/14/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator*() const [clone .isra.0] (8x)
        8 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() (2x)
        6 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() (2x)
       38 ( 0.00%)          switch (c) {
        8 ( 0.00%)          case 'k': mStateHist.back() |= uint32_t(1) << 2; break;
       66 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (2x)
        8 ( 0.00%)          case 'q': mStateHist.back() |= uint32_t(1) << 4; break;
       66 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (2x)
        8 ( 0.00%)          case 'K': mStateHist.back() |= uint32_t(1) << 1; break;
       66 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (2x)
        6 ( 0.00%)          case 'Q': mStateHist.back() |= uint32_t(1) << 3; break;
       66 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (2x)
        .                   }
        .               }
       18 ( 0.00%)      mKey ^= mZobrist.getCastleKey(getCastles());
       82 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCastles() const (2x)
       18 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getCastleKey(int) const (2x)
        .           
        .               // En passant square
       10 ( 0.00%)      if (fenEpSquare != "-") {
    3,178 ( 0.00%)  => /usr/include/c++/14/bits/basic_string.h:bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (2x)
        .                   setEpSquare(fenEpSquare[0] - 'a' + 8 * (1 - getSideToMove()));
        .                   mKey ^= mZobrist.getEPKey(getEpSquare() % 8); 
        .               }
        .           
        .               // Halfmove clock
       12 ( 0.00%)      mStateHist.back() |= (fenHalfmoveClock & 0x7f) << 25;
       66 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (2x)
       66 ( 0.00%)  }
    2,197 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (2x)
    4,400 ( 0.00%)  => ???:std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream() (4x)
      200 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (10x)
        .           
        .           Board::Board(const Board &tOther) : 
        .               mBitboards{tOther.mBitboards}, 
        .               mPieceSquare{tOther.mPieceSquare},
        .               mKey(tOther.mKey) ,
        .               mZobrist{Zobrist::getInstance()}
        .           {
        .               if(tOther.mStateHist.size())mStateHist.emplace_back(tOther.mStateHist.back());
        .           }
        .           
        .           Board &Board::operator=(const Board &tOther)
        2 ( 0.00%)  {
        2 ( 0.00%)      if(this != &tOther){
        9 ( 0.00%)          mBitboards = tOther.mBitboards;
       32 ( 0.00%)          mPieceSquare = tOther.mPieceSquare;
        2 ( 0.00%)          mKey = tOther.mKey;
       10 ( 0.00%)          if(tOther.mStateHist.size())mStateHist.emplace_back(tOther.mStateHist.back());
    2,176 ( 0.00%)  => /usr/include/c++/14/bits/vector.tcc:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int const&>(unsigned int const&) [clone .isra.0] (1x)
       33 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() const (1x)
        4 ( 0.00%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::size() const [clone .isra.0] (1x)
        .               }
        .               return *this;
        3 ( 0.00%)  }
        .           
        .           
        .           bool Board::operator==(const Board &tOther) const
        .           {
        .               static constexpr uint32_t mask = uint32_t(0x7f) << 25 | uint32_t(0x7) << 10;
        .               return (mBitboards == tOther.mBitboards) && ((mStateHist.back() & ~mask) == (tOther.mStateHist.back() & ~mask));
        .           }
        .           
-- line 127 ----------------------------------------
-- line 180 ----------------------------------------
        .                   << castleRights[getCastles()] << ' '
        .                   << (getEpState() == true ? EPmap[getEpSquare() - a4] : "-") << ' '
        .                   << getHMC() << ' ' << getFMC();    
        .           
        .               return out.str();
        .           }
        .           
        .           void Board::makeMove(const Move &tMove)
3,116,190 ( 0.20%)  {
  934,857 ( 0.06%)      const int stm      = getSideToMove();
12,464,760 ( 0.79%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (311,619x)
1,246,476 ( 0.08%)      const int moveFrom = tMove.from();
1,246,476 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (311,619x)
  623,238 ( 0.04%)      const int moveTo   = tMove.to();
  934,857 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (311,619x)
  934,857 ( 0.06%)      const int moved    = searchPiece(moveFrom);
2,804,571 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (311,619x)
2,492,952 ( 0.16%)      const int captured = tMove.isEnPassant() ? pawn : searchPiece(moveTo);
2,804,571 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (311,619x)
2,181,333 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isEnPassant() const [clone .isra.0] (311,619x)
        .           
2,804,571 ( 0.18%)      updateState(moved, captured, tMove);
141,832,719 ( 9.00%)  => Board.cpp:Board::updateState(int, int, Move) (311,619x)
  934,857 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (311,619x)
2,804,571 ( 0.18%)      updateBitboards(stm, moved, captured, tMove);
50,045,614 ( 3.17%)  => Board.cpp:Board::updateBitboards(int, int, int, Move) (311,619x)
  934,857 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (311,619x)
        .           
  623,238 ( 0.04%)      if (moved == king) 
  228,755 ( 0.01%)          setKingSquare(stm, moveTo);
2,424,803 ( 0.15%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::setKingSquare(int, int) (45,751x)
        .           
1,869,714 ( 0.12%)      mPieceSquare[moveFrom] = 0;
  623,238 ( 0.04%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (311,619x)
2,500,008 ( 0.16%)      mPieceSquare[moveTo]   = tMove.isPromo() ? tMove.promoPiece() : moved;
2,181,333 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isPromo() const [clone .isra.0] (311,619x)
  623,238 ( 0.04%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (311,619x)
   16,464 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::promoPiece() const [clone .isra.0] (2,352x)
1,246,476 ( 0.08%)      if(tMove.isEnPassant()){
2,181,333 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isEnPassant() const [clone .isra.0] (311,619x)
        .                   static constexpr std::array<int, 2> epOffset = {-8, 8};
        .                   mPieceSquare[moveTo + epOffset[stm]] = 0;
        .               }
1,246,476 ( 0.08%)      if(tMove.isCastle()){
2,492,952 ( 0.16%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCastle() const [clone .isra.0] (311,619x)
        .                   static constexpr std::array<int, 4> rookFrom = {h1, a1, h8, a8};
        .                   static constexpr std::array<int, 4> rookTo   = {f1, d1, f8, d8};
   75,332 ( 0.00%)          const int index = (tMove.flag() - kingCastle) + (2 * stm);
   56,499 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::flag() const [clone .isra.0] (18,833x)
  150,664 ( 0.01%)          mPieceSquare [rookFrom[index]] = 0;
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (18,833x)
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 4ul>::operator[](unsigned long) const (18,833x)
  131,831 ( 0.01%)          mPieceSquare [rookTo[index]]   = rook;
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (18,833x)
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 4ul>::operator[](unsigned long) const (18,833x)
        .               }
2,492,952 ( 0.16%)  }
        .           
        .           void Board::undoMove(const Move &tMove)
2,804,571 ( 0.18%)  {
        .           
1,246,476 ( 0.08%)      const int stm      = 1 - getSideToMove();
12,464,760 ( 0.79%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getSideToMove() const (311,619x)
  623,238 ( 0.04%)      const int moveFrom = tMove.from();
1,246,476 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (311,619x)
  623,238 ( 0.04%)      const int moveTo   = tMove.to();
  934,857 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (311,619x)
2,485,896 ( 0.16%)      const int moved    = tMove.isPromo() ? pawn : searchPiece(moveTo);
2,783,403 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::searchPiece(int) const (309,267x)
2,181,333 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isPromo() const [clone .isra.0] (311,619x)
  934,857 ( 0.06%)      const int captured = getCaptured();
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCaptured() const (311,619x)
        .           
  623,238 ( 0.04%)      forgetState();
68,355,795 ( 4.34%)  => Board.cpp:Board::forgetState() (311,619x)
3,425,457 ( 0.22%)      updateBitboards(stm, moved, captured, tMove);
50,045,614 ( 3.17%)  => Board.cpp:Board::updateBitboards(int, int, int, Move) (311,619x)
  934,857 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.cpp:Move::Move(Move const&) (311,619x)
        .           
  620,886 ( 0.04%)      if (moved == king) 
  228,755 ( 0.01%)          setKingSquare(stm, moveFrom);
2,424,803 ( 0.15%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::setKingSquare(int, int) (45,751x)
        .           
1,869,714 ( 0.12%)      mPieceSquare[moveFrom]  = moved;
  623,238 ( 0.04%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (311,619x)
1,246,476 ( 0.08%)      if(tMove.isEnPassant()){
2,181,333 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isEnPassant() const [clone .isra.0] (311,619x)
        .                   static constexpr std::array<int, 2> epOffset = {-8, 8};
        .                   mPieceSquare[moveTo + epOffset[stm]] = pawn;
  311,619 ( 0.02%)          mPieceSquare[moveTo]                 = 0;
        .               }
        .               else {
1,558,095 ( 0.10%)          mPieceSquare[moveTo] = captured;
  623,238 ( 0.04%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (311,619x)
        .               }
        .           
1,246,476 ( 0.08%)      if(tMove.isCastle()){
2,492,952 ( 0.16%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCastle() const [clone .isra.0] (311,619x)
        .                   static constexpr std::array<int, 4> rookFrom = {h1, a1, h8, a8};
        .                   static constexpr std::array<int, 4> rookTo   = {f1, d1, f8, d8};
   56,499 ( 0.00%)          const int index = (tMove.flag() - kingCastle) + (2 * stm);
   56,499 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::flag() const [clone .isra.0] (18,833x)
  150,664 ( 0.01%)          mPieceSquare [rookTo[index]] = 0;
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (18,833x)
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 4ul>::operator[](unsigned long) const (18,833x)
  131,831 ( 0.01%)          mPieceSquare [rookFrom[index]]   = rook;
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 64ul>::operator[](unsigned long) (18,833x)
   37,666 ( 0.00%)  => /usr/include/c++/14/array:std::array<int, 4ul>::operator[](unsigned long) const (18,833x)
        .               }
2,492,952 ( 0.16%)  }
        .           
7,478,856 ( 0.47%)  void Board::updateBitboards(int tActiveColor, int tPiece, int tCaptured, Move tMove){
1,869,714 ( 0.12%)      const int moveFrom = tMove.from();
2,492,952 ( 0.16%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (623,238x)
1,246,476 ( 0.08%)      const int moveTo   = tMove.to();
1,869,714 ( 0.12%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (623,238x)
        .               static constexpr std::array<int, 2> epOffset = {-8, 8};
3,739,428 ( 0.24%)      const int capturedSquare = tMove.isEnPassant() ? moveTo + epOffset[tActiveColor] : moveTo;
4,362,666 ( 0.28%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isEnPassant() const [clone .isra.0] (623,238x)
        .           
4,362,666 ( 0.28%)      const uint64_t moveMask = 1ULL << moveFrom | 1ULL << moveTo;
2,492,952 ( 0.16%)      mBitboards[tActiveColor]   ^= moveMask;
1,246,476 ( 0.08%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (623,238x)
2,492,952 ( 0.16%)      mBitboards[tPiece] ^= moveMask;
1,246,476 ( 0.08%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (623,238x)
6,232,380 ( 0.40%)      mKey ^= mZobrist.getPieceKey(tActiveColor, tPiece, moveFrom);
8,725,332 ( 0.55%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (623,238x)
4,985,904 ( 0.32%)      mKey ^= mZobrist.getPieceKey(tActiveColor, tPiece, moveTo);
8,725,332 ( 0.55%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (623,238x)
        .           
2,492,952 ( 0.16%)      if(tMove.isPromo()){
4,362,666 ( 0.28%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isPromo() const [clone .isra.0] (623,238x)
        .                   const uint64_t mask = 1ULL << moveTo;
   23,520 ( 0.00%)          mBitboards[pawn]               ^= mask;
    9,408 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (4,704x)
   32,928 ( 0.00%)          mBitboards[tMove.promoPiece()] ^= mask;
    9,408 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (4,704x)
   32,928 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::promoPiece() const [clone .isra.0] (4,704x)
   37,632 ( 0.00%)          mKey ^= mZobrist.getPieceKey(tActiveColor, pawn, moveTo);
   65,856 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (4,704x)
   32,928 ( 0.00%)          mKey ^= mZobrist.getPieceKey(tActiveColor, tMove.promoPiece(), moveTo);
   65,856 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (4,704x)
        .               }
        .           
2,492,952 ( 0.16%)      if (tMove.isCapture()){
4,362,666 ( 0.28%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCapture() const [clone .isra.0] (623,238x)
  818,832 ( 0.05%)          const uint64_t captureMask = 1ULL << capturedSquare;
1,637,664 ( 0.10%)          mBitboards[1 - tActiveColor]  ^= captureMask;
  545,888 ( 0.03%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (272,944x)
1,364,720 ( 0.09%)          mBitboards[tCaptured] ^= captureMask;
  545,888 ( 0.03%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (272,944x)
1,637,664 ( 0.10%)          mKey ^= mZobrist.getPieceKey(1-tActiveColor, tCaptured, capturedSquare);
3,821,216 ( 0.24%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (272,944x)
        .               }
1,401,176 ( 0.09%)      else if (tMove.isCastle()) {
2,802,352 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCastle() const [clone .isra.0] (350,294x)
        .                   static constexpr std::array<int, 4> rookFrom = {h1, a1, h8, a8};
        .                   static constexpr std::array<int, 4> rookTo   = {f1, d1, f8, d8};
  112,998 ( 0.01%)          const int index = (tMove.flag() - kingCastle) + (2 * tActiveColor);
  112,998 ( 0.01%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::flag() const [clone .isra.0] (37,666x)
  489,658 ( 0.03%)          const uint64_t rookMask = (1ULL << rookFrom[index]) | (1ULL << rookTo[index]);
  150,664 ( 0.01%)  => /usr/include/c++/14/array:std::array<int, 4ul>::operator[](unsigned long) const (75,332x)
  150,664 ( 0.01%)          mBitboards[tActiveColor] ^= rookMask;
   75,332 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (37,666x)
  150,664 ( 0.01%)          mBitboards[rook]^= rookMask;
   75,332 ( 0.00%)  => /usr/include/c++/14/array:std::array<unsigned long, 8ul>::operator[](unsigned long) (37,666x)
  301,328 ( 0.02%)          mKey ^= mZobrist.getPieceKey(tActiveColor, rook, rookFrom[index]);
  527,324 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (37,666x)
  263,662 ( 0.02%)          mKey ^= mZobrist.getPieceKey(tActiveColor, rook, rookTo[index]);
  527,324 ( 0.03%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getPieceKey(int, int, int) const (37,666x)
        .               }
        .           
4,985,904 ( 0.32%)  }
        .           
3,427,809 ( 0.22%)  void Board::updateState(int tPiece, int tCaptured, Move tMove){
        .               static constexpr std::array<uint32_t, 64> stateMask = [] {
        .                   std::array<uint32_t, 64> arr {};
        .                   constexpr uint32_t epMask = ~(0x1fu << 5);
        .                   constexpr uint32_t capturedMask = ~(0x7u << 10);
        .                   for (int i = 0; i < 64; i++)
        .                       arr[i] = (UINT32_MAX & epMask & capturedMask);
        .                   arr[a1] &= ~(1U << 3);
        .                   arr[h1] &= ~(1U << 1);
        .                   arr[e1] &= ~(1U << 1) & ~(1U << 3);
        .                   arr[a8] &= ~(1U << 4);
        .                   arr[h8] &= ~(1U << 2);
        .                   arr[e8] &= ~(1U << 4) & ~(1U << 2);
        .                   return arr;
        .               } ();
2,492,952 ( 0.16%)      mKey ^= mZobrist.getCastleKey(getCastles());
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCastles() const (311,619x)
2,804,571 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getCastleKey(int) const (311,619x)
1,246,476 ( 0.08%)      if (getEpState())
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpState() const (311,619x)
    3,016 ( 0.00%)          mKey ^= mZobrist.getEPKey(getEpSquare()%8);
   15,834 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpSquare() const (377x)
    3,393 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getEPKey(int) const (377x)
        .           
6,855,618 ( 0.43%)      mStateHist.emplace_back(mStateHist.back() & stateMask[tMove.from()] & stateMask[tMove.to()]);
10,597,727 ( 0.67%)  => /usr/include/c++/14/bits/vector.tcc:unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&) [clone .isra.0] (311,619x)
10,283,427 ( 0.65%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::back() (311,619x)
1,246,476 ( 0.08%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::from() const [clone .isra.0] (311,619x)
1,246,476 ( 0.08%)  => /usr/include/c++/14/array:std::array<unsigned int, 64ul>::operator[](unsigned long) const (623,238x)
  934,857 ( 0.06%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (311,619x)
        .           
1,908,389 ( 0.12%)      if(tMove.isCapture() || tPiece == pawn){
2,181,333 ( 0.14%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isCapture() const [clone .isra.0] (311,619x)
  469,281 ( 0.03%)          resetHMC();
6,148,818 ( 0.39%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::resetHMC() (157,662x)
        .                   if(tMove.isCapture())
  409,416 ( 0.03%)              setCaptured(tCaptured);
5,595,352 ( 0.35%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::setCaptured(int) (136,472x)
  630,648 ( 0.04%)          if (tMove.isDoublePush())
1,103,634 ( 0.07%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::isDoublePush() const [clone .isra.0] (157,662x)
   40,740 ( 0.00%)              setEpSquare(tMove.to());
   20,370 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Move.hpp:Move::to() const [clone .isra.0] (6,790x)
  353,080 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::setEpSquare(int) (6,790x)
        .               }
        .               else {
  307,914 ( 0.02%)          incrementHMC();
6,004,323 ( 0.38%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::incrementHMC() (153,957x)
        .               }
        .           
2,804,571 ( 0.18%)      mKey ^= mZobrist.getCastleKey(getCastles());
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCastles() const (311,619x)
2,804,571 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getCastleKey(int) const (311,619x)
1,246,476 ( 0.08%)      if (getEpState())
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpState() const (311,619x)
   54,320 ( 0.00%)          mKey ^= mZobrist.getEPKey(getEpSquare()%8);
  285,180 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpSquare() const (6,790x)
   61,110 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getEPKey(int) const (6,790x)
        .           
  623,238 ( 0.04%)      toggleSideToMove();
14,334,474 ( 0.91%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::toggleSideToMove() (311,619x)
2,181,333 ( 0.14%)  }
        .           
1,246,476 ( 0.08%)  void Board::forgetState(){
2,492,952 ( 0.16%)      mKey ^= mZobrist.getCastleKey(getCastles());
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCastles() const (311,619x)
2,804,571 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getCastleKey(int) const (311,619x)
1,246,476 ( 0.08%)      if (getEpState())
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpState() const (311,619x)
   54,320 ( 0.00%)          mKey ^= mZobrist.getEPKey(getEpSquare()%8);
  285,180 ( 0.02%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpSquare() const (6,790x)
   61,110 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getEPKey(int) const (6,790x)
        .           
  623,238 ( 0.04%)      mStateHist.pop_back();
  623,238 ( 0.04%)  => /usr/include/c++/14/bits/stl_vector.h:std::vector<unsigned int, std::allocator<unsigned int> >::pop_back() (311,619x)
        .           
2,492,952 ( 0.16%)      mKey ^= mZobrist.getCastleKey(getCastles());
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getCastles() const (311,619x)
2,804,571 ( 0.18%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getCastleKey(int) const (311,619x)
1,246,476 ( 0.08%)      if (getEpState())
12,776,379 ( 0.81%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpState() const (311,619x)
    3,016 ( 0.00%)          mKey ^= mZobrist.getEPKey(getEpSquare()%8);
   15,834 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Board.hpp:Board::getEpSquare() const (377x)
    3,393 ( 0.00%)  => /home/claudio/Documenti/Code/BagattoEngine/Zobrist.hpp:Zobrist::getEPKey(int) const (377x)
1,246,476 ( 0.08%)  }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/generic/dl-new-hash.h
  ./elf/./elf/dl-lookup.c
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,543,297,535 (97.90%)  events annotated

